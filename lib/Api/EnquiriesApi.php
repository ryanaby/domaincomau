<?php
/**
 * EnquiriesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EnquiriesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnquiriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation enquiriesGet
     *
     * Retrieve the details of a specific enquiry
     *
     * @param  string $id Id of the enquiry (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EnquiriesV1EnquiryReport
     */
    public function enquiriesGet($id)
    {
        list($response) = $this->enquiriesGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation enquiriesGetWithHttpInfo
     *
     * Retrieve the details of a specific enquiry
     *
     * @param  string $id Id of the enquiry (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EnquiriesV1EnquiryReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function enquiriesGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport';
        $request = $this->enquiriesGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnquiriesV1EnquiryReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enquiriesGetAsync
     *
     * Retrieve the details of a specific enquiry
     *
     * @param  string $id Id of the enquiry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesGetAsync($id)
    {
        return $this->enquiriesGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enquiriesGetAsyncWithHttpInfo
     *
     * Retrieve the details of a specific enquiry
     *
     * @param  string $id Id of the enquiry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport';
        $request = $this->enquiriesGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enquiriesGet'
     *
     * @param  string $id Id of the enquiry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enquiriesGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling enquiriesGet'
            );
        }

        $resourcePath = '/v1/enquiries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enquiriesPost
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry $body The enquiry object (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    public function enquiriesPost($body)
    {
        list($response) = $this->enquiriesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation enquiriesPostWithHttpInfo
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry $body The enquiry object (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enquiriesPostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse';
        $request = $this->enquiriesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enquiriesPostAsync
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry $body The enquiry object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesPostAsync($body)
    {
        return $this->enquiriesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enquiriesPostAsyncWithHttpInfo
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry $body The enquiry object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse';
        $request = $this->enquiriesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enquiriesPost'
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry $body The enquiry object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enquiriesPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling enquiriesPost'
            );
        }

        $resourcePath = '/v1/enquiries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($delivery_method !== null) {
            $formParams['deliveryMethod'] = ObjectSerializer::toFormValue($delivery_method);
        }
        // form params
        if ($enquiry_type !== null) {
            $formParams['enquiryType'] = ObjectSerializer::toFormValue($enquiry_type);
        }
        // form params
        if ($reference_id !== null) {
            $formParams['referenceId'] = ObjectSerializer::toFormValue($reference_id);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($sender !== null) {
            $formParams['sender'] = ObjectSerializer::toFormValue($sender);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($meta_data !== null) {
            $formParams['metaData'] = ObjectSerializer::toFormValue($meta_data);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enquiriesPost
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  string $delivery_method delivery_method (required)
     * @param  string $enquiry_type enquiry_type (required)
     * @param  int $reference_id reference_id (required)
     * @param  string $id id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender sender (required)
     * @param  string $subject subject (required)
     * @param  string $message message (required)
     * @param  map[string,string] $meta_data meta_data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    public function enquiriesPost($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
    {
        list($response) = $this->enquiriesPostWithHttpInfo($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data);
        return $response;
    }

    /**
     * Operation enquiriesPostWithHttpInfo
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  string $delivery_method (required)
     * @param  string $enquiry_type (required)
     * @param  int $reference_id (required)
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender (required)
     * @param  string $subject (required)
     * @param  string $message (required)
     * @param  map[string,string] $meta_data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enquiriesPostWithHttpInfo($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
    {
        $returnType = '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse';
        $request = $this->enquiriesPostRequest($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enquiriesPostAsync
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  string $delivery_method (required)
     * @param  string $enquiry_type (required)
     * @param  int $reference_id (required)
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender (required)
     * @param  string $subject (required)
     * @param  string $message (required)
     * @param  map[string,string] $meta_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesPostAsync($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
    {
        return $this->enquiriesPostAsyncWithHttpInfo($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enquiriesPostAsyncWithHttpInfo
     *
     * Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     *
     * @param  string $delivery_method (required)
     * @param  string $enquiry_type (required)
     * @param  int $reference_id (required)
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender (required)
     * @param  string $subject (required)
     * @param  string $message (required)
     * @param  map[string,string] $meta_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesPostAsyncWithHttpInfo($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
    {
        $returnType = '\Swagger\Client\Model\DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse';
        $request = $this->enquiriesPostRequest($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enquiriesPost'
     *
     * @param  string $delivery_method (required)
     * @param  string $enquiry_type (required)
     * @param  int $reference_id (required)
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender (required)
     * @param  string $subject (required)
     * @param  string $message (required)
     * @param  map[string,string] $meta_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enquiriesPostRequest($delivery_method, $enquiry_type, $reference_id, $id, $sender, $subject, $message, $meta_data)
    {
        // verify the required parameter 'delivery_method' is set
        if ($delivery_method === null || (is_array($delivery_method) && count($delivery_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method when calling enquiriesPost'
            );
        }
        // verify the required parameter 'enquiry_type' is set
        if ($enquiry_type === null || (is_array($enquiry_type) && count($enquiry_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enquiry_type when calling enquiriesPost'
            );
        }
        // verify the required parameter 'reference_id' is set
        if ($reference_id === null || (is_array($reference_id) && count($reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_id when calling enquiriesPost'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling enquiriesPost'
            );
        }
        // verify the required parameter 'sender' is set
        if ($sender === null || (is_array($sender) && count($sender) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sender when calling enquiriesPost'
            );
        }
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling enquiriesPost'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling enquiriesPost'
            );
        }
        // verify the required parameter 'meta_data' is set
        if ($meta_data === null || (is_array($meta_data) && count($meta_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meta_data when calling enquiriesPost'
            );
        }

        $resourcePath = '/v1/enquiries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($delivery_method !== null) {
            $formParams['deliveryMethod'] = ObjectSerializer::toFormValue($delivery_method);
        }
        // form params
        if ($enquiry_type !== null) {
            $formParams['enquiryType'] = ObjectSerializer::toFormValue($enquiry_type);
        }
        // form params
        if ($reference_id !== null) {
            $formParams['referenceId'] = ObjectSerializer::toFormValue($reference_id);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($sender !== null) {
            $formParams['sender'] = ObjectSerializer::toFormValue($sender);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($meta_data !== null) {
            $formParams['metaData'] = ObjectSerializer::toFormValue($meta_data);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enquiriesSearch
     *
     * Searches enquiries based on agents or agencies.
     *
     * @param  int $agency_id Agency identifier (optional)
     * @param  int $agent_id Agent identifier (optional)
     * @param  \DateTime $from Enquiries received from (optional)
     * @param  \DateTime $to Enquiries received up to (optional)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EnquiriesV1EnquiryReport[]
     */
    public function enquiriesSearch($agency_id = null, $agent_id = null, $from = null, $to = null, $page_number = '1')
    {
        list($response) = $this->enquiriesSearchWithHttpInfo($agency_id, $agent_id, $from, $to, $page_number);
        return $response;
    }

    /**
     * Operation enquiriesSearchWithHttpInfo
     *
     * Searches enquiries based on agents or agencies.
     *
     * @param  int $agency_id Agency identifier (optional)
     * @param  int $agent_id Agent identifier (optional)
     * @param  \DateTime $from Enquiries received from (optional)
     * @param  \DateTime $to Enquiries received up to (optional)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EnquiriesV1EnquiryReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function enquiriesSearchWithHttpInfo($agency_id = null, $agent_id = null, $from = null, $to = null, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]';
        $request = $this->enquiriesSearchRequest($agency_id, $agent_id, $from, $to, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enquiriesSearchAsync
     *
     * Searches enquiries based on agents or agencies.
     *
     * @param  int $agency_id Agency identifier (optional)
     * @param  int $agent_id Agent identifier (optional)
     * @param  \DateTime $from Enquiries received from (optional)
     * @param  \DateTime $to Enquiries received up to (optional)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesSearchAsync($agency_id = null, $agent_id = null, $from = null, $to = null, $page_number = '1')
    {
        return $this->enquiriesSearchAsyncWithHttpInfo($agency_id, $agent_id, $from, $to, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enquiriesSearchAsyncWithHttpInfo
     *
     * Searches enquiries based on agents or agencies.
     *
     * @param  int $agency_id Agency identifier (optional)
     * @param  int $agent_id Agent identifier (optional)
     * @param  \DateTime $from Enquiries received from (optional)
     * @param  \DateTime $to Enquiries received up to (optional)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enquiriesSearchAsyncWithHttpInfo($agency_id = null, $agent_id = null, $from = null, $to = null, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]';
        $request = $this->enquiriesSearchRequest($agency_id, $agent_id, $from, $to, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enquiriesSearch'
     *
     * @param  int $agency_id Agency identifier (optional)
     * @param  int $agent_id Agent identifier (optional)
     * @param  \DateTime $from Enquiries received from (optional)
     * @param  \DateTime $to Enquiries received up to (optional)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enquiriesSearchRequest($agency_id = null, $agent_id = null, $from = null, $to = null, $page_number = '1')
    {

        $resourcePath = '/v1/enquiries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($agency_id !== null) {
            $queryParams['agencyId'] = ObjectSerializer::toQueryValue($agency_id, 'int32');
        }
        // query params
        if ($agent_id !== null) {
            $queryParams['agentId'] = ObjectSerializer::toQueryValue($agent_id, 'int32');
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date-time');
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, 'date-time');
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
