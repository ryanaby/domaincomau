<?php
/**
 * PropertiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PropertiesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listingsBypropertyid
     *
     * Retrieve list of listings for the given property id
     *
     * @param  string $property_id property_id (required)
     * @param  \DateTime $updated_since updated_since (optional)
     * @param  \DateTime $listed_since listed_since (optional)
     * @param  string $sale_mode sale_mode (optional, default to both)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingsV2Listing[]
     */
    public function listingsBypropertyid($property_id, $updated_since = null, $listed_since = null, $sale_mode = 'both')
    {
        list($response) = $this->listingsBypropertyidWithHttpInfo($property_id, $updated_since, $listed_since, $sale_mode);
        return $response;
    }

    /**
     * Operation listingsBypropertyidWithHttpInfo
     *
     * Retrieve list of listings for the given property id
     *
     * @param  string $property_id (required)
     * @param  \DateTime $updated_since (optional)
     * @param  \DateTime $listed_since (optional)
     * @param  string $sale_mode (optional, default to both)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingsV2Listing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsBypropertyidWithHttpInfo($property_id, $updated_since = null, $listed_since = null, $sale_mode = 'both')
    {
        $returnType = '\Swagger\Client\Model\ListingsV2Listing[]';
        $request = $this->listingsBypropertyidRequest($property_id, $updated_since, $listed_since, $sale_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingsV2Listing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsBypropertyidAsync
     *
     * Retrieve list of listings for the given property id
     *
     * @param  string $property_id (required)
     * @param  \DateTime $updated_since (optional)
     * @param  \DateTime $listed_since (optional)
     * @param  string $sale_mode (optional, default to both)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsBypropertyidAsync($property_id, $updated_since = null, $listed_since = null, $sale_mode = 'both')
    {
        return $this->listingsBypropertyidAsyncWithHttpInfo($property_id, $updated_since, $listed_since, $sale_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsBypropertyidAsyncWithHttpInfo
     *
     * Retrieve list of listings for the given property id
     *
     * @param  string $property_id (required)
     * @param  \DateTime $updated_since (optional)
     * @param  \DateTime $listed_since (optional)
     * @param  string $sale_mode (optional, default to both)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsBypropertyidAsyncWithHttpInfo($property_id, $updated_since = null, $listed_since = null, $sale_mode = 'both')
    {
        $returnType = '\Swagger\Client\Model\ListingsV2Listing[]';
        $request = $this->listingsBypropertyidRequest($property_id, $updated_since, $listed_since, $sale_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsBypropertyid'
     *
     * @param  string $property_id (required)
     * @param  \DateTime $updated_since (optional)
     * @param  \DateTime $listed_since (optional)
     * @param  string $sale_mode (optional, default to both)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsBypropertyidRequest($property_id, $updated_since = null, $listed_since = null, $sale_mode = 'both')
    {
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling listingsBypropertyid'
            );
        }

        $resourcePath = '/v2/properties/{propertyId}/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($updated_since !== null) {
            $queryParams['updatedSince'] = ObjectSerializer::toQueryValue($updated_since, 'date-time');
        }
        // query params
        if ($listed_since !== null) {
            $queryParams['listedSince'] = ObjectSerializer::toQueryValue($listed_since, 'date-time');
        }
        // query params
        if ($sale_mode !== null) {
            $queryParams['saleMode'] = ObjectSerializer::toQueryValue($sale_mode, null);
        }

        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyId' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesGet
     *
     * Retrieves a specific property.
     *
     * @param  string $id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PropertiesV1Property
     */
    public function propertiesGet($id)
    {
        list($response) = $this->propertiesGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation propertiesGetWithHttpInfo
     *
     * Retrieves a specific property.
     *
     * @param  string $id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PropertiesV1Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\PropertiesV1Property';
        $request = $this->propertiesGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertiesV1Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesGetAsync
     *
     * Retrieves a specific property.
     *
     * @param  string $id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetAsync($id)
    {
        return $this->propertiesGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesGetAsyncWithHttpInfo
     *
     * Retrieves a specific property.
     *
     * @param  string $id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\PropertiesV1Property';
        $request = $this->propertiesGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesGet'
     *
     * @param  string $id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertiesGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling propertiesGet'
            );
        }

        $resourcePath = '/v1/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesGetPriceEstimate
     *
     * Price estimates based on propertyId
     *
     * @param  string $property_id property_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainAvmPIV1PropertyPriceEstimate
     */
    public function propertiesGetPriceEstimate($property_id)
    {
        list($response) = $this->propertiesGetPriceEstimateWithHttpInfo($property_id);
        return $response;
    }

    /**
     * Operation propertiesGetPriceEstimateWithHttpInfo
     *
     * Price estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainAvmPIV1PropertyPriceEstimate, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesGetPriceEstimateWithHttpInfo($property_id)
    {
        $returnType = '\Swagger\Client\Model\DomainAvmPIV1PropertyPriceEstimate';
        $request = $this->propertiesGetPriceEstimateRequest($property_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1PropertyPriceEstimate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesGetPriceEstimateAsync
     *
     * Price estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetPriceEstimateAsync($property_id)
    {
        return $this->propertiesGetPriceEstimateAsyncWithHttpInfo($property_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesGetPriceEstimateAsyncWithHttpInfo
     *
     * Price estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetPriceEstimateAsyncWithHttpInfo($property_id)
    {
        $returnType = '\Swagger\Client\Model\DomainAvmPIV1PropertyPriceEstimate';
        $request = $this->propertiesGetPriceEstimateRequest($property_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesGetPriceEstimate'
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertiesGetPriceEstimateRequest($property_id)
    {
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling propertiesGetPriceEstimate'
            );
        }

        $resourcePath = '/v1/properties/{propertyId}/priceEstimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyId' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesGetRentalEstimate
     *
     * Rental estimates based on propertyId
     *
     * @param  string $property_id property_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainAvmPIV1RentalEstimate
     */
    public function propertiesGetRentalEstimate($property_id)
    {
        list($response) = $this->propertiesGetRentalEstimateWithHttpInfo($property_id);
        return $response;
    }

    /**
     * Operation propertiesGetRentalEstimateWithHttpInfo
     *
     * Rental estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainAvmPIV1RentalEstimate, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesGetRentalEstimateWithHttpInfo($property_id)
    {
        $returnType = '\Swagger\Client\Model\DomainAvmPIV1RentalEstimate';
        $request = $this->propertiesGetRentalEstimateRequest($property_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1RentalEstimate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainAvmPIV1ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesGetRentalEstimateAsync
     *
     * Rental estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetRentalEstimateAsync($property_id)
    {
        return $this->propertiesGetRentalEstimateAsyncWithHttpInfo($property_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesGetRentalEstimateAsyncWithHttpInfo
     *
     * Rental estimates based on propertyId
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetRentalEstimateAsyncWithHttpInfo($property_id)
    {
        $returnType = '\Swagger\Client\Model\DomainAvmPIV1RentalEstimate';
        $request = $this->propertiesGetRentalEstimateRequest($property_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesGetRentalEstimate'
     *
     * @param  string $property_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertiesGetRentalEstimateRequest($property_id)
    {
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling propertiesGetRentalEstimate'
            );
        }

        $resourcePath = '/v1/properties/{propertyId}/rentalEstimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyId' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesSuggest
     *
     * Search for suggested addresses for the given terms
     *
     * @param  string $terms The address to search (required)
     * @param  int $page_size Number of suggestions (maximum 20) (optional, default to 20)
     * @param  string $channel Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60; (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LocationTypeaheadV1PropertySuggestion[]
     */
    public function propertiesSuggest($terms, $page_size = '20', $channel = '0')
    {
        list($response) = $this->propertiesSuggestWithHttpInfo($terms, $page_size, $channel);
        return $response;
    }

    /**
     * Operation propertiesSuggestWithHttpInfo
     *
     * Search for suggested addresses for the given terms
     *
     * @param  string $terms The address to search (required)
     * @param  int $page_size Number of suggestions (maximum 20) (optional, default to 20)
     * @param  string $channel Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60; (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LocationTypeaheadV1PropertySuggestion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesSuggestWithHttpInfo($terms, $page_size = '20', $channel = '0')
    {
        $returnType = '\Swagger\Client\Model\LocationTypeaheadV1PropertySuggestion[]';
        $request = $this->propertiesSuggestRequest($terms, $page_size, $channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LocationTypeaheadV1PropertySuggestion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesSuggestAsync
     *
     * Search for suggested addresses for the given terms
     *
     * @param  string $terms The address to search (required)
     * @param  int $page_size Number of suggestions (maximum 20) (optional, default to 20)
     * @param  string $channel Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60; (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesSuggestAsync($terms, $page_size = '20', $channel = '0')
    {
        return $this->propertiesSuggestAsyncWithHttpInfo($terms, $page_size, $channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesSuggestAsyncWithHttpInfo
     *
     * Search for suggested addresses for the given terms
     *
     * @param  string $terms The address to search (required)
     * @param  int $page_size Number of suggestions (maximum 20) (optional, default to 20)
     * @param  string $channel Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60; (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesSuggestAsyncWithHttpInfo($terms, $page_size = '20', $channel = '0')
    {
        $returnType = '\Swagger\Client\Model\LocationTypeaheadV1PropertySuggestion[]';
        $request = $this->propertiesSuggestRequest($terms, $page_size, $channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesSuggest'
     *
     * @param  string $terms The address to search (required)
     * @param  int $page_size Number of suggestions (maximum 20) (optional, default to 20)
     * @param  string $channel Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60; (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertiesSuggestRequest($terms, $page_size = '20', $channel = '0')
    {
        // verify the required parameter 'terms' is set
        if ($terms === null || (is_array($terms) && count($terms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms when calling propertiesSuggest'
            );
        }

        $resourcePath = '/v1/properties/_suggest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($terms !== null) {
            $queryParams['terms'] = ObjectSerializer::toQueryValue($terms, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertyReportsGet
     *
     * Retrieves a property report based on query parameters
     *
     * @param  string $property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60; (required)
     * @param  string $street_number Street number (required)
     * @param  string $street_name Street name (required)
     * @param  string $suburb Suburb e.g. &#x60;Pyrmont&#x60; (required)
     * @param  string $state State e.g. &#x60;NSW&#x60; (required)
     * @param  string $unit_number Unit number (optional)
     * @param  string $street_type Street type e.g. &#x60;Pl&#x60; (optional)
     * @param  string $postcode Postcode e.g. &#x60;2009&#x60; (optional)
     * @param  int $area_size Area size (optional)
     * @param  int $bedrooms Number of bedrooms (optional)
     * @param  int $bathrooms Number of bathrooms (optional)
     * @param  int $parking Number of parking spots (optional)
     * @param  string $prepared_for \&quot;Prepared for\&quot; information (optional)
     * @param  string $product_code Report product code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
     */
    public function propertyReportsGet($property_type, $street_number, $street_name, $suburb, $state, $unit_number = null, $street_type = null, $postcode = null, $area_size = null, $bedrooms = null, $bathrooms = null, $parking = null, $prepared_for = null, $product_code = null)
    {
        list($response) = $this->propertyReportsGetWithHttpInfo($property_type, $street_number, $street_name, $suburb, $state, $unit_number, $street_type, $postcode, $area_size, $bedrooms, $bathrooms, $parking, $prepared_for, $product_code);
        return $response;
    }

    /**
     * Operation propertyReportsGetWithHttpInfo
     *
     * Retrieves a property report based on query parameters
     *
     * @param  string $property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60; (required)
     * @param  string $street_number Street number (required)
     * @param  string $street_name Street name (required)
     * @param  string $suburb Suburb e.g. &#x60;Pyrmont&#x60; (required)
     * @param  string $state State e.g. &#x60;NSW&#x60; (required)
     * @param  string $unit_number Unit number (optional)
     * @param  string $street_type Street type e.g. &#x60;Pl&#x60; (optional)
     * @param  string $postcode Postcode e.g. &#x60;2009&#x60; (optional)
     * @param  int $area_size Area size (optional)
     * @param  int $bedrooms Number of bedrooms (optional)
     * @param  int $bathrooms Number of bathrooms (optional)
     * @param  int $parking Number of parking spots (optional)
     * @param  string $prepared_for \&quot;Prepared for\&quot; information (optional)
     * @param  string $product_code Report product code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPropertyReportServiceV1ModelPropertyReportGenerationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertyReportsGetWithHttpInfo($property_type, $street_number, $street_name, $suburb, $state, $unit_number = null, $street_type = null, $postcode = null, $area_size = null, $bedrooms = null, $bathrooms = null, $parking = null, $prepared_for = null, $product_code = null)
    {
        $returnType = '\Swagger\Client\Model\DomainPropertyReportServiceV1ModelPropertyReportGenerationResult';
        $request = $this->propertyReportsGetRequest($property_type, $street_number, $street_name, $suburb, $state, $unit_number, $street_type, $postcode, $area_size, $bedrooms, $bathrooms, $parking, $prepared_for, $product_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPropertyReportServiceV1ModelPropertyReportGenerationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertyReportsGetAsync
     *
     * Retrieves a property report based on query parameters
     *
     * @param  string $property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60; (required)
     * @param  string $street_number Street number (required)
     * @param  string $street_name Street name (required)
     * @param  string $suburb Suburb e.g. &#x60;Pyrmont&#x60; (required)
     * @param  string $state State e.g. &#x60;NSW&#x60; (required)
     * @param  string $unit_number Unit number (optional)
     * @param  string $street_type Street type e.g. &#x60;Pl&#x60; (optional)
     * @param  string $postcode Postcode e.g. &#x60;2009&#x60; (optional)
     * @param  int $area_size Area size (optional)
     * @param  int $bedrooms Number of bedrooms (optional)
     * @param  int $bathrooms Number of bathrooms (optional)
     * @param  int $parking Number of parking spots (optional)
     * @param  string $prepared_for \&quot;Prepared for\&quot; information (optional)
     * @param  string $product_code Report product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertyReportsGetAsync($property_type, $street_number, $street_name, $suburb, $state, $unit_number = null, $street_type = null, $postcode = null, $area_size = null, $bedrooms = null, $bathrooms = null, $parking = null, $prepared_for = null, $product_code = null)
    {
        return $this->propertyReportsGetAsyncWithHttpInfo($property_type, $street_number, $street_name, $suburb, $state, $unit_number, $street_type, $postcode, $area_size, $bedrooms, $bathrooms, $parking, $prepared_for, $product_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertyReportsGetAsyncWithHttpInfo
     *
     * Retrieves a property report based on query parameters
     *
     * @param  string $property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60; (required)
     * @param  string $street_number Street number (required)
     * @param  string $street_name Street name (required)
     * @param  string $suburb Suburb e.g. &#x60;Pyrmont&#x60; (required)
     * @param  string $state State e.g. &#x60;NSW&#x60; (required)
     * @param  string $unit_number Unit number (optional)
     * @param  string $street_type Street type e.g. &#x60;Pl&#x60; (optional)
     * @param  string $postcode Postcode e.g. &#x60;2009&#x60; (optional)
     * @param  int $area_size Area size (optional)
     * @param  int $bedrooms Number of bedrooms (optional)
     * @param  int $bathrooms Number of bathrooms (optional)
     * @param  int $parking Number of parking spots (optional)
     * @param  string $prepared_for \&quot;Prepared for\&quot; information (optional)
     * @param  string $product_code Report product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertyReportsGetAsyncWithHttpInfo($property_type, $street_number, $street_name, $suburb, $state, $unit_number = null, $street_type = null, $postcode = null, $area_size = null, $bedrooms = null, $bathrooms = null, $parking = null, $prepared_for = null, $product_code = null)
    {
        $returnType = '\Swagger\Client\Model\DomainPropertyReportServiceV1ModelPropertyReportGenerationResult';
        $request = $this->propertyReportsGetRequest($property_type, $street_number, $street_name, $suburb, $state, $unit_number, $street_type, $postcode, $area_size, $bedrooms, $bathrooms, $parking, $prepared_for, $product_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertyReportsGet'
     *
     * @param  string $property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60; (required)
     * @param  string $street_number Street number (required)
     * @param  string $street_name Street name (required)
     * @param  string $suburb Suburb e.g. &#x60;Pyrmont&#x60; (required)
     * @param  string $state State e.g. &#x60;NSW&#x60; (required)
     * @param  string $unit_number Unit number (optional)
     * @param  string $street_type Street type e.g. &#x60;Pl&#x60; (optional)
     * @param  string $postcode Postcode e.g. &#x60;2009&#x60; (optional)
     * @param  int $area_size Area size (optional)
     * @param  int $bedrooms Number of bedrooms (optional)
     * @param  int $bathrooms Number of bathrooms (optional)
     * @param  int $parking Number of parking spots (optional)
     * @param  string $prepared_for \&quot;Prepared for\&quot; information (optional)
     * @param  string $product_code Report product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertyReportsGetRequest($property_type, $street_number, $street_name, $suburb, $state, $unit_number = null, $street_type = null, $postcode = null, $area_size = null, $bedrooms = null, $bathrooms = null, $parking = null, $prepared_for = null, $product_code = null)
    {
        // verify the required parameter 'property_type' is set
        if ($property_type === null || (is_array($property_type) && count($property_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_type when calling propertyReportsGet'
            );
        }
        // verify the required parameter 'street_number' is set
        if ($street_number === null || (is_array($street_number) && count($street_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_number when calling propertyReportsGet'
            );
        }
        // verify the required parameter 'street_name' is set
        if ($street_name === null || (is_array($street_name) && count($street_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_name when calling propertyReportsGet'
            );
        }
        // verify the required parameter 'suburb' is set
        if ($suburb === null || (is_array($suburb) && count($suburb) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suburb when calling propertyReportsGet'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling propertyReportsGet'
            );
        }

        $resourcePath = '/v1/propertyReports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_type !== null) {
            $queryParams['propertyType'] = ObjectSerializer::toQueryValue($property_type, null);
        }
        // query params
        if ($street_number !== null) {
            $queryParams['streetNumber'] = ObjectSerializer::toQueryValue($street_number, null);
        }
        // query params
        if ($street_name !== null) {
            $queryParams['streetName'] = ObjectSerializer::toQueryValue($street_name, null);
        }
        // query params
        if ($suburb !== null) {
            $queryParams['suburb'] = ObjectSerializer::toQueryValue($suburb, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($unit_number !== null) {
            $queryParams['unitNumber'] = ObjectSerializer::toQueryValue($unit_number, null);
        }
        // query params
        if ($street_type !== null) {
            $queryParams['streetType'] = ObjectSerializer::toQueryValue($street_type, null);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = ObjectSerializer::toQueryValue($postcode, null);
        }
        // query params
        if ($area_size !== null) {
            $queryParams['areaSize'] = ObjectSerializer::toQueryValue($area_size, 'int32');
        }
        // query params
        if ($bedrooms !== null) {
            $queryParams['bedrooms'] = ObjectSerializer::toQueryValue($bedrooms, 'int32');
        }
        // query params
        if ($bathrooms !== null) {
            $queryParams['bathrooms'] = ObjectSerializer::toQueryValue($bathrooms, 'int32');
        }
        // query params
        if ($parking !== null) {
            $queryParams['parking'] = ObjectSerializer::toQueryValue($parking, 'int32');
        }
        // query params
        if ($prepared_for !== null) {
            $queryParams['preparedFor'] = ObjectSerializer::toQueryValue($prepared_for, null);
        }
        // query params
        if ($product_code !== null) {
            $queryParams['productCode'] = ObjectSerializer::toQueryValue($product_code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertyenrichmentGet
     *
     * API that supplies property level data and activities across two packages for a specific property
     *
     * @param  string $property_id property_id (optional)
     * @param  string $gnaf_id gnaf_id (optional)
     * @param  string $flat_number flat_number (optional)
     * @param  string $street_number street_number (optional)
     * @param  string $street_name street_name (optional)
     * @param  string $street_type street_type (optional)
     * @param  string $postcode postcode (optional)
     * @param  string $suburb_name suburb_name (optional)
     * @param  string $state state (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PropertyEnrichmentV1PropertyResults
     */
    public function propertyenrichmentGet($property_id = null, $gnaf_id = null, $flat_number = null, $street_number = null, $street_name = null, $street_type = null, $postcode = null, $suburb_name = null, $state = null)
    {
        list($response) = $this->propertyenrichmentGetWithHttpInfo($property_id, $gnaf_id, $flat_number, $street_number, $street_name, $street_type, $postcode, $suburb_name, $state);
        return $response;
    }

    /**
     * Operation propertyenrichmentGetWithHttpInfo
     *
     * API that supplies property level data and activities across two packages for a specific property
     *
     * @param  string $property_id (optional)
     * @param  string $gnaf_id (optional)
     * @param  string $flat_number (optional)
     * @param  string $street_number (optional)
     * @param  string $street_name (optional)
     * @param  string $street_type (optional)
     * @param  string $postcode (optional)
     * @param  string $suburb_name (optional)
     * @param  string $state (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PropertyEnrichmentV1PropertyResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertyenrichmentGetWithHttpInfo($property_id = null, $gnaf_id = null, $flat_number = null, $street_number = null, $street_name = null, $street_type = null, $postcode = null, $suburb_name = null, $state = null)
    {
        $returnType = '\Swagger\Client\Model\PropertyEnrichmentV1PropertyResults';
        $request = $this->propertyenrichmentGetRequest($property_id, $gnaf_id, $flat_number, $street_number, $street_name, $street_type, $postcode, $suburb_name, $state);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertyEnrichmentV1PropertyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 300:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertyEnrichmentV1MultiplePropertyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertyenrichmentGetAsync
     *
     * API that supplies property level data and activities across two packages for a specific property
     *
     * @param  string $property_id (optional)
     * @param  string $gnaf_id (optional)
     * @param  string $flat_number (optional)
     * @param  string $street_number (optional)
     * @param  string $street_name (optional)
     * @param  string $street_type (optional)
     * @param  string $postcode (optional)
     * @param  string $suburb_name (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertyenrichmentGetAsync($property_id = null, $gnaf_id = null, $flat_number = null, $street_number = null, $street_name = null, $street_type = null, $postcode = null, $suburb_name = null, $state = null)
    {
        return $this->propertyenrichmentGetAsyncWithHttpInfo($property_id, $gnaf_id, $flat_number, $street_number, $street_name, $street_type, $postcode, $suburb_name, $state)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertyenrichmentGetAsyncWithHttpInfo
     *
     * API that supplies property level data and activities across two packages for a specific property
     *
     * @param  string $property_id (optional)
     * @param  string $gnaf_id (optional)
     * @param  string $flat_number (optional)
     * @param  string $street_number (optional)
     * @param  string $street_name (optional)
     * @param  string $street_type (optional)
     * @param  string $postcode (optional)
     * @param  string $suburb_name (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertyenrichmentGetAsyncWithHttpInfo($property_id = null, $gnaf_id = null, $flat_number = null, $street_number = null, $street_name = null, $street_type = null, $postcode = null, $suburb_name = null, $state = null)
    {
        $returnType = '\Swagger\Client\Model\PropertyEnrichmentV1PropertyResults';
        $request = $this->propertyenrichmentGetRequest($property_id, $gnaf_id, $flat_number, $street_number, $street_name, $street_type, $postcode, $suburb_name, $state);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertyenrichmentGet'
     *
     * @param  string $property_id (optional)
     * @param  string $gnaf_id (optional)
     * @param  string $flat_number (optional)
     * @param  string $street_number (optional)
     * @param  string $street_name (optional)
     * @param  string $street_type (optional)
     * @param  string $postcode (optional)
     * @param  string $suburb_name (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertyenrichmentGetRequest($property_id = null, $gnaf_id = null, $flat_number = null, $street_number = null, $street_name = null, $street_type = null, $postcode = null, $suburb_name = null, $state = null)
    {

        $resourcePath = '/v1/propertyenrichment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_id !== null) {
            $queryParams['propertyId'] = ObjectSerializer::toQueryValue($property_id, null);
        }
        // query params
        if ($gnaf_id !== null) {
            $queryParams['gnafId'] = ObjectSerializer::toQueryValue($gnaf_id, null);
        }
        // query params
        if ($flat_number !== null) {
            $queryParams['flatNumber'] = ObjectSerializer::toQueryValue($flat_number, null);
        }
        // query params
        if ($street_number !== null) {
            $queryParams['streetNumber'] = ObjectSerializer::toQueryValue($street_number, null);
        }
        // query params
        if ($street_name !== null) {
            $queryParams['streetName'] = ObjectSerializer::toQueryValue($street_name, null);
        }
        // query params
        if ($street_type !== null) {
            $queryParams['streetType'] = ObjectSerializer::toQueryValue($street_type, null);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = ObjectSerializer::toQueryValue($postcode, null);
        }
        // query params
        if ($suburb_name !== null) {
            $queryParams['suburbName'] = ObjectSerializer::toQueryValue($suburb_name, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
