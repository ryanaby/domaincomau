<?php
/**
 * ListingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ListingsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listingLocationsSearch
     *
     * Suggests listing locations
     *
     * @param  string $terms Suburb / area / region prefix, or postcode (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsListingLocation[]
     */
    public function listingLocationsSearch($terms = null)
    {
        list($response) = $this->listingLocationsSearchWithHttpInfo($terms);
        return $response;
    }

    /**
     * Operation listingLocationsSearchWithHttpInfo
     *
     * Suggests listing locations
     *
     * @param  string $terms Suburb / area / region prefix, or postcode (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsListingLocation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingLocationsSearchWithHttpInfo($terms = null)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsListingLocation[]';
        $request = $this->listingLocationsSearchRequest($terms);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsListingLocation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingLocationsSearchAsync
     *
     * Suggests listing locations
     *
     * @param  string $terms Suburb / area / region prefix, or postcode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingLocationsSearchAsync($terms = null)
    {
        return $this->listingLocationsSearchAsyncWithHttpInfo($terms)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingLocationsSearchAsyncWithHttpInfo
     *
     * Suggests listing locations
     *
     * @param  string $terms Suburb / area / region prefix, or postcode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingLocationsSearchAsyncWithHttpInfo($terms = null)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsListingLocation[]';
        $request = $this->listingLocationsSearchRequest($terms);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingLocationsSearch'
     *
     * @param  string $terms Suburb / area / region prefix, or postcode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingLocationsSearchRequest($terms = null)
    {

        $resourcePath = '/v1/listings/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($terms !== null) {
            $queryParams['terms'] = ObjectSerializer::toQueryValue($terms, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedBusinessSearch
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]
     */
    public function listingsDetailedBusinessSearch($body)
    {
        list($response) = $this->listingsDetailedBusinessSearchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsDetailedBusinessSearchWithHttpInfo
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedBusinessSearchWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]';
        $request = $this->listingsDetailedBusinessSearchRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedBusinessSearchAsync
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedBusinessSearchAsync($body)
    {
        return $this->listingsDetailedBusinessSearchAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedBusinessSearchAsyncWithHttpInfo
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedBusinessSearchAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]';
        $request = $this->listingsDetailedBusinessSearchRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedBusinessSearch'
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedBusinessSearchRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsDetailedBusinessSearch'
            );
        }

        $resourcePath = '/v1/listings/business/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // form params
        if ($advertiser_id !== null) {
            $formParams['advertiserId'] = ObjectSerializer::toFormValue($advertiser_id);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($brand_id !== null) {
            $formParams['brandId'] = ObjectSerializer::toFormValue($brand_id);
        }
        // form params
        if ($franchise_group_id !== null) {
            $formParams['franchiseGroupId'] = ObjectSerializer::toFormValue($franchise_group_id);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($search_mode !== null) {
            $formParams['searchMode'] = ObjectSerializer::toFormValue($search_mode);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedBusinessSearch
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  int $page_number page_number (required)
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string[] $property_types property_types (required)
     * @param  string[] $keywords keywords (required)
     * @param  int $brand_id brand_id (required)
     * @param  int $franchise_group_id franchise_group_id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch[] $locations locations (required)
     * @param  int $page_size page_size (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch $price price (required)
     * @param  string $sort sort (required)
     * @param  string $search_mode search_mode (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]
     */
    public function listingsDetailedBusinessSearch($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
    {
        list($response) = $this->listingsDetailedBusinessSearchWithHttpInfo($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode);
        return $response;
    }

    /**
     * Operation listingsDetailedBusinessSearchWithHttpInfo
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  string[] $property_types (required)
     * @param  string[] $keywords (required)
     * @param  int $brand_id (required)
     * @param  int $franchise_group_id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch[] $locations (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch $price (required)
     * @param  string $sort (required)
     * @param  string $search_mode (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedBusinessSearchWithHttpInfo($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]';
        $request = $this->listingsDetailedBusinessSearchRequest($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedBusinessSearchAsync
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  string[] $property_types (required)
     * @param  string[] $keywords (required)
     * @param  int $brand_id (required)
     * @param  int $franchise_group_id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch[] $locations (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch $price (required)
     * @param  string $sort (required)
     * @param  string $search_mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedBusinessSearchAsync($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
    {
        return $this->listingsDetailedBusinessSearchAsyncWithHttpInfo($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedBusinessSearchAsyncWithHttpInfo
     *
     * Retrieves business listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  string[] $property_types (required)
     * @param  string[] $keywords (required)
     * @param  int $brand_id (required)
     * @param  int $franchise_group_id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch[] $locations (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch $price (required)
     * @param  string $sort (required)
     * @param  string $search_mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedBusinessSearchAsyncWithHttpInfo($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessListing[]';
        $request = $this->listingsDetailedBusinessSearchRequest($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedBusinessSearch'
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  string[] $property_types (required)
     * @param  string[] $keywords (required)
     * @param  int $brand_id (required)
     * @param  int $franchise_group_id (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch[] $locations (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch $price (required)
     * @param  string $sort (required)
     * @param  string $search_mode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedBusinessSearchRequest($page_number, $advertiser_id, $property_types, $keywords, $brand_id, $franchise_group_id, $locations, $page_size, $price, $sort, $search_mode)
    {
        // verify the required parameter 'page_number' is set
        if ($page_number === null || (is_array($page_number) && count($page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_number when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'property_types' is set
        if ($property_types === null || (is_array($property_types) && count($property_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_types when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'keywords' is set
        if ($keywords === null || (is_array($keywords) && count($keywords) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywords when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'franchise_group_id' is set
        if ($franchise_group_id === null || (is_array($franchise_group_id) && count($franchise_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $franchise_group_id when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'locations' is set
        if ($locations === null || (is_array($locations) && count($locations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locations when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling listingsDetailedBusinessSearch'
            );
        }
        // verify the required parameter 'search_mode' is set
        if ($search_mode === null || (is_array($search_mode) && count($search_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_mode when calling listingsDetailedBusinessSearch'
            );
        }

        $resourcePath = '/v1/listings/business/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // form params
        if ($advertiser_id !== null) {
            $formParams['advertiserId'] = ObjectSerializer::toFormValue($advertiser_id);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($brand_id !== null) {
            $formParams['brandId'] = ObjectSerializer::toFormValue($brand_id);
        }
        // form params
        if ($franchise_group_id !== null) {
            $formParams['franchiseGroupId'] = ObjectSerializer::toFormValue($franchise_group_id);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($search_mode !== null) {
            $formParams['searchMode'] = ObjectSerializer::toFormValue($search_mode);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedCommercialSearch
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]
     */
    public function listingsDetailedCommercialSearch($body)
    {
        list($response) = $this->listingsDetailedCommercialSearchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsDetailedCommercialSearchWithHttpInfo
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedCommercialSearchWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]';
        $request = $this->listingsDetailedCommercialSearchRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedCommercialSearchAsync
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedCommercialSearchAsync($body)
    {
        return $this->listingsDetailedCommercialSearchAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedCommercialSearchAsyncWithHttpInfo
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedCommercialSearchAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]';
        $request = $this->listingsDetailedCommercialSearchRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedCommercialSearch'
     *
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedCommercialSearchRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsDetailedCommercialSearch'
            );
        }

        $resourcePath = '/v1/listings/commercial/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // form params
        if ($advertiser_id !== null) {
            $formParams['advertiserId'] = ObjectSerializer::toFormValue($advertiser_id);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($geo_window !== null) {
            $formParams['geoWindow'] = ObjectSerializer::toFormValue($geo_window);
        }
        // form params
        if ($land_area_min !== null) {
            $formParams['landAreaMin'] = ObjectSerializer::toFormValue($land_area_min);
        }
        // form params
        if ($land_area_max !== null) {
            $formParams['landAreaMax'] = ObjectSerializer::toFormValue($land_area_max);
        }
        // form params
        if ($building_size_min !== null) {
            $formParams['buildingSizeMin'] = ObjectSerializer::toFormValue($building_size_min);
        }
        // form params
        if ($building_size_max !== null) {
            $formParams['buildingSizeMax'] = ObjectSerializer::toFormValue($building_size_max);
        }
        // form params
        if ($search_mode !== null) {
            $formParams['searchMode'] = ObjectSerializer::toFormValue($search_mode);
        }
        // form params
        if ($occupancy !== null) {
            $formParams['occupancy'] = ObjectSerializer::toFormValue($occupancy);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($sale_type !== null) {
            $formParams['saleType'] = ObjectSerializer::toFormValue($sale_type);
        }
        // form params
        if ($property_title !== null) {
            $formParams['propertyTitle'] = ObjectSerializer::toFormValue($property_title);
        }
        // form params
        if ($parking !== null) {
            $formParams['parking'] = ObjectSerializer::toFormValue($parking);
        }
        // form params
        if ($exclusion_types !== null) {
            $formParams['exclusionTypes'] = ObjectSerializer::toFormValue($exclusion_types);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedCommercialSearch
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  int $page_number page_number (required)
     * @param  int $advertiser_id advertiser_id (required)
     * @param  int $page_size page_size (required)
     * @param  string[] $property_types property_types (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price price (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations locations (required)
     * @param  string[] $keywords keywords (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window geo_window (required)
     * @param  int $land_area_min land_area_min (required)
     * @param  int $land_area_max land_area_max (required)
     * @param  int $building_size_min building_size_min (required)
     * @param  int $building_size_max building_size_max (required)
     * @param  string $search_mode search_mode (required)
     * @param  string $occupancy occupancy (required)
     * @param  string $sort sort (required)
     * @param  string $sale_type sale_type (required)
     * @param  string $property_title property_title (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking parking (required)
     * @param  string[] $exclusion_types exclusion_types (required)
     * @param  int $annual_return annual_return (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]
     */
    public function listingsDetailedCommercialSearch($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
    {
        list($response) = $this->listingsDetailedCommercialSearchWithHttpInfo($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return);
        return $response;
    }

    /**
     * Operation listingsDetailedCommercialSearchWithHttpInfo
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  int $page_size (required)
     * @param  string[] $property_types (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations (required)
     * @param  string[] $keywords (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window (required)
     * @param  int $land_area_min (required)
     * @param  int $land_area_max (required)
     * @param  int $building_size_min (required)
     * @param  int $building_size_max (required)
     * @param  string $search_mode (required)
     * @param  string $occupancy (required)
     * @param  string $sort (required)
     * @param  string $sale_type (required)
     * @param  string $property_title (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking (required)
     * @param  string[] $exclusion_types (required)
     * @param  int $annual_return (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedCommercialSearchWithHttpInfo($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]';
        $request = $this->listingsDetailedCommercialSearchRequest($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedCommercialSearchAsync
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  int $page_size (required)
     * @param  string[] $property_types (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations (required)
     * @param  string[] $keywords (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window (required)
     * @param  int $land_area_min (required)
     * @param  int $land_area_max (required)
     * @param  int $building_size_min (required)
     * @param  int $building_size_max (required)
     * @param  string $search_mode (required)
     * @param  string $occupancy (required)
     * @param  string $sort (required)
     * @param  string $sale_type (required)
     * @param  string $property_title (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking (required)
     * @param  string[] $exclusion_types (required)
     * @param  int $annual_return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedCommercialSearchAsync($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
    {
        return $this->listingsDetailedCommercialSearchAsyncWithHttpInfo($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedCommercialSearchAsyncWithHttpInfo
     *
     * Retrieves commercial listings matching the specified criteria.
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  int $page_size (required)
     * @param  string[] $property_types (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations (required)
     * @param  string[] $keywords (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window (required)
     * @param  int $land_area_min (required)
     * @param  int $land_area_max (required)
     * @param  int $building_size_min (required)
     * @param  int $building_size_max (required)
     * @param  string $search_mode (required)
     * @param  string $occupancy (required)
     * @param  string $sort (required)
     * @param  string $sale_type (required)
     * @param  string $property_title (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking (required)
     * @param  string[] $exclusion_types (required)
     * @param  int $annual_return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedCommercialSearchAsyncWithHttpInfo($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
    {
        $returnType = '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialListing[]';
        $request = $this->listingsDetailedCommercialSearchRequest($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedCommercialSearch'
     *
     * @param  int $page_number (required)
     * @param  int $advertiser_id (required)
     * @param  int $page_size (required)
     * @param  string[] $property_types (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations (required)
     * @param  string[] $keywords (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window (required)
     * @param  int $land_area_min (required)
     * @param  int $land_area_max (required)
     * @param  int $building_size_min (required)
     * @param  int $building_size_max (required)
     * @param  string $search_mode (required)
     * @param  string $occupancy (required)
     * @param  string $sort (required)
     * @param  string $sale_type (required)
     * @param  string $property_title (required)
     * @param  \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking (required)
     * @param  string[] $exclusion_types (required)
     * @param  int $annual_return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedCommercialSearchRequest($page_number, $advertiser_id, $page_size, $property_types, $price, $locations, $keywords, $geo_window, $land_area_min, $land_area_max, $building_size_min, $building_size_max, $search_mode, $occupancy, $sort, $sale_type, $property_title, $parking, $exclusion_types, $annual_return)
    {
        // verify the required parameter 'page_number' is set
        if ($page_number === null || (is_array($page_number) && count($page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_number when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'property_types' is set
        if ($property_types === null || (is_array($property_types) && count($property_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_types when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'locations' is set
        if ($locations === null || (is_array($locations) && count($locations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locations when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'keywords' is set
        if ($keywords === null || (is_array($keywords) && count($keywords) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywords when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'geo_window' is set
        if ($geo_window === null || (is_array($geo_window) && count($geo_window) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geo_window when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'land_area_min' is set
        if ($land_area_min === null || (is_array($land_area_min) && count($land_area_min) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $land_area_min when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'land_area_max' is set
        if ($land_area_max === null || (is_array($land_area_max) && count($land_area_max) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $land_area_max when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'building_size_min' is set
        if ($building_size_min === null || (is_array($building_size_min) && count($building_size_min) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_size_min when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'building_size_max' is set
        if ($building_size_max === null || (is_array($building_size_max) && count($building_size_max) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_size_max when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'search_mode' is set
        if ($search_mode === null || (is_array($search_mode) && count($search_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_mode when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'occupancy' is set
        if ($occupancy === null || (is_array($occupancy) && count($occupancy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $occupancy when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'sale_type' is set
        if ($sale_type === null || (is_array($sale_type) && count($sale_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_type when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'property_title' is set
        if ($property_title === null || (is_array($property_title) && count($property_title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_title when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'parking' is set
        if ($parking === null || (is_array($parking) && count($parking) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parking when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'exclusion_types' is set
        if ($exclusion_types === null || (is_array($exclusion_types) && count($exclusion_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusion_types when calling listingsDetailedCommercialSearch'
            );
        }
        // verify the required parameter 'annual_return' is set
        if ($annual_return === null || (is_array($annual_return) && count($annual_return) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annual_return when calling listingsDetailedCommercialSearch'
            );
        }

        $resourcePath = '/v1/listings/commercial/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // form params
        if ($advertiser_id !== null) {
            $formParams['advertiserId'] = ObjectSerializer::toFormValue($advertiser_id);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($geo_window !== null) {
            $formParams['geoWindow'] = ObjectSerializer::toFormValue($geo_window);
        }
        // form params
        if ($land_area_min !== null) {
            $formParams['landAreaMin'] = ObjectSerializer::toFormValue($land_area_min);
        }
        // form params
        if ($land_area_max !== null) {
            $formParams['landAreaMax'] = ObjectSerializer::toFormValue($land_area_max);
        }
        // form params
        if ($building_size_min !== null) {
            $formParams['buildingSizeMin'] = ObjectSerializer::toFormValue($building_size_min);
        }
        // form params
        if ($building_size_max !== null) {
            $formParams['buildingSizeMax'] = ObjectSerializer::toFormValue($building_size_max);
        }
        // form params
        if ($search_mode !== null) {
            $formParams['searchMode'] = ObjectSerializer::toFormValue($search_mode);
        }
        // form params
        if ($occupancy !== null) {
            $formParams['occupancy'] = ObjectSerializer::toFormValue($occupancy);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($sale_type !== null) {
            $formParams['saleType'] = ObjectSerializer::toFormValue($sale_type);
        }
        // form params
        if ($property_title !== null) {
            $formParams['propertyTitle'] = ObjectSerializer::toFormValue($property_title);
        }
        // form params
        if ($parking !== null) {
            $formParams['parking'] = ObjectSerializer::toFormValue($parking);
        }
        // form params
        if ($exclusion_types !== null) {
            $formParams['exclusionTypes'] = ObjectSerializer::toFormValue($exclusion_types);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedResidentialSearch
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]
     */
    public function listingsDetailedResidentialSearch($body)
    {
        list($response) = $this->listingsDetailedResidentialSearchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsDetailedResidentialSearchWithHttpInfo
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters $body Search parameters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedResidentialSearchWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]';
        $request = $this->listingsDetailedResidentialSearchRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedResidentialSearchAsync
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedResidentialSearchAsync($body)
    {
        return $this->listingsDetailedResidentialSearchAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedResidentialSearchAsyncWithHttpInfo
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedResidentialSearchAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]';
        $request = $this->listingsDetailedResidentialSearchRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedResidentialSearch'
     *
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters $body Search parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedResidentialSearchRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsDetailedResidentialSearch'
            );
        }

        $resourcePath = '/v1/listings/residential/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_type !== null) {
            $formParams['listingType'] = ObjectSerializer::toFormValue($listing_type);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($property_features !== null) {
            $formParams['propertyFeatures'] = ObjectSerializer::toFormValue($property_features);
        }
        // form params
        if ($listing_attributes !== null) {
            $formParams['listingAttributes'] = ObjectSerializer::toFormValue($listing_attributes);
        }
        // form params
        if ($property_established_type !== null) {
            $formParams['propertyEstablishedType'] = ObjectSerializer::toFormValue($property_established_type);
        }
        // form params
        if ($min_bedrooms !== null) {
            $formParams['minBedrooms'] = ObjectSerializer::toFormValue($min_bedrooms);
        }
        // form params
        if ($max_bedrooms !== null) {
            $formParams['maxBedrooms'] = ObjectSerializer::toFormValue($max_bedrooms);
        }
        // form params
        if ($min_bathrooms !== null) {
            $formParams['minBathrooms'] = ObjectSerializer::toFormValue($min_bathrooms);
        }
        // form params
        if ($max_bathrooms !== null) {
            $formParams['maxBathrooms'] = ObjectSerializer::toFormValue($max_bathrooms);
        }
        // form params
        if ($min_carspaces !== null) {
            $formParams['minCarspaces'] = ObjectSerializer::toFormValue($min_carspaces);
        }
        // form params
        if ($max_carspaces !== null) {
            $formParams['maxCarspaces'] = ObjectSerializer::toFormValue($max_carspaces);
        }
        // form params
        if ($min_price !== null) {
            $formParams['minPrice'] = ObjectSerializer::toFormValue($min_price);
        }
        // form params
        if ($max_price !== null) {
            $formParams['maxPrice'] = ObjectSerializer::toFormValue($max_price);
        }
        // form params
        if ($min_land_area !== null) {
            $formParams['minLandArea'] = ObjectSerializer::toFormValue($min_land_area);
        }
        // form params
        if ($max_land_area !== null) {
            $formParams['maxLandArea'] = ObjectSerializer::toFormValue($max_land_area);
        }
        // form params
        if ($advertiser_ids !== null) {
            $formParams['advertiserIds'] = ObjectSerializer::toFormValue($advertiser_ids);
        }
        // form params
        if ($ad_ids !== null) {
            $formParams['adIds'] = ObjectSerializer::toFormValue($ad_ids);
        }
        // form params
        if ($exclude_ad_ids !== null) {
            $formParams['excludeAdIds'] = ObjectSerializer::toFormValue($exclude_ad_ids);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($school_catchments !== null) {
            $formParams['schoolCatchments'] = ObjectSerializer::toFormValue($school_catchments);
        }
        // form params
        if ($location_terms !== null) {
            $formParams['locationTerms'] = ObjectSerializer::toFormValue($location_terms);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($new_dev_only !== null) {
            $formParams['newDevOnly'] = ObjectSerializer::toFormValue($new_dev_only);
        }
        // form params
        if ($inspection_from !== null) {
            $formParams['inspectionFrom'] = ObjectSerializer::toFormValue($inspection_from);
        }
        // form params
        if ($inspection_to !== null) {
            $formParams['inspectionTo'] = ObjectSerializer::toFormValue($inspection_to);
        }
        // form params
        if ($auction_from !== null) {
            $formParams['auctionFrom'] = ObjectSerializer::toFormValue($auction_from);
        }
        // form params
        if ($auction_to !== null) {
            $formParams['auctionTo'] = ObjectSerializer::toFormValue($auction_to);
        }
        // form params
        if ($date_available_from !== null) {
            $formParams['dateAvailableFrom'] = ObjectSerializer::toFormValue($date_available_from);
        }
        // form params
        if ($date_available_to !== null) {
            $formParams['dateAvailableTo'] = ObjectSerializer::toFormValue($date_available_to);
        }
        // form params
        if ($rural_only !== null) {
            $formParams['ruralOnly'] = ObjectSerializer::toFormValue($rural_only);
        }
        // form params
        if ($exclude_price_withheld !== null) {
            $formParams['excludePriceWithheld'] = ObjectSerializer::toFormValue($exclude_price_withheld);
        }
        // form params
        if ($exclude_deposit_taken !== null) {
            $formParams['excludeDepositTaken'] = ObjectSerializer::toFormValue($exclude_deposit_taken);
        }
        // form params
        if ($topspot_keywords !== null) {
            $formParams['topspotKeywords'] = ObjectSerializer::toFormValue($topspot_keywords);
        }
        // form params
        if ($custom_sort !== null) {
            $formParams['customSort'] = ObjectSerializer::toFormValue($custom_sort);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($geo_window !== null) {
            $formParams['geoWindow'] = ObjectSerializer::toFormValue($geo_window);
        }
        // form params
        if ($updated_since !== null) {
            $formParams['updatedSince'] = ObjectSerializer::toFormValue($updated_since);
        }
        // form params
        if ($listed_since !== null) {
            $formParams['listedSince'] = ObjectSerializer::toFormValue($listed_since);
        }
        // form params
        if ($include_inspection_aggregations !== null) {
            $formParams['includeInspectionAggregations'] = ObjectSerializer::toFormValue($include_inspection_aggregations);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsDetailedResidentialSearch
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  string $listing_type listing_type (required)
     * @param  string[] $property_types property_types (required)
     * @param  string[] $property_features property_features (required)
     * @param  string[] $listing_attributes listing_attributes (required)
     * @param  string $property_established_type property_established_type (required)
     * @param  float $min_bedrooms min_bedrooms (required)
     * @param  float $max_bedrooms max_bedrooms (required)
     * @param  float $min_bathrooms min_bathrooms (required)
     * @param  float $max_bathrooms max_bathrooms (required)
     * @param  int $min_carspaces min_carspaces (required)
     * @param  int $max_carspaces max_carspaces (required)
     * @param  int $min_price min_price (required)
     * @param  int $max_price max_price (required)
     * @param  int $min_land_area min_land_area (required)
     * @param  int $max_land_area max_land_area (required)
     * @param  int[] $advertiser_ids advertiser_ids (required)
     * @param  int[] $ad_ids ad_ids (required)
     * @param  int[] $exclude_ad_ids exclude_ad_ids (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations locations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments school_catchments (required)
     * @param  string $location_terms location_terms (required)
     * @param  string[] $keywords keywords (required)
     * @param  bool $new_dev_only new_dev_only (required)
     * @param  \DateTime $inspection_from inspection_from (required)
     * @param  \DateTime $inspection_to inspection_to (required)
     * @param  \DateTime $auction_from auction_from (required)
     * @param  \DateTime $auction_to auction_to (required)
     * @param  \DateTime $date_available_from date_available_from (required)
     * @param  \DateTime $date_available_to date_available_to (required)
     * @param  bool $rural_only rural_only (required)
     * @param  bool $exclude_price_withheld exclude_price_withheld (required)
     * @param  bool $exclude_deposit_taken exclude_deposit_taken (required)
     * @param  string[] $topspot_keywords topspot_keywords (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort custom_sort (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort sort (required)
     * @param  int $page_size page_size (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window geo_window (required)
     * @param  \DateTime $updated_since updated_since (required)
     * @param  \DateTime $listed_since listed_since (required)
     * @param  bool $include_inspection_aggregations include_inspection_aggregations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags tags (required)
     * @param  int $page_number page_number (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]
     */
    public function listingsDetailedResidentialSearch($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
    {
        list($response) = $this->listingsDetailedResidentialSearchWithHttpInfo($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number);
        return $response;
    }

    /**
     * Operation listingsDetailedResidentialSearchWithHttpInfo
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  string $listing_type (required)
     * @param  string[] $property_types (required)
     * @param  string[] $property_features (required)
     * @param  string[] $listing_attributes (required)
     * @param  string $property_established_type (required)
     * @param  float $min_bedrooms (required)
     * @param  float $max_bedrooms (required)
     * @param  float $min_bathrooms (required)
     * @param  float $max_bathrooms (required)
     * @param  int $min_carspaces (required)
     * @param  int $max_carspaces (required)
     * @param  int $min_price (required)
     * @param  int $max_price (required)
     * @param  int $min_land_area (required)
     * @param  int $max_land_area (required)
     * @param  int[] $advertiser_ids (required)
     * @param  int[] $ad_ids (required)
     * @param  int[] $exclude_ad_ids (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments (required)
     * @param  string $location_terms (required)
     * @param  string[] $keywords (required)
     * @param  bool $new_dev_only (required)
     * @param  \DateTime $inspection_from (required)
     * @param  \DateTime $inspection_to (required)
     * @param  \DateTime $auction_from (required)
     * @param  \DateTime $auction_to (required)
     * @param  \DateTime $date_available_from (required)
     * @param  \DateTime $date_available_to (required)
     * @param  bool $rural_only (required)
     * @param  bool $exclude_price_withheld (required)
     * @param  bool $exclude_deposit_taken (required)
     * @param  string[] $topspot_keywords (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window (required)
     * @param  \DateTime $updated_since (required)
     * @param  \DateTime $listed_since (required)
     * @param  bool $include_inspection_aggregations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags (required)
     * @param  int $page_number (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsDetailedResidentialSearchWithHttpInfo($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
    {
        $returnType = '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]';
        $request = $this->listingsDetailedResidentialSearchRequest($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsDetailedResidentialSearchAsync
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  string $listing_type (required)
     * @param  string[] $property_types (required)
     * @param  string[] $property_features (required)
     * @param  string[] $listing_attributes (required)
     * @param  string $property_established_type (required)
     * @param  float $min_bedrooms (required)
     * @param  float $max_bedrooms (required)
     * @param  float $min_bathrooms (required)
     * @param  float $max_bathrooms (required)
     * @param  int $min_carspaces (required)
     * @param  int $max_carspaces (required)
     * @param  int $min_price (required)
     * @param  int $max_price (required)
     * @param  int $min_land_area (required)
     * @param  int $max_land_area (required)
     * @param  int[] $advertiser_ids (required)
     * @param  int[] $ad_ids (required)
     * @param  int[] $exclude_ad_ids (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments (required)
     * @param  string $location_terms (required)
     * @param  string[] $keywords (required)
     * @param  bool $new_dev_only (required)
     * @param  \DateTime $inspection_from (required)
     * @param  \DateTime $inspection_to (required)
     * @param  \DateTime $auction_from (required)
     * @param  \DateTime $auction_to (required)
     * @param  \DateTime $date_available_from (required)
     * @param  \DateTime $date_available_to (required)
     * @param  bool $rural_only (required)
     * @param  bool $exclude_price_withheld (required)
     * @param  bool $exclude_deposit_taken (required)
     * @param  string[] $topspot_keywords (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window (required)
     * @param  \DateTime $updated_since (required)
     * @param  \DateTime $listed_since (required)
     * @param  bool $include_inspection_aggregations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags (required)
     * @param  int $page_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedResidentialSearchAsync($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
    {
        return $this->listingsDetailedResidentialSearchAsyncWithHttpInfo($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsDetailedResidentialSearchAsyncWithHttpInfo
     *
     * Retrieves residential listings matching the specified criteria.
     *
     * @param  string $listing_type (required)
     * @param  string[] $property_types (required)
     * @param  string[] $property_features (required)
     * @param  string[] $listing_attributes (required)
     * @param  string $property_established_type (required)
     * @param  float $min_bedrooms (required)
     * @param  float $max_bedrooms (required)
     * @param  float $min_bathrooms (required)
     * @param  float $max_bathrooms (required)
     * @param  int $min_carspaces (required)
     * @param  int $max_carspaces (required)
     * @param  int $min_price (required)
     * @param  int $max_price (required)
     * @param  int $min_land_area (required)
     * @param  int $max_land_area (required)
     * @param  int[] $advertiser_ids (required)
     * @param  int[] $ad_ids (required)
     * @param  int[] $exclude_ad_ids (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments (required)
     * @param  string $location_terms (required)
     * @param  string[] $keywords (required)
     * @param  bool $new_dev_only (required)
     * @param  \DateTime $inspection_from (required)
     * @param  \DateTime $inspection_to (required)
     * @param  \DateTime $auction_from (required)
     * @param  \DateTime $auction_to (required)
     * @param  \DateTime $date_available_from (required)
     * @param  \DateTime $date_available_to (required)
     * @param  bool $rural_only (required)
     * @param  bool $exclude_price_withheld (required)
     * @param  bool $exclude_deposit_taken (required)
     * @param  string[] $topspot_keywords (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window (required)
     * @param  \DateTime $updated_since (required)
     * @param  \DateTime $listed_since (required)
     * @param  bool $include_inspection_aggregations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags (required)
     * @param  int $page_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsDetailedResidentialSearchAsyncWithHttpInfo($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
    {
        $returnType = '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult[]';
        $request = $this->listingsDetailedResidentialSearchRequest($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsDetailedResidentialSearch'
     *
     * @param  string $listing_type (required)
     * @param  string[] $property_types (required)
     * @param  string[] $property_features (required)
     * @param  string[] $listing_attributes (required)
     * @param  string $property_established_type (required)
     * @param  float $min_bedrooms (required)
     * @param  float $max_bedrooms (required)
     * @param  float $min_bathrooms (required)
     * @param  float $max_bathrooms (required)
     * @param  int $min_carspaces (required)
     * @param  int $max_carspaces (required)
     * @param  int $min_price (required)
     * @param  int $max_price (required)
     * @param  int $min_land_area (required)
     * @param  int $max_land_area (required)
     * @param  int[] $advertiser_ids (required)
     * @param  int[] $ad_ids (required)
     * @param  int[] $exclude_ad_ids (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments (required)
     * @param  string $location_terms (required)
     * @param  string[] $keywords (required)
     * @param  bool $new_dev_only (required)
     * @param  \DateTime $inspection_from (required)
     * @param  \DateTime $inspection_to (required)
     * @param  \DateTime $auction_from (required)
     * @param  \DateTime $auction_to (required)
     * @param  \DateTime $date_available_from (required)
     * @param  \DateTime $date_available_to (required)
     * @param  bool $rural_only (required)
     * @param  bool $exclude_price_withheld (required)
     * @param  bool $exclude_deposit_taken (required)
     * @param  string[] $topspot_keywords (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort (required)
     * @param  int $page_size (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window (required)
     * @param  \DateTime $updated_since (required)
     * @param  \DateTime $listed_since (required)
     * @param  bool $include_inspection_aggregations (required)
     * @param  \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags (required)
     * @param  int $page_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsDetailedResidentialSearchRequest($listing_type, $property_types, $property_features, $listing_attributes, $property_established_type, $min_bedrooms, $max_bedrooms, $min_bathrooms, $max_bathrooms, $min_carspaces, $max_carspaces, $min_price, $max_price, $min_land_area, $max_land_area, $advertiser_ids, $ad_ids, $exclude_ad_ids, $locations, $school_catchments, $location_terms, $keywords, $new_dev_only, $inspection_from, $inspection_to, $auction_from, $auction_to, $date_available_from, $date_available_to, $rural_only, $exclude_price_withheld, $exclude_deposit_taken, $topspot_keywords, $custom_sort, $sort, $page_size, $geo_window, $updated_since, $listed_since, $include_inspection_aggregations, $tags, $page_number)
    {
        // verify the required parameter 'listing_type' is set
        if ($listing_type === null || (is_array($listing_type) && count($listing_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_type when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'property_types' is set
        if ($property_types === null || (is_array($property_types) && count($property_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_types when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'property_features' is set
        if ($property_features === null || (is_array($property_features) && count($property_features) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_features when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'listing_attributes' is set
        if ($listing_attributes === null || (is_array($listing_attributes) && count($listing_attributes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_attributes when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'property_established_type' is set
        if ($property_established_type === null || (is_array($property_established_type) && count($property_established_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_established_type when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'min_bedrooms' is set
        if ($min_bedrooms === null || (is_array($min_bedrooms) && count($min_bedrooms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_bedrooms when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'max_bedrooms' is set
        if ($max_bedrooms === null || (is_array($max_bedrooms) && count($max_bedrooms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_bedrooms when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'min_bathrooms' is set
        if ($min_bathrooms === null || (is_array($min_bathrooms) && count($min_bathrooms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_bathrooms when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'max_bathrooms' is set
        if ($max_bathrooms === null || (is_array($max_bathrooms) && count($max_bathrooms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_bathrooms when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'min_carspaces' is set
        if ($min_carspaces === null || (is_array($min_carspaces) && count($min_carspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_carspaces when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'max_carspaces' is set
        if ($max_carspaces === null || (is_array($max_carspaces) && count($max_carspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_carspaces when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'min_price' is set
        if ($min_price === null || (is_array($min_price) && count($min_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_price when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'max_price' is set
        if ($max_price === null || (is_array($max_price) && count($max_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_price when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'min_land_area' is set
        if ($min_land_area === null || (is_array($min_land_area) && count($min_land_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_land_area when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'max_land_area' is set
        if ($max_land_area === null || (is_array($max_land_area) && count($max_land_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_land_area when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'advertiser_ids' is set
        if ($advertiser_ids === null || (is_array($advertiser_ids) && count($advertiser_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_ids when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'ad_ids' is set
        if ($ad_ids === null || (is_array($ad_ids) && count($ad_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_ids when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'exclude_ad_ids' is set
        if ($exclude_ad_ids === null || (is_array($exclude_ad_ids) && count($exclude_ad_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclude_ad_ids when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'locations' is set
        if ($locations === null || (is_array($locations) && count($locations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locations when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'school_catchments' is set
        if ($school_catchments === null || (is_array($school_catchments) && count($school_catchments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $school_catchments when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'location_terms' is set
        if ($location_terms === null || (is_array($location_terms) && count($location_terms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_terms when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'keywords' is set
        if ($keywords === null || (is_array($keywords) && count($keywords) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywords when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'new_dev_only' is set
        if ($new_dev_only === null || (is_array($new_dev_only) && count($new_dev_only) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_dev_only when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'inspection_from' is set
        if ($inspection_from === null || (is_array($inspection_from) && count($inspection_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_from when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'inspection_to' is set
        if ($inspection_to === null || (is_array($inspection_to) && count($inspection_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_to when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'auction_from' is set
        if ($auction_from === null || (is_array($auction_from) && count($auction_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auction_from when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'auction_to' is set
        if ($auction_to === null || (is_array($auction_to) && count($auction_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auction_to when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'date_available_from' is set
        if ($date_available_from === null || (is_array($date_available_from) && count($date_available_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_available_from when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'date_available_to' is set
        if ($date_available_to === null || (is_array($date_available_to) && count($date_available_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_available_to when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'rural_only' is set
        if ($rural_only === null || (is_array($rural_only) && count($rural_only) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rural_only when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'exclude_price_withheld' is set
        if ($exclude_price_withheld === null || (is_array($exclude_price_withheld) && count($exclude_price_withheld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclude_price_withheld when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'exclude_deposit_taken' is set
        if ($exclude_deposit_taken === null || (is_array($exclude_deposit_taken) && count($exclude_deposit_taken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclude_deposit_taken when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'topspot_keywords' is set
        if ($topspot_keywords === null || (is_array($topspot_keywords) && count($topspot_keywords) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topspot_keywords when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'custom_sort' is set
        if ($custom_sort === null || (is_array($custom_sort) && count($custom_sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_sort when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'geo_window' is set
        if ($geo_window === null || (is_array($geo_window) && count($geo_window) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geo_window when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'updated_since' is set
        if ($updated_since === null || (is_array($updated_since) && count($updated_since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updated_since when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'listed_since' is set
        if ($listed_since === null || (is_array($listed_since) && count($listed_since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listed_since when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'include_inspection_aggregations' is set
        if ($include_inspection_aggregations === null || (is_array($include_inspection_aggregations) && count($include_inspection_aggregations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_inspection_aggregations when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'tags' is set
        if ($tags === null || (is_array($tags) && count($tags) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tags when calling listingsDetailedResidentialSearch'
            );
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null || (is_array($page_number) && count($page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_number when calling listingsDetailedResidentialSearch'
            );
        }

        $resourcePath = '/v1/listings/residential/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_type !== null) {
            $formParams['listingType'] = ObjectSerializer::toFormValue($listing_type);
        }
        // form params
        if ($property_types !== null) {
            $formParams['propertyTypes'] = ObjectSerializer::toFormValue($property_types);
        }
        // form params
        if ($property_features !== null) {
            $formParams['propertyFeatures'] = ObjectSerializer::toFormValue($property_features);
        }
        // form params
        if ($listing_attributes !== null) {
            $formParams['listingAttributes'] = ObjectSerializer::toFormValue($listing_attributes);
        }
        // form params
        if ($property_established_type !== null) {
            $formParams['propertyEstablishedType'] = ObjectSerializer::toFormValue($property_established_type);
        }
        // form params
        if ($min_bedrooms !== null) {
            $formParams['minBedrooms'] = ObjectSerializer::toFormValue($min_bedrooms);
        }
        // form params
        if ($max_bedrooms !== null) {
            $formParams['maxBedrooms'] = ObjectSerializer::toFormValue($max_bedrooms);
        }
        // form params
        if ($min_bathrooms !== null) {
            $formParams['minBathrooms'] = ObjectSerializer::toFormValue($min_bathrooms);
        }
        // form params
        if ($max_bathrooms !== null) {
            $formParams['maxBathrooms'] = ObjectSerializer::toFormValue($max_bathrooms);
        }
        // form params
        if ($min_carspaces !== null) {
            $formParams['minCarspaces'] = ObjectSerializer::toFormValue($min_carspaces);
        }
        // form params
        if ($max_carspaces !== null) {
            $formParams['maxCarspaces'] = ObjectSerializer::toFormValue($max_carspaces);
        }
        // form params
        if ($min_price !== null) {
            $formParams['minPrice'] = ObjectSerializer::toFormValue($min_price);
        }
        // form params
        if ($max_price !== null) {
            $formParams['maxPrice'] = ObjectSerializer::toFormValue($max_price);
        }
        // form params
        if ($min_land_area !== null) {
            $formParams['minLandArea'] = ObjectSerializer::toFormValue($min_land_area);
        }
        // form params
        if ($max_land_area !== null) {
            $formParams['maxLandArea'] = ObjectSerializer::toFormValue($max_land_area);
        }
        // form params
        if ($advertiser_ids !== null) {
            $formParams['advertiserIds'] = ObjectSerializer::toFormValue($advertiser_ids);
        }
        // form params
        if ($ad_ids !== null) {
            $formParams['adIds'] = ObjectSerializer::toFormValue($ad_ids);
        }
        // form params
        if ($exclude_ad_ids !== null) {
            $formParams['excludeAdIds'] = ObjectSerializer::toFormValue($exclude_ad_ids);
        }
        // form params
        if ($locations !== null) {
            $formParams['locations'] = ObjectSerializer::toFormValue($locations);
        }
        // form params
        if ($school_catchments !== null) {
            $formParams['schoolCatchments'] = ObjectSerializer::toFormValue($school_catchments);
        }
        // form params
        if ($location_terms !== null) {
            $formParams['locationTerms'] = ObjectSerializer::toFormValue($location_terms);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($new_dev_only !== null) {
            $formParams['newDevOnly'] = ObjectSerializer::toFormValue($new_dev_only);
        }
        // form params
        if ($inspection_from !== null) {
            $formParams['inspectionFrom'] = ObjectSerializer::toFormValue($inspection_from);
        }
        // form params
        if ($inspection_to !== null) {
            $formParams['inspectionTo'] = ObjectSerializer::toFormValue($inspection_to);
        }
        // form params
        if ($auction_from !== null) {
            $formParams['auctionFrom'] = ObjectSerializer::toFormValue($auction_from);
        }
        // form params
        if ($auction_to !== null) {
            $formParams['auctionTo'] = ObjectSerializer::toFormValue($auction_to);
        }
        // form params
        if ($date_available_from !== null) {
            $formParams['dateAvailableFrom'] = ObjectSerializer::toFormValue($date_available_from);
        }
        // form params
        if ($date_available_to !== null) {
            $formParams['dateAvailableTo'] = ObjectSerializer::toFormValue($date_available_to);
        }
        // form params
        if ($rural_only !== null) {
            $formParams['ruralOnly'] = ObjectSerializer::toFormValue($rural_only);
        }
        // form params
        if ($exclude_price_withheld !== null) {
            $formParams['excludePriceWithheld'] = ObjectSerializer::toFormValue($exclude_price_withheld);
        }
        // form params
        if ($exclude_deposit_taken !== null) {
            $formParams['excludeDepositTaken'] = ObjectSerializer::toFormValue($exclude_deposit_taken);
        }
        // form params
        if ($topspot_keywords !== null) {
            $formParams['topspotKeywords'] = ObjectSerializer::toFormValue($topspot_keywords);
        }
        // form params
        if ($custom_sort !== null) {
            $formParams['customSort'] = ObjectSerializer::toFormValue($custom_sort);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($page_size !== null) {
            $formParams['pageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($geo_window !== null) {
            $formParams['geoWindow'] = ObjectSerializer::toFormValue($geo_window);
        }
        // form params
        if ($updated_since !== null) {
            $formParams['updatedSince'] = ObjectSerializer::toFormValue($updated_since);
        }
        // form params
        if ($listed_since !== null) {
            $formParams['listedSince'] = ObjectSerializer::toFormValue($listed_since);
        }
        // form params
        if ($include_inspection_aggregations !== null) {
            $formParams['includeInspectionAggregations'] = ObjectSerializer::toFormValue($include_inspection_aggregations);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($page_number !== null) {
            $formParams['pageNumber'] = ObjectSerializer::toFormValue($page_number);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsGet
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingsV1Listing
     */
    public function listingsGet($id)
    {
        list($response) = $this->listingsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation listingsGetWithHttpInfo
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingsV1Listing, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\ListingsV1Listing';
        $request = $this->listingsGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingsV1Listing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsGetAsync
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetAsync($id)
    {
        return $this->listingsGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsGetAsyncWithHttpInfo
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\ListingsV1Listing';
        $request = $this->listingsGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsGet'
     *
     * @param  int $id Id of the listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listingsGet'
            );
        }

        $resourcePath = '/v1/listings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsGetEnquiries
     *
     * Retrieve details of all enquiries received for a specific listing
     *
     * @param  int $id Listing Id (required)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EnquiriesV1EnquiryReport[]
     */
    public function listingsGetEnquiries($id, $page_number = '1')
    {
        list($response) = $this->listingsGetEnquiriesWithHttpInfo($id, $page_number);
        return $response;
    }

    /**
     * Operation listingsGetEnquiriesWithHttpInfo
     *
     * Retrieve details of all enquiries received for a specific listing
     *
     * @param  int $id Listing Id (required)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EnquiriesV1EnquiryReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsGetEnquiriesWithHttpInfo($id, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]';
        $request = $this->listingsGetEnquiriesRequest($id, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsGetEnquiriesAsync
     *
     * Retrieve details of all enquiries received for a specific listing
     *
     * @param  int $id Listing Id (required)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetEnquiriesAsync($id, $page_number = '1')
    {
        return $this->listingsGetEnquiriesAsyncWithHttpInfo($id, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsGetEnquiriesAsyncWithHttpInfo
     *
     * Retrieve details of all enquiries received for a specific listing
     *
     * @param  int $id Listing Id (required)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetEnquiriesAsyncWithHttpInfo($id, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\EnquiriesV1EnquiryReport[]';
        $request = $this->listingsGetEnquiriesRequest($id, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsGetEnquiries'
     *
     * @param  int $id Listing Id (required)
     * @param  int $page_number Page number for paginated results (25 per page) (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsGetEnquiriesRequest($id, $page_number = '1')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listingsGetEnquiries'
            );
        }

        $resourcePath = '/v1/listings/{id}/enquiries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsGetListingReport
     *
     * Gets the processing report
     *
     * @param  string $id Report id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport
     */
    public function listingsGetListingReport($id)
    {
        list($response) = $this->listingsGetListingReportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation listingsGetListingReportWithHttpInfo
     *
     * Gets the processing report
     *
     * @param  string $id Report id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsGetListingReportWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport';
        $request = $this->listingsGetListingReportRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsGetListingReportAsync
     *
     * Gets the processing report
     *
     * @param  string $id Report id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingReportAsync($id)
    {
        return $this->listingsGetListingReportAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsGetListingReportAsyncWithHttpInfo
     *
     * Gets the processing report
     *
     * @param  string $id Report id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingReportAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport';
        $request = $this->listingsGetListingReportRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsGetListingReport'
     *
     * @param  string $id Report id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsGetListingReportRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listingsGetListingReport'
            );
        }

        $resourcePath = '/v1/listings/processingReports/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsGetListingReportByReference
     *
     * Searches processing reports
     *
     * @param  int $agency_id Domain agency Id (required)
     * @param  string $provider_ad_id External provider advertisement identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport[]
     */
    public function listingsGetListingReportByReference($agency_id, $provider_ad_id)
    {
        list($response) = $this->listingsGetListingReportByReferenceWithHttpInfo($agency_id, $provider_ad_id);
        return $response;
    }

    /**
     * Operation listingsGetListingReportByReferenceWithHttpInfo
     *
     * Searches processing reports
     *
     * @param  int $agency_id Domain agency Id (required)
     * @param  string $provider_ad_id External provider advertisement identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsGetListingReportByReferenceWithHttpInfo($agency_id, $provider_ad_id)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport[]';
        $request = $this->listingsGetListingReportByReferenceRequest($agency_id, $provider_ad_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsGetListingReportByReferenceAsync
     *
     * Searches processing reports
     *
     * @param  int $agency_id Domain agency Id (required)
     * @param  string $provider_ad_id External provider advertisement identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingReportByReferenceAsync($agency_id, $provider_ad_id)
    {
        return $this->listingsGetListingReportByReferenceAsyncWithHttpInfo($agency_id, $provider_ad_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsGetListingReportByReferenceAsyncWithHttpInfo
     *
     * Searches processing reports
     *
     * @param  int $agency_id Domain agency Id (required)
     * @param  string $provider_ad_id External provider advertisement identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingReportByReferenceAsyncWithHttpInfo($agency_id, $provider_ad_id)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingReport[]';
        $request = $this->listingsGetListingReportByReferenceRequest($agency_id, $provider_ad_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsGetListingReportByReference'
     *
     * @param  int $agency_id Domain agency Id (required)
     * @param  string $provider_ad_id External provider advertisement identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsGetListingReportByReferenceRequest($agency_id, $provider_ad_id)
    {
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling listingsGetListingReportByReference'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsGetListingReportByReference'
            );
        }

        $resourcePath = '/v1/listings/processingReports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($agency_id !== null) {
            $queryParams['agencyId'] = ObjectSerializer::toQueryValue($agency_id, 'int32');
        }
        // query params
        if ($provider_ad_id !== null) {
            $queryParams['providerAdId'] = ObjectSerializer::toQueryValue($provider_ad_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsGetListingStatistics
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     * @param  string $time_period The period of time to see the listing performance for (not including today). Defaults to Last7Days (optional, default to last7Days)
     * @param  string $channel Filter statistics for the given channel. Defaults to listing Channel. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingPerformanceV1StatisticReport
     */
    public function listingsGetListingStatistics($id, $time_period = 'last7Days', $channel = null)
    {
        list($response) = $this->listingsGetListingStatisticsWithHttpInfo($id, $time_period, $channel);
        return $response;
    }

    /**
     * Operation listingsGetListingStatisticsWithHttpInfo
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     * @param  string $time_period The period of time to see the listing performance for (not including today). Defaults to Last7Days (optional, default to last7Days)
     * @param  string $channel Filter statistics for the given channel. Defaults to listing Channel. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingPerformanceV1StatisticReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsGetListingStatisticsWithHttpInfo($id, $time_period = 'last7Days', $channel = null)
    {
        $returnType = '\Swagger\Client\Model\ListingPerformanceV1StatisticReport';
        $request = $this->listingsGetListingStatisticsRequest($id, $time_period, $channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingPerformanceV1StatisticReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsGetListingStatisticsAsync
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     * @param  string $time_period The period of time to see the listing performance for (not including today). Defaults to Last7Days (optional, default to last7Days)
     * @param  string $channel Filter statistics for the given channel. Defaults to listing Channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingStatisticsAsync($id, $time_period = 'last7Days', $channel = null)
    {
        return $this->listingsGetListingStatisticsAsyncWithHttpInfo($id, $time_period, $channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsGetListingStatisticsAsyncWithHttpInfo
     *
     * Retrieve details of listing using the listing id
     *
     * @param  int $id Id of the listing (required)
     * @param  string $time_period The period of time to see the listing performance for (not including today). Defaults to Last7Days (optional, default to last7Days)
     * @param  string $channel Filter statistics for the given channel. Defaults to listing Channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsGetListingStatisticsAsyncWithHttpInfo($id, $time_period = 'last7Days', $channel = null)
    {
        $returnType = '\Swagger\Client\Model\ListingPerformanceV1StatisticReport';
        $request = $this->listingsGetListingStatisticsRequest($id, $time_period, $channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsGetListingStatistics'
     *
     * @param  int $id Id of the listing (required)
     * @param  string $time_period The period of time to see the listing performance for (not including today). Defaults to Last7Days (optional, default to last7Days)
     * @param  string $channel Filter statistics for the given channel. Defaults to listing Channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsGetListingStatisticsRequest($id, $time_period = 'last7Days', $channel = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listingsGetListingStatistics'
            );
        }

        $resourcePath = '/v1/listings/{id}/statistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($time_period !== null) {
            $queryParams['timePeriod'] = ObjectSerializer::toQueryValue($time_period, null);
        }
        // query params
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertBusinessListing
     *
     * Creates or updates a business listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessListing $body The business listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse
     */
    public function listingsUpsertBusinessListing($body)
    {
        list($response) = $this->listingsUpsertBusinessListingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertBusinessListingWithHttpInfo
     *
     * Creates or updates a business listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessListing $body The business listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertBusinessListingWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertBusinessListingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertBusinessListingAsync
     *
     * Creates or updates a business listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessListing $body The business listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertBusinessListingAsync($body)
    {
        return $this->listingsUpsertBusinessListingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertBusinessListingAsyncWithHttpInfo
     *
     * Creates or updates a business listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessListing $body The business listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertBusinessListingAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertBusinessListingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertBusinessListing'
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessListing $body The business listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertBusinessListingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertBusinessListing'
            );
        }

        $resourcePath = '/v1/listings/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($lease_hold_details !== null) {
            $formParams['leaseHoldDetails'] = ObjectSerializer::toFormValue($lease_hold_details);
        }
        // form params
        if ($sale_info !== null) {
            $formParams['saleInfo'] = ObjectSerializer::toFormValue($sale_info);
        }
        // form params
        if ($freehold_commercial_ad_id !== null) {
            $formParams['freeholdCommercialAdId'] = ObjectSerializer::toFormValue($freehold_commercial_ad_id);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertBusinessListing
     *
     * Creates or updates a business listing
     *
     * @param  string $listing_action listing_action (required)
     * @param  string $contact_preference contact_preference (required)
     * @param  bool $under_offer_or_contract under_offer_or_contract (required)
     * @param  double $nabers nabers (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessProperty $property_details property_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelLeaseHoldDetail $lease_hold_details lease_hold_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelSaleInfo $sale_info sale_info (required)
     * @param  int $freehold_commercial_ad_id freehold_commercial_ad_id (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price price (required)
     * @param  int $domain_ad_id domain_ad_id (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $features features (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts contacts (required)
     * @param  string $other_enquiry_email other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address receive_emails_to_default_address (required)
     * @param  bool $is_rural is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse
     */
    public function listingsUpsertBusinessListing($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        list($response) = $this->listingsUpsertBusinessListingWithHttpInfo($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);
        return $response;
    }

    /**
     * Operation listingsUpsertBusinessListingWithHttpInfo
     *
     * Creates or updates a business listing
     *
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  double $nabers (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessProperty $property_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelLeaseHoldDetail $lease_hold_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelSaleInfo $sale_info (required)
     * @param  int $freehold_commercial_ad_id (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertBusinessListingWithHttpInfo($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertBusinessListingRequest($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertBusinessListingAsync
     *
     * Creates or updates a business listing
     *
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  double $nabers (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessProperty $property_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelLeaseHoldDetail $lease_hold_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelSaleInfo $sale_info (required)
     * @param  int $freehold_commercial_ad_id (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertBusinessListingAsync($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        return $this->listingsUpsertBusinessListingAsyncWithHttpInfo($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertBusinessListingAsyncWithHttpInfo
     *
     * Creates or updates a business listing
     *
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  double $nabers (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessProperty $property_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelLeaseHoldDetail $lease_hold_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelSaleInfo $sale_info (required)
     * @param  int $freehold_commercial_ad_id (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertBusinessListingAsyncWithHttpInfo($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertBusinessListingRequest($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertBusinessListing'
     *
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  double $nabers (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelBusinessProperty $property_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelLeaseHoldDetail $lease_hold_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelSaleInfo $sale_info (required)
     * @param  int $freehold_commercial_ad_id (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertBusinessListingRequest($listing_action, $contact_preference, $under_offer_or_contract, $nabers, $property_details, $lease_hold_details, $sale_info, $freehold_commercial_ad_id, $price, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'contact_preference' is set
        if ($contact_preference === null || (is_array($contact_preference) && count($contact_preference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_preference when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'under_offer_or_contract' is set
        if ($under_offer_or_contract === null || (is_array($under_offer_or_contract) && count($under_offer_or_contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $under_offer_or_contract when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'nabers' is set
        if ($nabers === null || (is_array($nabers) && count($nabers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nabers when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'lease_hold_details' is set
        if ($lease_hold_details === null || (is_array($lease_hold_details) && count($lease_hold_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lease_hold_details when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'sale_info' is set
        if ($sale_info === null || (is_array($sale_info) && count($sale_info) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_info when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'freehold_commercial_ad_id' is set
        if ($freehold_commercial_ad_id === null || (is_array($freehold_commercial_ad_id) && count($freehold_commercial_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freehold_commercial_ad_id when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'domain_ad_id' is set
        if ($domain_ad_id === null || (is_array($domain_ad_id) && count($domain_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_ad_id when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'features' is set
        if ($features === null || (is_array($features) && count($features) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $features when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'inspection_details' is set
        if ($inspection_details === null || (is_array($inspection_details) && count($inspection_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_details when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'media' is set
        if ($media === null || (is_array($media) && count($media) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'other_enquiry_email' is set
        if ($other_enquiry_email === null || (is_array($other_enquiry_email) && count($other_enquiry_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $other_enquiry_email when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'receive_emails_to_default_address' is set
        if ($receive_emails_to_default_address === null || (is_array($receive_emails_to_default_address) && count($receive_emails_to_default_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receive_emails_to_default_address when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'is_rural' is set
        if ($is_rural === null || (is_array($is_rural) && count($is_rural) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_rural when calling listingsUpsertBusinessListing'
            );
        }
        // verify the required parameter 'supplementary' is set
        if ($supplementary === null || (is_array($supplementary) && count($supplementary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplementary when calling listingsUpsertBusinessListing'
            );
        }

        $resourcePath = '/v1/listings/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($lease_hold_details !== null) {
            $formParams['leaseHoldDetails'] = ObjectSerializer::toFormValue($lease_hold_details);
        }
        // form params
        if ($sale_info !== null) {
            $formParams['saleInfo'] = ObjectSerializer::toFormValue($sale_info);
        }
        // form params
        if ($freehold_commercial_ad_id !== null) {
            $formParams['freeholdCommercialAdId'] = ObjectSerializer::toFormValue($freehold_commercial_ad_id);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertResidentialListing
     *
     * Creates or updates a residential listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialListing $body The residential listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse
     */
    public function listingsUpsertResidentialListing($body)
    {
        list($response) = $this->listingsUpsertResidentialListingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertResidentialListingWithHttpInfo
     *
     * Creates or updates a residential listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialListing $body The residential listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertResidentialListingWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertResidentialListingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertResidentialListingAsync
     *
     * Creates or updates a residential listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialListing $body The residential listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertResidentialListingAsync($body)
    {
        return $this->listingsUpsertResidentialListingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertResidentialListingAsyncWithHttpInfo
     *
     * Creates or updates a residential listing
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialListing $body The residential listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertResidentialListingAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertResidentialListingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertResidentialListing'
     *
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialListing $body The residential listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertResidentialListingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertResidentialListing'
            );
        }

        $resourcePath = '/v1/listings/residential';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($life_style_type !== null) {
            $formParams['lifeStyleType'] = ObjectSerializer::toFormValue($life_style_type);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($auction !== null) {
            $formParams['auction'] = ObjectSerializer::toFormValue($auction);
        }
        // form params
        if ($bond !== null) {
            $formParams['bond'] = ObjectSerializer::toFormValue($bond);
        }
        // form params
        if ($available_from !== null) {
            $formParams['availableFrom'] = ObjectSerializer::toFormValue($available_from);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($is_new_development !== null) {
            $formParams['isNewDevelopment'] = ObjectSerializer::toFormValue($is_new_development);
        }
        // form params
        if ($statement_of_information !== null) {
            $formParams['statementOfInformation'] = ObjectSerializer::toFormValue($statement_of_information);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertResidentialListing
     *
     * Creates or updates a residential listing
     *
     * @param  string $life_style_type life_style_type (required)
     * @param  string $listing_action listing_action (required)
     * @param  string $contact_preference contact_preference (required)
     * @param  bool $under_offer_or_contract under_offer_or_contract (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelAuction $auction auction (required)
     * @param  int $bond bond (required)
     * @param  \DateTime $available_from available_from (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialProperty $property_details property_details (required)
     * @param  bool $is_new_development is_new_development (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelStatementOfInformation $statement_of_information statement_of_information (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price price (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingProject $project project (required)
     * @param  int $domain_ad_id domain_ad_id (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $features features (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts contacts (required)
     * @param  string $other_enquiry_email other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address receive_emails_to_default_address (required)
     * @param  bool $is_rural is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse
     */
    public function listingsUpsertResidentialListing($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        list($response) = $this->listingsUpsertResidentialListingWithHttpInfo($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);
        return $response;
    }

    /**
     * Operation listingsUpsertResidentialListingWithHttpInfo
     *
     * Creates or updates a residential listing
     *
     * @param  string $life_style_type (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelAuction $auction (required)
     * @param  int $bond (required)
     * @param  \DateTime $available_from (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialProperty $property_details (required)
     * @param  bool $is_new_development (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelStatementOfInformation $statement_of_information (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingProject $project (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertResidentialListingWithHttpInfo($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertResidentialListingRequest($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertResidentialListingAsync
     *
     * Creates or updates a residential listing
     *
     * @param  string $life_style_type (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelAuction $auction (required)
     * @param  int $bond (required)
     * @param  \DateTime $available_from (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialProperty $property_details (required)
     * @param  bool $is_new_development (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelStatementOfInformation $statement_of_information (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingProject $project (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertResidentialListingAsync($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        return $this->listingsUpsertResidentialListingAsyncWithHttpInfo($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertResidentialListingAsyncWithHttpInfo
     *
     * Creates or updates a residential listing
     *
     * @param  string $life_style_type (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelAuction $auction (required)
     * @param  int $bond (required)
     * @param  \DateTime $available_from (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialProperty $property_details (required)
     * @param  bool $is_new_development (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelStatementOfInformation $statement_of_information (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingProject $project (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertResidentialListingAsyncWithHttpInfo($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\DomainListingAdminServiceV1ModelListingResponse';
        $request = $this->listingsUpsertResidentialListingRequest($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertResidentialListing'
     *
     * @param  string $life_style_type (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelAuction $auction (required)
     * @param  int $bond (required)
     * @param  \DateTime $available_from (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelResidentialProperty $property_details (required)
     * @param  bool $is_new_development (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelStatementOfInformation $statement_of_information (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPrice $price (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingProject $project (required)
     * @param  int $domain_ad_id (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelInspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $media (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelContact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\DomainListingAdminServiceV1ModelListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertResidentialListingRequest($life_style_type, $listing_action, $contact_preference, $under_offer_or_contract, $auction, $bond, $available_from, $property_details, $is_new_development, $statement_of_information, $price, $project, $domain_ad_id, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        // verify the required parameter 'life_style_type' is set
        if ($life_style_type === null || (is_array($life_style_type) && count($life_style_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $life_style_type when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'contact_preference' is set
        if ($contact_preference === null || (is_array($contact_preference) && count($contact_preference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_preference when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'under_offer_or_contract' is set
        if ($under_offer_or_contract === null || (is_array($under_offer_or_contract) && count($under_offer_or_contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $under_offer_or_contract when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'auction' is set
        if ($auction === null || (is_array($auction) && count($auction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auction when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'bond' is set
        if ($bond === null || (is_array($bond) && count($bond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bond when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'available_from' is set
        if ($available_from === null || (is_array($available_from) && count($available_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $available_from when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'is_new_development' is set
        if ($is_new_development === null || (is_array($is_new_development) && count($is_new_development) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_new_development when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'statement_of_information' is set
        if ($statement_of_information === null || (is_array($statement_of_information) && count($statement_of_information) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statement_of_information when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'domain_ad_id' is set
        if ($domain_ad_id === null || (is_array($domain_ad_id) && count($domain_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_ad_id when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'features' is set
        if ($features === null || (is_array($features) && count($features) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $features when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'inspection_details' is set
        if ($inspection_details === null || (is_array($inspection_details) && count($inspection_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_details when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'media' is set
        if ($media === null || (is_array($media) && count($media) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'other_enquiry_email' is set
        if ($other_enquiry_email === null || (is_array($other_enquiry_email) && count($other_enquiry_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $other_enquiry_email when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'receive_emails_to_default_address' is set
        if ($receive_emails_to_default_address === null || (is_array($receive_emails_to_default_address) && count($receive_emails_to_default_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receive_emails_to_default_address when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'is_rural' is set
        if ($is_rural === null || (is_array($is_rural) && count($is_rural) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_rural when calling listingsUpsertResidentialListing'
            );
        }
        // verify the required parameter 'supplementary' is set
        if ($supplementary === null || (is_array($supplementary) && count($supplementary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplementary when calling listingsUpsertResidentialListing'
            );
        }

        $resourcePath = '/v1/listings/residential';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($life_style_type !== null) {
            $formParams['lifeStyleType'] = ObjectSerializer::toFormValue($life_style_type);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($auction !== null) {
            $formParams['auction'] = ObjectSerializer::toFormValue($auction);
        }
        // form params
        if ($bond !== null) {
            $formParams['bond'] = ObjectSerializer::toFormValue($bond);
        }
        // form params
        if ($available_from !== null) {
            $formParams['availableFrom'] = ObjectSerializer::toFormValue($available_from);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($is_new_development !== null) {
            $formParams['isNewDevelopment'] = ObjectSerializer::toFormValue($is_new_development);
        }
        // form params
        if ($statement_of_information !== null) {
            $formParams['statementOfInformation'] = ObjectSerializer::toFormValue($statement_of_information);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertbusinessoffmarket
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertbusinessoffmarket($body)
    {
        list($response) = $this->listingsUpsertbusinessoffmarketWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertbusinessoffmarketWithHttpInfo
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertbusinessoffmarketWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertbusinessoffmarketRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertbusinessoffmarketAsync
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertbusinessoffmarketAsync($body)
    {
        return $this->listingsUpsertbusinessoffmarketAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertbusinessoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertbusinessoffmarketAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertbusinessoffmarketRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertbusinessoffmarket'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertbusinessoffmarketRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertbusinessoffmarket'
            );
        }

        $resourcePath = '/v2/listings/business/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($sale_info !== null) {
            $formParams['saleInfo'] = ObjectSerializer::toFormValue($sale_info);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertbusinessoffmarket
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2SaleInfo $sale_info sale_info (required)
     * @param  string $listing_provider listing_provider (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts contacts (required)
     * @param  string $listing_action listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketProperty $property_details property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertbusinessoffmarket($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        list($response) = $this->listingsUpsertbusinessoffmarketWithHttpInfo($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);
        return $response;
    }

    /**
     * Operation listingsUpsertbusinessoffmarketWithHttpInfo
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2SaleInfo $sale_info (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketProperty $property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertbusinessoffmarketWithHttpInfo($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertbusinessoffmarketRequest($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertbusinessoffmarketAsync
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2SaleInfo $sale_info (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertbusinessoffmarketAsync($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        return $this->listingsUpsertbusinessoffmarketAsyncWithHttpInfo($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertbusinessoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold business listing; or takes an existing business listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2SaleInfo $sale_info (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertbusinessoffmarketAsyncWithHttpInfo($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertbusinessoffmarketRequest($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertbusinessoffmarket'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2SaleInfo $sale_info (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2BusinessOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertbusinessoffmarketRequest($sale_info, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        // verify the required parameter 'sale_info' is set
        if ($sale_info === null || (is_array($sale_info) && count($sale_info) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_info when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'listing_provider' is set
        if ($listing_provider === null || (is_array($listing_provider) && count($listing_provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_provider when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'off_market_details' is set
        if ($off_market_details === null || (is_array($off_market_details) && count($off_market_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $off_market_details when calling listingsUpsertbusinessoffmarket'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertbusinessoffmarket'
            );
        }

        $resourcePath = '/v2/listings/business/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($sale_info !== null) {
            $formParams['saleInfo'] = ObjectSerializer::toFormValue($sale_info);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertcommerciallisting
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialListingV2 $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertcommerciallisting($body)
    {
        list($response) = $this->listingsUpsertcommerciallistingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertcommerciallistingWithHttpInfo
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialListingV2 $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertcommerciallistingWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommerciallistingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertcommerciallistingAsync
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialListingV2 $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommerciallistingAsync($body)
    {
        return $this->listingsUpsertcommerciallistingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertcommerciallistingAsyncWithHttpInfo
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialListingV2 $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommerciallistingAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommerciallistingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertcommerciallisting'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialListingV2 $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertcommerciallistingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertcommerciallisting'
            );
        }

        $resourcePath = '/v2/listings/commercial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($sale_price !== null) {
            $formParams['salePrice'] = ObjectSerializer::toFormValue($sale_price);
        }
        // form params
        if ($lease_price !== null) {
            $formParams['leasePrice'] = ObjectSerializer::toFormValue($lease_price);
        }
        // form params
        if ($lease !== null) {
            $formParams['lease'] = ObjectSerializer::toFormValue($lease);
        }
        // form params
        if ($eoi !== null) {
            $formParams['eoi'] = ObjectSerializer::toFormValue($eoi);
        }
        // form params
        if ($tenant !== null) {
            $formParams['tenant'] = ObjectSerializer::toFormValue($tenant);
        }
        // form params
        if ($tender !== null) {
            $formParams['tender'] = ObjectSerializer::toFormValue($tender);
        }
        // form params
        if ($occupancy_type !== null) {
            $formParams['occupancyType'] = ObjectSerializer::toFormValue($occupancy_type);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // form params
        if ($units_offered !== null) {
            $formParams['unitsOffered'] = ObjectSerializer::toFormValue($units_offered);
        }
        // form params
        if ($unit_details !== null) {
            $formParams['unitDetails'] = ObjectSerializer::toFormValue($unit_details);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($sale_terms !== null) {
            $formParams['saleTerms'] = ObjectSerializer::toFormValue($sale_terms);
        }
        // form params
        if ($auction !== null) {
            $formParams['auction'] = ObjectSerializer::toFormValue($auction);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($conjunction_agents !== null) {
            $formParams['conjunctionAgents'] = ObjectSerializer::toFormValue($conjunction_agents);
        }
        // form params
        if ($highlights !== null) {
            $formParams['highlights'] = ObjectSerializer::toFormValue($highlights);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertcommerciallisting
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price sale_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price lease_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Lease $lease lease (required)
     * @param  \Swagger\Client\Model\ListingAdminV2EOI $eoi eoi (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tenant $tenant tenant (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tender $tender tender (required)
     * @param  string $occupancy_type occupancy_type (required)
     * @param  int $annual_return annual_return (required)
     * @param  int $units_offered units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details unit_details (required)
     * @param  double $nabers nabers (required)
     * @param  string $sale_terms sale_terms (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction auction (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details property_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents conjunction_agents (required)
     * @param  string[] $highlights highlights (required)
     * @param  bool $under_offer_or_contract under_offer_or_contract (required)
     * @param  int $domain_ad_id domain_ad_id (required)
     * @param  string $listing_provider listing_provider (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $features features (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details inspection_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media media (required)
     * @param  string $listing_action listing_action (required)
     * @param  string $contact_preference contact_preference (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts contacts (required)
     * @param  string $other_enquiry_email other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address receive_emails_to_default_address (required)
     * @param  bool $is_rural is_rural (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertcommerciallisting($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        list($response) = $this->listingsUpsertcommerciallistingWithHttpInfo($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);
        return $response;
    }

    /**
     * Operation listingsUpsertcommerciallistingWithHttpInfo
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Lease $lease (required)
     * @param  \Swagger\Client\Model\ListingAdminV2EOI $eoi (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tenant $tenant (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tender $tender (required)
     * @param  string $occupancy_type (required)
     * @param  int $annual_return (required)
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  double $nabers (required)
     * @param  string $sale_terms (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents (required)
     * @param  string[] $highlights (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  int $domain_ad_id (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertcommerciallistingWithHttpInfo($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommerciallistingRequest($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertcommerciallistingAsync
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Lease $lease (required)
     * @param  \Swagger\Client\Model\ListingAdminV2EOI $eoi (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tenant $tenant (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tender $tender (required)
     * @param  string $occupancy_type (required)
     * @param  int $annual_return (required)
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  double $nabers (required)
     * @param  string $sale_terms (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents (required)
     * @param  string[] $highlights (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  int $domain_ad_id (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommerciallistingAsync($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        return $this->listingsUpsertcommerciallistingAsyncWithHttpInfo($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertcommerciallistingAsyncWithHttpInfo
     *
     * Creates a commercial listing.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Lease $lease (required)
     * @param  \Swagger\Client\Model\ListingAdminV2EOI $eoi (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tenant $tenant (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tender $tender (required)
     * @param  string $occupancy_type (required)
     * @param  int $annual_return (required)
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  double $nabers (required)
     * @param  string $sale_terms (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents (required)
     * @param  string[] $highlights (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  int $domain_ad_id (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommerciallistingAsyncWithHttpInfo($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommerciallistingRequest($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertcommerciallisting'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Lease $lease (required)
     * @param  \Swagger\Client\Model\ListingAdminV2EOI $eoi (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tenant $tenant (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Tender $tender (required)
     * @param  string $occupancy_type (required)
     * @param  int $annual_return (required)
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  double $nabers (required)
     * @param  string $sale_terms (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents (required)
     * @param  string[] $highlights (required)
     * @param  bool $under_offer_or_contract (required)
     * @param  int $domain_ad_id (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $features (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media (required)
     * @param  string $listing_action (required)
     * @param  string $contact_preference (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $other_enquiry_email (required)
     * @param  bool $receive_emails_to_default_address (required)
     * @param  bool $is_rural (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertcommerciallistingRequest($sale_price, $lease_price, $lease, $eoi, $tenant, $tender, $occupancy_type, $annual_return, $units_offered, $unit_details, $nabers, $sale_terms, $auction, $property_details, $conjunction_agents, $highlights, $under_offer_or_contract, $domain_ad_id, $listing_provider, $domain_agency_id, $provider_ad_id, $features, $description, $summary, $inspection_details, $media, $listing_action, $contact_preference, $contacts, $other_enquiry_email, $receive_emails_to_default_address, $is_rural, $supplementary)
    {
        // verify the required parameter 'sale_price' is set
        if ($sale_price === null || (is_array($sale_price) && count($sale_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_price when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'lease_price' is set
        if ($lease_price === null || (is_array($lease_price) && count($lease_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lease_price when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'lease' is set
        if ($lease === null || (is_array($lease) && count($lease) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lease when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'eoi' is set
        if ($eoi === null || (is_array($eoi) && count($eoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eoi when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'tender' is set
        if ($tender === null || (is_array($tender) && count($tender) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tender when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'occupancy_type' is set
        if ($occupancy_type === null || (is_array($occupancy_type) && count($occupancy_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $occupancy_type when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'annual_return' is set
        if ($annual_return === null || (is_array($annual_return) && count($annual_return) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annual_return when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'units_offered' is set
        if ($units_offered === null || (is_array($units_offered) && count($units_offered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units_offered when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'unit_details' is set
        if ($unit_details === null || (is_array($unit_details) && count($unit_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_details when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'nabers' is set
        if ($nabers === null || (is_array($nabers) && count($nabers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nabers when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'sale_terms' is set
        if ($sale_terms === null || (is_array($sale_terms) && count($sale_terms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_terms when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'auction' is set
        if ($auction === null || (is_array($auction) && count($auction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auction when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'conjunction_agents' is set
        if ($conjunction_agents === null || (is_array($conjunction_agents) && count($conjunction_agents) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conjunction_agents when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'highlights' is set
        if ($highlights === null || (is_array($highlights) && count($highlights) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $highlights when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'under_offer_or_contract' is set
        if ($under_offer_or_contract === null || (is_array($under_offer_or_contract) && count($under_offer_or_contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $under_offer_or_contract when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'domain_ad_id' is set
        if ($domain_ad_id === null || (is_array($domain_ad_id) && count($domain_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_ad_id when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'listing_provider' is set
        if ($listing_provider === null || (is_array($listing_provider) && count($listing_provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_provider when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'features' is set
        if ($features === null || (is_array($features) && count($features) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $features when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'inspection_details' is set
        if ($inspection_details === null || (is_array($inspection_details) && count($inspection_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_details when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'media' is set
        if ($media === null || (is_array($media) && count($media) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'contact_preference' is set
        if ($contact_preference === null || (is_array($contact_preference) && count($contact_preference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_preference when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'other_enquiry_email' is set
        if ($other_enquiry_email === null || (is_array($other_enquiry_email) && count($other_enquiry_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $other_enquiry_email when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'receive_emails_to_default_address' is set
        if ($receive_emails_to_default_address === null || (is_array($receive_emails_to_default_address) && count($receive_emails_to_default_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receive_emails_to_default_address when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'is_rural' is set
        if ($is_rural === null || (is_array($is_rural) && count($is_rural) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_rural when calling listingsUpsertcommerciallisting'
            );
        }
        // verify the required parameter 'supplementary' is set
        if ($supplementary === null || (is_array($supplementary) && count($supplementary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplementary when calling listingsUpsertcommerciallisting'
            );
        }

        $resourcePath = '/v2/listings/commercial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($sale_price !== null) {
            $formParams['salePrice'] = ObjectSerializer::toFormValue($sale_price);
        }
        // form params
        if ($lease_price !== null) {
            $formParams['leasePrice'] = ObjectSerializer::toFormValue($lease_price);
        }
        // form params
        if ($lease !== null) {
            $formParams['lease'] = ObjectSerializer::toFormValue($lease);
        }
        // form params
        if ($eoi !== null) {
            $formParams['eoi'] = ObjectSerializer::toFormValue($eoi);
        }
        // form params
        if ($tenant !== null) {
            $formParams['tenant'] = ObjectSerializer::toFormValue($tenant);
        }
        // form params
        if ($tender !== null) {
            $formParams['tender'] = ObjectSerializer::toFormValue($tender);
        }
        // form params
        if ($occupancy_type !== null) {
            $formParams['occupancyType'] = ObjectSerializer::toFormValue($occupancy_type);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // form params
        if ($units_offered !== null) {
            $formParams['unitsOffered'] = ObjectSerializer::toFormValue($units_offered);
        }
        // form params
        if ($unit_details !== null) {
            $formParams['unitDetails'] = ObjectSerializer::toFormValue($unit_details);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($sale_terms !== null) {
            $formParams['saleTerms'] = ObjectSerializer::toFormValue($sale_terms);
        }
        // form params
        if ($auction !== null) {
            $formParams['auction'] = ObjectSerializer::toFormValue($auction);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // form params
        if ($conjunction_agents !== null) {
            $formParams['conjunctionAgents'] = ObjectSerializer::toFormValue($conjunction_agents);
        }
        // form params
        if ($highlights !== null) {
            $formParams['highlights'] = ObjectSerializer::toFormValue($highlights);
        }
        // form params
        if ($under_offer_or_contract !== null) {
            $formParams['underOfferOrContract'] = ObjectSerializer::toFormValue($under_offer_or_contract);
        }
        // form params
        if ($domain_ad_id !== null) {
            $formParams['domainAdId'] = ObjectSerializer::toFormValue($domain_ad_id);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($features !== null) {
            $formParams['features'] = ObjectSerializer::toFormValue($features);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($inspection_details !== null) {
            $formParams['inspectionDetails'] = ObjectSerializer::toFormValue($inspection_details);
        }
        // form params
        if ($media !== null) {
            $formParams['media'] = ObjectSerializer::toFormValue($media);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($contact_preference !== null) {
            $formParams['contactPreference'] = ObjectSerializer::toFormValue($contact_preference);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($other_enquiry_email !== null) {
            $formParams['otherEnquiryEmail'] = ObjectSerializer::toFormValue($other_enquiry_email);
        }
        // form params
        if ($receive_emails_to_default_address !== null) {
            $formParams['receiveEmailsToDefaultAddress'] = ObjectSerializer::toFormValue($receive_emails_to_default_address);
        }
        // form params
        if ($is_rural !== null) {
            $formParams['isRural'] = ObjectSerializer::toFormValue($is_rural);
        }
        // form params
        if ($supplementary !== null) {
            $formParams['supplementary'] = ObjectSerializer::toFormValue($supplementary);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertcommercialoffmarket
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertcommercialoffmarket($body)
    {
        list($response) = $this->listingsUpsertcommercialoffmarketWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertcommercialoffmarketWithHttpInfo
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertcommercialoffmarketWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommercialoffmarketRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertcommercialoffmarketAsync
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommercialoffmarketAsync($body)
    {
        return $this->listingsUpsertcommercialoffmarketAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertcommercialoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommercialoffmarketAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommercialoffmarketRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertcommercialoffmarket'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertcommercialoffmarketRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertcommercialoffmarket'
            );
        }

        $resourcePath = '/v2/listings/commercial/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($units_offered !== null) {
            $formParams['unitsOffered'] = ObjectSerializer::toFormValue($units_offered);
        }
        // form params
        if ($unit_details !== null) {
            $formParams['unitDetails'] = ObjectSerializer::toFormValue($unit_details);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($highlights !== null) {
            $formParams['highlights'] = ObjectSerializer::toFormValue($highlights);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertcommercialoffmarket
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  int $units_offered units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details unit_details (required)
     * @param  int $annual_return annual_return (required)
     * @param  double $nabers nabers (required)
     * @param  string[] $highlights highlights (required)
     * @param  string $listing_provider listing_provider (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts contacts (required)
     * @param  string $listing_action listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketProperty $property_details property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertcommercialoffmarket($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        list($response) = $this->listingsUpsertcommercialoffmarketWithHttpInfo($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);
        return $response;
    }

    /**
     * Operation listingsUpsertcommercialoffmarketWithHttpInfo
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  int $annual_return (required)
     * @param  double $nabers (required)
     * @param  string[] $highlights (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketProperty $property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertcommercialoffmarketWithHttpInfo($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommercialoffmarketRequest($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertcommercialoffmarketAsync
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  int $annual_return (required)
     * @param  double $nabers (required)
     * @param  string[] $highlights (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommercialoffmarketAsync($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        return $this->listingsUpsertcommercialoffmarketAsyncWithHttpInfo($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertcommercialoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     *
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  int $annual_return (required)
     * @param  double $nabers (required)
     * @param  string[] $highlights (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertcommercialoffmarketAsyncWithHttpInfo($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertcommercialoffmarketRequest($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertcommercialoffmarket'
     *
     * @param  int $units_offered (required)
     * @param  \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details (required)
     * @param  int $annual_return (required)
     * @param  double $nabers (required)
     * @param  string[] $highlights (required)
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2CommercialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertcommercialoffmarketRequest($units_offered, $unit_details, $annual_return, $nabers, $highlights, $listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        // verify the required parameter 'units_offered' is set
        if ($units_offered === null || (is_array($units_offered) && count($units_offered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units_offered when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'unit_details' is set
        if ($unit_details === null || (is_array($unit_details) && count($unit_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_details when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'annual_return' is set
        if ($annual_return === null || (is_array($annual_return) && count($annual_return) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annual_return when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'nabers' is set
        if ($nabers === null || (is_array($nabers) && count($nabers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nabers when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'highlights' is set
        if ($highlights === null || (is_array($highlights) && count($highlights) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $highlights when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'listing_provider' is set
        if ($listing_provider === null || (is_array($listing_provider) && count($listing_provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_provider when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'off_market_details' is set
        if ($off_market_details === null || (is_array($off_market_details) && count($off_market_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $off_market_details when calling listingsUpsertcommercialoffmarket'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertcommercialoffmarket'
            );
        }

        $resourcePath = '/v2/listings/commercial/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($units_offered !== null) {
            $formParams['unitsOffered'] = ObjectSerializer::toFormValue($units_offered);
        }
        // form params
        if ($unit_details !== null) {
            $formParams['unitDetails'] = ObjectSerializer::toFormValue($unit_details);
        }
        // form params
        if ($annual_return !== null) {
            $formParams['annualReturn'] = ObjectSerializer::toFormValue($annual_return);
        }
        // form params
        if ($nabers !== null) {
            $formParams['nabers'] = ObjectSerializer::toFormValue($nabers);
        }
        // form params
        if ($highlights !== null) {
            $formParams['highlights'] = ObjectSerializer::toFormValue($highlights);
        }
        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertresidentialoffmarket
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertresidentialoffmarket($body)
    {
        list($response) = $this->listingsUpsertresidentialoffmarketWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listingsUpsertresidentialoffmarketWithHttpInfo
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketListing $body Listing data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertresidentialoffmarketWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertresidentialoffmarketRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertresidentialoffmarketAsync
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertresidentialoffmarketAsync($body)
    {
        return $this->listingsUpsertresidentialoffmarketAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertresidentialoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertresidentialoffmarketAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertresidentialoffmarketRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertresidentialoffmarket'
     *
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketListing $body Listing data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertresidentialoffmarketRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listingsUpsertresidentialoffmarket'
            );
        }

        $resourcePath = '/v2/listings/residential/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsUpsertresidentialoffmarket
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  string $listing_provider listing_provider (required)
     * @param  int $domain_agency_id domain_agency_id (required)
     * @param  string $provider_ad_id provider_ad_id (required)
     * @param  string $description description (required)
     * @param  string $summary summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts contacts (required)
     * @param  string $listing_action listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketProperty $property_details property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingAdminV2ListingResponse
     */
    public function listingsUpsertresidentialoffmarket($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        list($response) = $this->listingsUpsertresidentialoffmarketWithHttpInfo($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);
        return $response;
    }

    /**
     * Operation listingsUpsertresidentialoffmarketWithHttpInfo
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketProperty $property_details (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingAdminV2ListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsUpsertresidentialoffmarketWithHttpInfo($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertresidentialoffmarketRequest($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingAdminV2ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listingsUpsertresidentialoffmarketAsync
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertresidentialoffmarketAsync($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        return $this->listingsUpsertresidentialoffmarketAsyncWithHttpInfo($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsUpsertresidentialoffmarketAsyncWithHttpInfo
     *
     * Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     *
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsUpsertresidentialoffmarketAsyncWithHttpInfo($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        $returnType = '\Swagger\Client\Model\ListingAdminV2ListingResponse';
        $request = $this->listingsUpsertresidentialoffmarketRequest($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsUpsertresidentialoffmarket'
     *
     * @param  string $listing_provider (required)
     * @param  int $domain_agency_id (required)
     * @param  string $provider_ad_id (required)
     * @param  string $description (required)
     * @param  string $summary (required)
     * @param  \Swagger\Client\Model\ListingAdminV2Contact[] $contacts (required)
     * @param  string $listing_action (required)
     * @param  \Swagger\Client\Model\ListingAdminV2OffMarketDetailsBase $off_market_details (required)
     * @param  \Swagger\Client\Model\ListingAdminV2ResidentialOffMarketProperty $property_details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsUpsertresidentialoffmarketRequest($listing_provider, $domain_agency_id, $provider_ad_id, $description, $summary, $contacts, $listing_action, $off_market_details, $property_details)
    {
        // verify the required parameter 'listing_provider' is set
        if ($listing_provider === null || (is_array($listing_provider) && count($listing_provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_provider when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'domain_agency_id' is set
        if ($domain_agency_id === null || (is_array($domain_agency_id) && count($domain_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_agency_id when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'provider_ad_id' is set
        if ($provider_ad_id === null || (is_array($provider_ad_id) && count($provider_ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_ad_id when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'summary' is set
        if ($summary === null || (is_array($summary) && count($summary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $summary when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'listing_action' is set
        if ($listing_action === null || (is_array($listing_action) && count($listing_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_action when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'off_market_details' is set
        if ($off_market_details === null || (is_array($off_market_details) && count($off_market_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $off_market_details when calling listingsUpsertresidentialoffmarket'
            );
        }
        // verify the required parameter 'property_details' is set
        if ($property_details === null || (is_array($property_details) && count($property_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_details when calling listingsUpsertresidentialoffmarket'
            );
        }

        $resourcePath = '/v2/listings/residential/offmarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($listing_provider !== null) {
            $formParams['listingProvider'] = ObjectSerializer::toFormValue($listing_provider);
        }
        // form params
        if ($domain_agency_id !== null) {
            $formParams['domainAgencyID'] = ObjectSerializer::toFormValue($domain_agency_id);
        }
        // form params
        if ($provider_ad_id !== null) {
            $formParams['providerAdId'] = ObjectSerializer::toFormValue($provider_ad_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($summary !== null) {
            $formParams['summary'] = ObjectSerializer::toFormValue($summary);
        }
        // form params
        if ($contacts !== null) {
            $formParams['contacts'] = ObjectSerializer::toFormValue($contacts);
        }
        // form params
        if ($listing_action !== null) {
            $formParams['listingAction'] = ObjectSerializer::toFormValue($listing_action);
        }
        // form params
        if ($off_market_details !== null) {
            $formParams['offMarketDetails'] = ObjectSerializer::toFormValue($off_market_details);
        }
        // form params
        if ($property_details !== null) {
            $formParams['propertyDetails'] = ObjectSerializer::toFormValue($property_details);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
