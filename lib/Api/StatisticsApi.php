<?php
/**
 * StatisticsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StatisticsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatisticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation statisticsPost
     *
     * Record a statistic event along with its associated metadata (if applicable)
     *
     * @param  object $body A JSON object dictionary of the metadata associated with the event. (required)
     * @param  string $event The event type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function statisticsPost($body, $event)
    {
        $this->statisticsPostWithHttpInfo($body, $event);
    }

    /**
     * Operation statisticsPostWithHttpInfo
     *
     * Record a statistic event along with its associated metadata (if applicable)
     *
     * @param  object $body A JSON object dictionary of the metadata associated with the event. (required)
     * @param  string $event The event type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function statisticsPostWithHttpInfo($body, $event)
    {
        $returnType = '';
        $request = $this->statisticsPostRequest($body, $event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation statisticsPostAsync
     *
     * Record a statistic event along with its associated metadata (if applicable)
     *
     * @param  object $body A JSON object dictionary of the metadata associated with the event. (required)
     * @param  string $event The event type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statisticsPostAsync($body, $event)
    {
        return $this->statisticsPostAsyncWithHttpInfo($body, $event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation statisticsPostAsyncWithHttpInfo
     *
     * Record a statistic event along with its associated metadata (if applicable)
     *
     * @param  object $body A JSON object dictionary of the metadata associated with the event. (required)
     * @param  string $event The event type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statisticsPostAsyncWithHttpInfo($body, $event)
    {
        $returnType = '';
        $request = $this->statisticsPostRequest($body, $event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'statisticsPost'
     *
     * @param  object $body A JSON object dictionary of the metadata associated with the event. (required)
     * @param  string $event The event type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function statisticsPostRequest($body, $event)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling statisticsPost'
            );
        }
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling statisticsPost'
            );
        }

        $resourcePath = '/v1/statistics/{event}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($event !== null) {
            $resourcePath = str_replace(
                '{' . 'event' . '}',
                ObjectSerializer::toPathValue($event),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburb
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $postcode Suburb Post Code, optional, but required for suburbs with official post codes. (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance
     */
    public function suburbPerformanceGetByNamedSuburb($state, $suburb, $postcode, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        list($response) = $this->suburbPerformanceGetByNamedSuburbWithHttpInfo($state, $suburb, $postcode, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);
        return $response;
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbWithHttpInfo
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $postcode Suburb Post Code, optional, but required for suburbs with official post codes. (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance, HTTP status code, HTTP response headers (array of strings)
     */
    public function suburbPerformanceGetByNamedSuburbWithHttpInfo($state, $suburb, $postcode, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        $returnType = '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance';
        $request = $this->suburbPerformanceGetByNamedSuburbRequest($state, $suburb, $postcode, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbAsync
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $postcode Suburb Post Code, optional, but required for suburbs with official post codes. (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suburbPerformanceGetByNamedSuburbAsync($state, $suburb, $postcode, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        return $this->suburbPerformanceGetByNamedSuburbAsyncWithHttpInfo($state, $suburb, $postcode, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbAsyncWithHttpInfo
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $postcode Suburb Post Code, optional, but required for suburbs with official post codes. (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suburbPerformanceGetByNamedSuburbAsyncWithHttpInfo($state, $suburb, $postcode, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        $returnType = '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance';
        $request = $this->suburbPerformanceGetByNamedSuburbRequest($state, $suburb, $postcode, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suburbPerformanceGetByNamedSuburb'
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $postcode Suburb Post Code, optional, but required for suburbs with official post codes. (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suburbPerformanceGetByNamedSuburbRequest($state, $suburb, $postcode, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling suburbPerformanceGetByNamedSuburb'
            );
        }
        // verify the required parameter 'suburb' is set
        if ($suburb === null || (is_array($suburb) && count($suburb) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suburb when calling suburbPerformanceGetByNamedSuburb'
            );
        }
        // verify the required parameter 'postcode' is set
        if ($postcode === null || (is_array($postcode) && count($postcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postcode when calling suburbPerformanceGetByNamedSuburb'
            );
        }

        $resourcePath = '/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_category !== null) {
            $queryParams['propertyCategory'] = ObjectSerializer::toQueryValue($property_category, null);
        }
        // query params
        if ($bedrooms !== null) {
            $queryParams['bedrooms'] = ObjectSerializer::toQueryValue($bedrooms, 'int32');
        }
        // query params
        if ($period_size !== null) {
            $queryParams['periodSize'] = ObjectSerializer::toQueryValue($period_size, null);
        }
        // query params
        if ($starting_period_relative_to_current !== null) {
            $queryParams['startingPeriodRelativeToCurrent'] = ObjectSerializer::toQueryValue($starting_period_relative_to_current, 'int32');
        }
        // query params
        if ($total_periods !== null) {
            $queryParams['totalPeriods'] = ObjectSerializer::toQueryValue($total_periods, 'int32');
        }

        // path params
        if ($state !== null) {
            $resourcePath = str_replace(
                '{' . 'state' . '}',
                ObjectSerializer::toPathValue($state),
                $resourcePath
            );
        }
        // path params
        if ($suburb !== null) {
            $resourcePath = str_replace(
                '{' . 'suburb' . '}',
                ObjectSerializer::toPathValue($suburb),
                $resourcePath
            );
        }
        // path params
        if ($postcode !== null) {
            $resourcePath = str_replace(
                '{' . 'postcode' . '}',
                ObjectSerializer::toPathValue($postcode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbWithoutPostcode
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance
     */
    public function suburbPerformanceGetByNamedSuburbWithoutPostcode($state, $suburb, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        list($response) = $this->suburbPerformanceGetByNamedSuburbWithoutPostcodeWithHttpInfo($state, $suburb, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);
        return $response;
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbWithoutPostcodeWithHttpInfo
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance, HTTP status code, HTTP response headers (array of strings)
     */
    public function suburbPerformanceGetByNamedSuburbWithoutPostcodeWithHttpInfo($state, $suburb, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        $returnType = '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance';
        $request = $this->suburbPerformanceGetByNamedSuburbWithoutPostcodeRequest($state, $suburb, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbWithoutPostcodeAsync
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suburbPerformanceGetByNamedSuburbWithoutPostcodeAsync($state, $suburb, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        return $this->suburbPerformanceGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo($state, $suburb, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suburbPerformanceGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo
     *
     * Search for sales statistics in a given geographic level.
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suburbPerformanceGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo($state, $suburb, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        $returnType = '\Swagger\Client\Model\SuburbPerformanceStatisticsV3SuburbPerformance';
        $request = $this->suburbPerformanceGetByNamedSuburbWithoutPostcodeRequest($state, $suburb, $property_category, $bedrooms, $period_size, $starting_period_relative_to_current, $total_periods);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suburbPerformanceGetByNamedSuburbWithoutPostcode'
     *
     * @param  string $state The Australian state abbreviation (required)
     * @param  string $suburb Suburb name to retrieve data for (required)
     * @param  string $property_category Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional, default to house)
     * @param  int $bedrooms Number of bedrooms to use in the sales search (optional)
     * @param  string $period_size Unit of the measurement period to use (optional, default to quarters)
     * @param  int $starting_period_relative_to_current When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)
     * @param  int $total_periods Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suburbPerformanceGetByNamedSuburbWithoutPostcodeRequest($state, $suburb, $property_category = 'house', $bedrooms = null, $period_size = 'quarters', $starting_period_relative_to_current = '1', $total_periods = '4')
    {
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling suburbPerformanceGetByNamedSuburbWithoutPostcode'
            );
        }
        // verify the required parameter 'suburb' is set
        if ($suburb === null || (is_array($suburb) && count($suburb) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suburb when calling suburbPerformanceGetByNamedSuburbWithoutPostcode'
            );
        }

        $resourcePath = '/v2/suburbPerformanceStatistics/{state}/{suburb}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_category !== null) {
            $queryParams['propertyCategory'] = ObjectSerializer::toQueryValue($property_category, null);
        }
        // query params
        if ($bedrooms !== null) {
            $queryParams['bedrooms'] = ObjectSerializer::toQueryValue($bedrooms, 'int32');
        }
        // query params
        if ($period_size !== null) {
            $queryParams['periodSize'] = ObjectSerializer::toQueryValue($period_size, null);
        }
        // query params
        if ($starting_period_relative_to_current !== null) {
            $queryParams['startingPeriodRelativeToCurrent'] = ObjectSerializer::toQueryValue($starting_period_relative_to_current, 'int32');
        }
        // query params
        if ($total_periods !== null) {
            $queryParams['totalPeriods'] = ObjectSerializer::toQueryValue($total_periods, 'int32');
        }

        // path params
        if ($state !== null) {
            $resourcePath = str_replace(
                '{' . 'state' . '}',
                ObjectSerializer::toPathValue($state),
                $resourcePath
            );
        }
        // path params
        if ($suburb !== null) {
            $resourcePath = str_replace(
                '{' . 'suburb' . '}',
                ObjectSerializer::toPathValue($suburb),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
