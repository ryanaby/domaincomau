<?php
/**
 * AgenciesV2AgencySummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AgenciesV2AgencySummary Class Doc Comment
 *
 * @category Class
 * @description AgencySummary
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgenciesV2AgencySummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Agencies.V2.AgencySummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'in_suburb' => 'bool',
        'query_suburb' => 'string',
        'has_recently_sold' => 'bool',
        'id' => 'int',
        'name' => 'string',
        'suburb' => 'string',
        'logo_url' => 'string',
        'base_url' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'telephone' => 'string',
        'rental_telephone' => 'string',
        'mobile' => 'string',
        'fax' => 'string',
        'state' => 'string',
        'description' => 'string',
        'email' => 'string',
        'rental_email' => 'string',
        'home_page_search_options' => 'string',
        'account_type' => 'int',
        'number_for_sale' => 'int',
        'number_for_rent' => 'int',
        'domain_url' => 'string',
        'show_tab_sold_last_year' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'in_suburb' => null,
        'query_suburb' => null,
        'has_recently_sold' => null,
        'id' => 'int32',
        'name' => null,
        'suburb' => null,
        'logo_url' => null,
        'base_url' => null,
        'address1' => null,
        'address2' => null,
        'telephone' => null,
        'rental_telephone' => null,
        'mobile' => null,
        'fax' => null,
        'state' => null,
        'description' => null,
        'email' => null,
        'rental_email' => null,
        'home_page_search_options' => null,
        'account_type' => 'int32',
        'number_for_sale' => 'int32',
        'number_for_rent' => 'int32',
        'domain_url' => null,
        'show_tab_sold_last_year' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_suburb' => 'inSuburb',
        'query_suburb' => 'querySuburb',
        'has_recently_sold' => 'hasRecentlySold',
        'id' => 'id',
        'name' => 'name',
        'suburb' => 'suburb',
        'logo_url' => 'logoUrl',
        'base_url' => 'baseUrl',
        'address1' => 'address1',
        'address2' => 'address2',
        'telephone' => 'telephone',
        'rental_telephone' => 'rentalTelephone',
        'mobile' => 'mobile',
        'fax' => 'fax',
        'state' => 'state',
        'description' => 'description',
        'email' => 'email',
        'rental_email' => 'rentalEmail',
        'home_page_search_options' => 'homePageSearchOptions',
        'account_type' => 'accountType',
        'number_for_sale' => 'numberForSale',
        'number_for_rent' => 'numberForRent',
        'domain_url' => 'domainUrl',
        'show_tab_sold_last_year' => 'showTabSoldLastYear'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_suburb' => 'setInSuburb',
        'query_suburb' => 'setQuerySuburb',
        'has_recently_sold' => 'setHasRecentlySold',
        'id' => 'setId',
        'name' => 'setName',
        'suburb' => 'setSuburb',
        'logo_url' => 'setLogoUrl',
        'base_url' => 'setBaseUrl',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'telephone' => 'setTelephone',
        'rental_telephone' => 'setRentalTelephone',
        'mobile' => 'setMobile',
        'fax' => 'setFax',
        'state' => 'setState',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'rental_email' => 'setRentalEmail',
        'home_page_search_options' => 'setHomePageSearchOptions',
        'account_type' => 'setAccountType',
        'number_for_sale' => 'setNumberForSale',
        'number_for_rent' => 'setNumberForRent',
        'domain_url' => 'setDomainUrl',
        'show_tab_sold_last_year' => 'setShowTabSoldLastYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_suburb' => 'getInSuburb',
        'query_suburb' => 'getQuerySuburb',
        'has_recently_sold' => 'getHasRecentlySold',
        'id' => 'getId',
        'name' => 'getName',
        'suburb' => 'getSuburb',
        'logo_url' => 'getLogoUrl',
        'base_url' => 'getBaseUrl',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'telephone' => 'getTelephone',
        'rental_telephone' => 'getRentalTelephone',
        'mobile' => 'getMobile',
        'fax' => 'getFax',
        'state' => 'getState',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'rental_email' => 'getRentalEmail',
        'home_page_search_options' => 'getHomePageSearchOptions',
        'account_type' => 'getAccountType',
        'number_for_sale' => 'getNumberForSale',
        'number_for_rent' => 'getNumberForRent',
        'domain_url' => 'getDomainUrl',
        'show_tab_sold_last_year' => 'getShowTabSoldLastYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_suburb'] = isset($data['in_suburb']) ? $data['in_suburb'] : null;
        $this->container['query_suburb'] = isset($data['query_suburb']) ? $data['query_suburb'] : null;
        $this->container['has_recently_sold'] = isset($data['has_recently_sold']) ? $data['has_recently_sold'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['rental_telephone'] = isset($data['rental_telephone']) ? $data['rental_telephone'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['rental_email'] = isset($data['rental_email']) ? $data['rental_email'] : null;
        $this->container['home_page_search_options'] = isset($data['home_page_search_options']) ? $data['home_page_search_options'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['number_for_sale'] = isset($data['number_for_sale']) ? $data['number_for_sale'] : null;
        $this->container['number_for_rent'] = isset($data['number_for_rent']) ? $data['number_for_rent'] : null;
        $this->container['domain_url'] = isset($data['domain_url']) ? $data['domain_url'] : null;
        $this->container['show_tab_sold_last_year'] = isset($data['show_tab_sold_last_year']) ? $data['show_tab_sold_last_year'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_suburb
     *
     * @return bool
     */
    public function getInSuburb()
    {
        return $this->container['in_suburb'];
    }

    /**
     * Sets in_suburb
     *
     * @param bool $in_suburb Gets or Sets InSuburb
     *
     * @return $this
     */
    public function setInSuburb($in_suburb)
    {
        $this->container['in_suburb'] = $in_suburb;

        return $this;
    }

    /**
     * Gets query_suburb
     *
     * @return string
     */
    public function getQuerySuburb()
    {
        return $this->container['query_suburb'];
    }

    /**
     * Sets query_suburb
     *
     * @param string $query_suburb Gets or Sets QuerySuburb
     *
     * @return $this
     */
    public function setQuerySuburb($query_suburb)
    {
        $this->container['query_suburb'] = $query_suburb;

        return $this;
    }

    /**
     * Gets has_recently_sold
     *
     * @return bool
     */
    public function getHasRecentlySold()
    {
        return $this->container['has_recently_sold'];
    }

    /**
     * Sets has_recently_sold
     *
     * @param bool $has_recently_sold Gets or Sets HasRecentlySold
     *
     * @return $this
     */
    public function setHasRecentlySold($has_recently_sold)
    {
        $this->container['has_recently_sold'] = $has_recently_sold;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Gets or Sets Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets or Sets Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Gets or Sets Suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url Gets or Sets LogoUrl
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string $base_url Gets or Sets BaseUrl
     *
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Gets or Sets Address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 Gets or Sets Address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Gets or Sets Telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets rental_telephone
     *
     * @return string
     */
    public function getRentalTelephone()
    {
        return $this->container['rental_telephone'];
    }

    /**
     * Sets rental_telephone
     *
     * @param string $rental_telephone Gets or Sets RentalTelephone
     *
     * @return $this
     */
    public function setRentalTelephone($rental_telephone)
    {
        $this->container['rental_telephone'] = $rental_telephone;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile Gets or Sets Mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax Gets or Sets Fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Gets or Sets State
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Gets or Sets Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Gets or Sets Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets rental_email
     *
     * @return string
     */
    public function getRentalEmail()
    {
        return $this->container['rental_email'];
    }

    /**
     * Sets rental_email
     *
     * @param string $rental_email Gets or Sets RentalEmail
     *
     * @return $this
     */
    public function setRentalEmail($rental_email)
    {
        $this->container['rental_email'] = $rental_email;

        return $this;
    }

    /**
     * Gets home_page_search_options
     *
     * @return string
     */
    public function getHomePageSearchOptions()
    {
        return $this->container['home_page_search_options'];
    }

    /**
     * Sets home_page_search_options
     *
     * @param string $home_page_search_options Gets or Sets HomePageSearchOptions
     *
     * @return $this
     */
    public function setHomePageSearchOptions($home_page_search_options)
    {
        $this->container['home_page_search_options'] = $home_page_search_options;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return int
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param int $account_type Gets or Sets AccountType
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets number_for_sale
     *
     * @return int
     */
    public function getNumberForSale()
    {
        return $this->container['number_for_sale'];
    }

    /**
     * Sets number_for_sale
     *
     * @param int $number_for_sale Gets or Sets NumberForSale
     *
     * @return $this
     */
    public function setNumberForSale($number_for_sale)
    {
        $this->container['number_for_sale'] = $number_for_sale;

        return $this;
    }

    /**
     * Gets number_for_rent
     *
     * @return int
     */
    public function getNumberForRent()
    {
        return $this->container['number_for_rent'];
    }

    /**
     * Sets number_for_rent
     *
     * @param int $number_for_rent Gets or Sets NumberForRent
     *
     * @return $this
     */
    public function setNumberForRent($number_for_rent)
    {
        $this->container['number_for_rent'] = $number_for_rent;

        return $this;
    }

    /**
     * Gets domain_url
     *
     * @return string
     */
    public function getDomainUrl()
    {
        return $this->container['domain_url'];
    }

    /**
     * Sets domain_url
     *
     * @param string $domain_url Gets or Sets DomainUrl
     *
     * @return $this
     */
    public function setDomainUrl($domain_url)
    {
        $this->container['domain_url'] = $domain_url;

        return $this;
    }

    /**
     * Gets show_tab_sold_last_year
     *
     * @return bool
     */
    public function getShowTabSoldLastYear()
    {
        return $this->container['show_tab_sold_last_year'];
    }

    /**
     * Sets show_tab_sold_last_year
     *
     * @param bool $show_tab_sold_last_year Gets or Sets ShowTabSoldLastYear
     *
     * @return $this
     */
    public function setShowTabSoldLastYear($show_tab_sold_last_year)
    {
        $this->container['show_tab_sold_last_year'] = $show_tab_sold_last_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
