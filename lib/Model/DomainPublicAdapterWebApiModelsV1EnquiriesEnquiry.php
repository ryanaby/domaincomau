<?php
/**
 * DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry Class Doc Comment
 *
 * @category Class
 * @description An enquiry with associated reference (eg. listing)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.Public.Adapter.Web.Api.Models.v1.Enquiries.Enquiry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'delivery_method' => 'string',
        'enquiry_type' => 'string',
        'reference_id' => 'int',
        'id' => 'string',
        'sender' => '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender',
        'subject' => 'string',
        'message' => 'string',
        'meta_data' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'delivery_method' => null,
        'enquiry_type' => null,
        'reference_id' => 'int32',
        'id' => null,
        'sender' => null,
        'subject' => null,
        'message' => null,
        'meta_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_method' => 'deliveryMethod',
        'enquiry_type' => 'enquiryType',
        'reference_id' => 'referenceId',
        'id' => 'id',
        'sender' => 'sender',
        'subject' => 'subject',
        'message' => 'message',
        'meta_data' => 'metaData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_method' => 'setDeliveryMethod',
        'enquiry_type' => 'setEnquiryType',
        'reference_id' => 'setReferenceId',
        'id' => 'setId',
        'sender' => 'setSender',
        'subject' => 'setSubject',
        'message' => 'setMessage',
        'meta_data' => 'setMetaData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_method' => 'getDeliveryMethod',
        'enquiry_type' => 'getEnquiryType',
        'reference_id' => 'getReferenceId',
        'id' => 'getId',
        'sender' => 'getSender',
        'subject' => 'getSubject',
        'message' => 'getMessage',
        'meta_data' => 'getMetaData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_METHOD_EMAIL = 'email';
    const DELIVERY_METHOD_SMS = 'sms';
    const ENQUIRY_TYPE_LISTING = 'listing';
    const ENQUIRY_TYPE_DEV_PROJECT = 'devProject';
    const ENQUIRY_TYPE_NEW_DEV_LANDING = 'newDevLanding';
    const ENQUIRY_TYPE_AGENCY_PROFILE = 'agencyProfile';
    const ENQUIRY_TYPE_AGENT_PROFILE = 'agentProfile';
    const ENQUIRY_TYPE_CONTRACT_REQUEST = 'contractRequest';
    const ENQUIRY_TYPE_VENDOR_ENQUIRY = 'vendorEnquiry';
    const ENQUIRY_TYPE_PRE_PORTAL_LISTING = 'prePortalListing';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_EMAIL,
            self::DELIVERY_METHOD_SMS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnquiryTypeAllowableValues()
    {
        return [
            self::ENQUIRY_TYPE_LISTING,
            self::ENQUIRY_TYPE_DEV_PROJECT,
            self::ENQUIRY_TYPE_NEW_DEV_LANDING,
            self::ENQUIRY_TYPE_AGENCY_PROFILE,
            self::ENQUIRY_TYPE_AGENT_PROFILE,
            self::ENQUIRY_TYPE_CONTRACT_REQUEST,
            self::ENQUIRY_TYPE_VENDOR_ENQUIRY,
            self::ENQUIRY_TYPE_PRE_PORTAL_LISTING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_method'] = isset($data['delivery_method']) ? $data['delivery_method'] : null;
        $this->container['enquiry_type'] = isset($data['enquiry_type']) ? $data['enquiry_type'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnquiryTypeAllowableValues();
        if (!is_null($this->container['enquiry_type']) && !in_array($this->container['enquiry_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'enquiry_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method Delivery method of the enquiry
     *
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($delivery_method) && !in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets enquiry_type
     *
     * @return string
     */
    public function getEnquiryType()
    {
        return $this->container['enquiry_type'];
    }

    /**
     * Sets enquiry_type
     *
     * @param string $enquiry_type Type of enquiry
     *
     * @return $this
     */
    public function setEnquiryType($enquiry_type)
    {
        $allowedValues = $this->getEnquiryTypeAllowableValues();
        if (!is_null($enquiry_type) && !in_array($enquiry_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'enquiry_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enquiry_type'] = $enquiry_type;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int $reference_id Listing identifier
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Enquiry identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1EnquiriesSender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Enquiry subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Enquiry message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return map[string,string]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param map[string,string] $meta_data MetaData of the enquiry
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
