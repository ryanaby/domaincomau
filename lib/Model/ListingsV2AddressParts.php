<?php
/**
 * ListingsV2AddressParts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingsV2AddressParts Class Doc Comment
 *
 * @category Class
 * @description Encapsulates the parts that make up an Address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsV2AddressParts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Listings.V2.AddressParts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state_abbreviation' => 'string',
        'display_type' => 'string',
        'street_number' => 'string',
        'unit_number' => 'string',
        'street' => 'string',
        'suburb' => 'string',
        'suburb_id' => 'int',
        'postcode' => 'string',
        'display_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'state_abbreviation' => null,
        'display_type' => null,
        'street_number' => null,
        'unit_number' => null,
        'street' => null,
        'suburb' => null,
        'suburb_id' => 'int32',
        'postcode' => null,
        'display_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state_abbreviation' => 'stateAbbreviation',
        'display_type' => 'displayType',
        'street_number' => 'streetNumber',
        'unit_number' => 'unitNumber',
        'street' => 'street',
        'suburb' => 'suburb',
        'suburb_id' => 'suburbId',
        'postcode' => 'postcode',
        'display_address' => 'displayAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state_abbreviation' => 'setStateAbbreviation',
        'display_type' => 'setDisplayType',
        'street_number' => 'setStreetNumber',
        'unit_number' => 'setUnitNumber',
        'street' => 'setStreet',
        'suburb' => 'setSuburb',
        'suburb_id' => 'setSuburbId',
        'postcode' => 'setPostcode',
        'display_address' => 'setDisplayAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state_abbreviation' => 'getStateAbbreviation',
        'display_type' => 'getDisplayType',
        'street_number' => 'getStreetNumber',
        'unit_number' => 'getUnitNumber',
        'street' => 'getStreet',
        'suburb' => 'getSuburb',
        'suburb_id' => 'getSuburbId',
        'postcode' => 'getPostcode',
        'display_address' => 'getDisplayAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ABBREVIATION_NSW = 'nsw';
    const STATE_ABBREVIATION_VIC = 'vic';
    const STATE_ABBREVIATION_SA = 'sa';
    const STATE_ABBREVIATION_NT = 'nt';
    const STATE_ABBREVIATION_TAS = 'tas';
    const STATE_ABBREVIATION_ACT = 'act';
    const STATE_ABBREVIATION_QLD = 'qld';
    const STATE_ABBREVIATION_WA = 'wa';
    const DISPLAY_TYPE_FULL_ADDRESS = 'fullAddress';
    const DISPLAY_TYPE_STREET_AND_SUBURB = 'streetAndSuburb';
    const DISPLAY_TYPE_SUBURB_ONLY = 'suburbOnly';
    const DISPLAY_TYPE_REGION_ONLY = 'regionOnly';
    const DISPLAY_TYPE_AREA_ONLY = 'areaOnly';
    const DISPLAY_TYPE_STATE_ONLY = 'stateOnly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAbbreviationAllowableValues()
    {
        return [
            self::STATE_ABBREVIATION_NSW,
            self::STATE_ABBREVIATION_VIC,
            self::STATE_ABBREVIATION_SA,
            self::STATE_ABBREVIATION_NT,
            self::STATE_ABBREVIATION_TAS,
            self::STATE_ABBREVIATION_ACT,
            self::STATE_ABBREVIATION_QLD,
            self::STATE_ABBREVIATION_WA,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayTypeAllowableValues()
    {
        return [
            self::DISPLAY_TYPE_FULL_ADDRESS,
            self::DISPLAY_TYPE_STREET_AND_SUBURB,
            self::DISPLAY_TYPE_SUBURB_ONLY,
            self::DISPLAY_TYPE_REGION_ONLY,
            self::DISPLAY_TYPE_AREA_ONLY,
            self::DISPLAY_TYPE_STATE_ONLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state_abbreviation'] = isset($data['state_abbreviation']) ? $data['state_abbreviation'] : null;
        $this->container['display_type'] = isset($data['display_type']) ? $data['display_type'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['suburb_id'] = isset($data['suburb_id']) ? $data['suburb_id'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['display_address'] = isset($data['display_address']) ? $data['display_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAbbreviationAllowableValues();
        if (!is_null($this->container['state_abbreviation']) && !in_array($this->container['state_abbreviation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state_abbreviation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!is_null($this->container['display_type']) && !in_array($this->container['display_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'display_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state_abbreviation
     *
     * @return string
     */
    public function getStateAbbreviation()
    {
        return $this->container['state_abbreviation'];
    }

    /**
     * Sets state_abbreviation
     *
     * @param string $state_abbreviation Gets or Sets StateAbbreviation
     *
     * @return $this
     */
    public function setStateAbbreviation($state_abbreviation)
    {
        $allowedValues = $this->getStateAbbreviationAllowableValues();
        if (!is_null($state_abbreviation) && !in_array($state_abbreviation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state_abbreviation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state_abbreviation'] = $state_abbreviation;

        return $this;
    }

    /**
     * Gets display_type
     *
     * @return string
     */
    public function getDisplayType()
    {
        return $this->container['display_type'];
    }

    /**
     * Sets display_type
     *
     * @param string $display_type Gets or Sets DisplayType
     *
     * @return $this
     */
    public function setDisplayType($display_type)
    {
        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!is_null($display_type) && !in_array($display_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'display_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_type'] = $display_type;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number Street number
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number Unit number.
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street address
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Suburb of the address
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets suburb_id
     *
     * @return int
     */
    public function getSuburbId()
    {
        return $this->container['suburb_id'];
    }

    /**
     * Sets suburb_id
     *
     * @param int $suburb_id Domain suburb identifier for address lookup via the domain location api
     *
     * @return $this
     */
    public function setSuburbId($suburb_id)
    {
        $this->container['suburb_id'] = $suburb_id;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Postcode of the address
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets display_address
     *
     * @return string
     */
    public function getDisplayAddress()
    {
        return $this->container['display_address'];
    }

    /**
     * Sets display_address
     *
     * @param string $display_address Advertiser's preference in displaying their listing's address
     *
     * @return $this
     */
    public function setDisplayAddress($display_address)
    {
        $this->container['display_address'] = $display_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
