<?php
/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingStatementOfInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'estimated_price' => '\Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice',
        'comparable_data' => '\Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData',
        'suburb_median_price' => '\Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData',
        'documentation_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'estimated_price' => null,
        'comparable_data' => null,
        'suburb_median_price' => null,
        'documentation_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'estimated_price' => 'estimatedPrice',
        'comparable_data' => 'comparableData',
        'suburb_median_price' => 'suburbMedianPrice',
        'documentation_url' => 'documentationUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'estimated_price' => 'setEstimatedPrice',
        'comparable_data' => 'setComparableData',
        'suburb_median_price' => 'setSuburbMedianPrice',
        'documentation_url' => 'setDocumentationUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'estimated_price' => 'getEstimatedPrice',
        'comparable_data' => 'getComparableData',
        'suburb_median_price' => 'getSuburbMedianPrice',
        'documentation_url' => 'getDocumentationUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['estimated_price'] = isset($data['estimated_price']) ? $data['estimated_price'] : null;
        $this->container['comparable_data'] = isset($data['comparable_data']) ? $data['comparable_data'] : null;
        $this->container['suburb_median_price'] = isset($data['suburb_median_price']) ? $data['suburb_median_price'] : null;
        $this->container['documentation_url'] = isset($data['documentation_url']) ? $data['documentation_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets estimated_price
     *
     * @return \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
     */
    public function getEstimatedPrice()
    {
        return $this->container['estimated_price'];
    }

    /**
     * Sets estimated_price
     *
     * @param \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice $estimated_price estimated_price
     *
     * @return $this
     */
    public function setEstimatedPrice($estimated_price)
    {
        $this->container['estimated_price'] = $estimated_price;

        return $this;
    }

    /**
     * Gets comparable_data
     *
     * @return \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
     */
    public function getComparableData()
    {
        return $this->container['comparable_data'];
    }

    /**
     * Sets comparable_data
     *
     * @param \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData $comparable_data comparable_data
     *
     * @return $this
     */
    public function setComparableData($comparable_data)
    {
        $this->container['comparable_data'] = $comparable_data;

        return $this;
    }

    /**
     * Gets suburb_median_price
     *
     * @return \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    public function getSuburbMedianPrice()
    {
        return $this->container['suburb_median_price'];
    }

    /**
     * Sets suburb_median_price
     *
     * @param \Swagger\Client\Model\DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData $suburb_median_price suburb_median_price
     *
     * @return $this
     */
    public function setSuburbMedianPrice($suburb_median_price)
    {
        $this->container['suburb_median_price'] = $suburb_median_price;

        return $this;
    }

    /**
     * Gets documentation_url
     *
     * @return string
     */
    public function getDocumentationUrl()
    {
        return $this->container['documentation_url'];
    }

    /**
     * Sets documentation_url
     *
     * @param string $documentation_url documentation_url
     *
     * @return $this
     */
    public function setDocumentationUrl($documentation_url)
    {
        $this->container['documentation_url'] = $documentation_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
