<?php
/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingMedianPriceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'price_type' => 'string',
        'suburb' => 'string',
        'postcode' => 'string',
        'median_price' => 'int',
        'source' => 'string',
        'source_date_from' => 'string',
        'source_date_to' => 'string',
        'source_collection_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'price_type' => null,
        'suburb' => null,
        'postcode' => null,
        'median_price' => 'int32',
        'source' => null,
        'source_date_from' => null,
        'source_date_to' => null,
        'source_collection_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'price_type' => 'priceType',
        'suburb' => 'suburb',
        'postcode' => 'postcode',
        'median_price' => 'medianPrice',
        'source' => 'source',
        'source_date_from' => 'sourceDateFrom',
        'source_date_to' => 'sourceDateTo',
        'source_collection_date' => 'sourceCollectionDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'price_type' => 'setPriceType',
        'suburb' => 'setSuburb',
        'postcode' => 'setPostcode',
        'median_price' => 'setMedianPrice',
        'source' => 'setSource',
        'source_date_from' => 'setSourceDateFrom',
        'source_date_to' => 'setSourceDateTo',
        'source_collection_date' => 'setSourceCollectionDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'price_type' => 'getPriceType',
        'suburb' => 'getSuburb',
        'postcode' => 'getPostcode',
        'median_price' => 'getMedianPrice',
        'source' => 'getSource',
        'source_date_from' => 'getSourceDateFrom',
        'source_date_to' => 'getSourceDateTo',
        'source_collection_date' => 'getSourceCollectionDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRICE_TYPE_HOUSE = 'house';
    const PRICE_TYPE_APARTMENT_UNIT_FLAT = 'apartmentUnitFlat';
    const PRICE_TYPE_VACANT_LAND = 'vacantLand';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceTypeAllowableValues()
    {
        return [
            self::PRICE_TYPE_HOUSE,
            self::PRICE_TYPE_APARTMENT_UNIT_FLAT,
            self::PRICE_TYPE_VACANT_LAND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['median_price'] = isset($data['median_price']) ? $data['median_price'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_date_from'] = isset($data['source_date_from']) ? $data['source_date_from'] : null;
        $this->container['source_date_to'] = isset($data['source_date_to']) ? $data['source_date_to'] : null;
        $this->container['source_collection_date'] = isset($data['source_collection_date']) ? $data['source_collection_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($this->container['price_type']) && !in_array($this->container['price_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'price_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets price_type
     *
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param string $price_type price_type
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($price_type) && !in_array($price_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'price_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets median_price
     *
     * @return int
     */
    public function getMedianPrice()
    {
        return $this->container['median_price'];
    }

    /**
     * Sets median_price
     *
     * @param int $median_price median_price
     *
     * @return $this
     */
    public function setMedianPrice($median_price)
    {
        $this->container['median_price'] = $median_price;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_date_from
     *
     * @return string
     */
    public function getSourceDateFrom()
    {
        return $this->container['source_date_from'];
    }

    /**
     * Sets source_date_from
     *
     * @param string $source_date_from source_date_from
     *
     * @return $this
     */
    public function setSourceDateFrom($source_date_from)
    {
        $this->container['source_date_from'] = $source_date_from;

        return $this;
    }

    /**
     * Gets source_date_to
     *
     * @return string
     */
    public function getSourceDateTo()
    {
        return $this->container['source_date_to'];
    }

    /**
     * Sets source_date_to
     *
     * @param string $source_date_to source_date_to
     *
     * @return $this
     */
    public function setSourceDateTo($source_date_to)
    {
        $this->container['source_date_to'] = $source_date_to;

        return $this;
    }

    /**
     * Gets source_collection_date
     *
     * @return string
     */
    public function getSourceCollectionDate()
    {
        return $this->container['source_collection_date'];
    }

    /**
     * Sets source_collection_date
     *
     * @param string $source_collection_date source_collection_date
     *
     * @return $this
     */
    public function setSourceCollectionDate($source_collection_date)
    {
        $this->container['source_collection_date'] = $source_collection_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
