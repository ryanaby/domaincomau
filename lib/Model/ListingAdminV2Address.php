<?php
/**
 * ListingAdminV2Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingAdminV2Address Class Doc Comment
 *
 * @category Class
 * @description Address structure for property
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingAdminV2Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingAdmin.v2.Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_number' => 'string',
        'street' => 'string',
        'display_option' => 'string',
        'suggested_geo_location' => '\Swagger\Client\Model\ListingAdminV2GeoLocation',
        'street_number' => 'string',
        'suburb' => 'string',
        'postcode' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_number' => null,
        'street' => null,
        'display_option' => null,
        'suggested_geo_location' => null,
        'street_number' => null,
        'suburb' => null,
        'postcode' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_number' => 'unitNumber',
        'street' => 'street',
        'display_option' => 'displayOption',
        'suggested_geo_location' => 'suggestedGeoLocation',
        'street_number' => 'streetNumber',
        'suburb' => 'suburb',
        'postcode' => 'postcode',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_number' => 'setUnitNumber',
        'street' => 'setStreet',
        'display_option' => 'setDisplayOption',
        'suggested_geo_location' => 'setSuggestedGeoLocation',
        'street_number' => 'setStreetNumber',
        'suburb' => 'setSuburb',
        'postcode' => 'setPostcode',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_number' => 'getUnitNumber',
        'street' => 'getStreet',
        'display_option' => 'getDisplayOption',
        'suggested_geo_location' => 'getSuggestedGeoLocation',
        'street_number' => 'getStreetNumber',
        'suburb' => 'getSuburb',
        'postcode' => 'getPostcode',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISPLAY_OPTION_UNSPECIFIED = 'unspecified';
    const DISPLAY_OPTION_FULL_ADDRESS = 'fullAddress';
    const DISPLAY_OPTION_STREET_AND_SUBURB = 'streetAndSuburb';
    const DISPLAY_OPTION_SUBURB_ONLY = 'suburbOnly';
    const DISPLAY_OPTION_REGION_ONLY = 'regionOnly';
    const DISPLAY_OPTION_AREA_ONLY = 'areaOnly';
    const DISPLAY_OPTION_STATE_ONLY = 'stateOnly';
    const STATE_NSW = 'nsw';
    const STATE_VIC = 'vic';
    const STATE_ACT = 'act';
    const STATE_SA = 'sa';
    const STATE_WA = 'wa';
    const STATE_TAS = 'tas';
    const STATE_QLD = 'qld';
    const STATE_NT = 'nt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayOptionAllowableValues()
    {
        return [
            self::DISPLAY_OPTION_UNSPECIFIED,
            self::DISPLAY_OPTION_FULL_ADDRESS,
            self::DISPLAY_OPTION_STREET_AND_SUBURB,
            self::DISPLAY_OPTION_SUBURB_ONLY,
            self::DISPLAY_OPTION_REGION_ONLY,
            self::DISPLAY_OPTION_AREA_ONLY,
            self::DISPLAY_OPTION_STATE_ONLY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_NSW
            self::STATE_VIC
            self::STATE_ACT
            self::STATE_SA
            self::STATE_WA
            self::STATE_TAS
            self::STATE_QLD
            self::STATE_NT
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['display_option'] = isset($data['display_option']) ? $data['display_option'] : null;
        $this->container['suggested_geo_location'] = isset($data['suggested_geo_location']) ? $data['suggested_geo_location'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        $allowedValues = $this->getDisplayOptionAllowableValues();
        if (!is_null($this->container['display_option']) && !in_array($this->container['display_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'display_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['suburb'] === null) {
            $invalidProperties[] = "'suburb' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number Unit number for apartments, maximum 30 characters
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street name, maximum 100 characters
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets display_option
     *
     * @return string
     */
    public function getDisplayOption()
    {
        return $this->container['display_option'];
    }

    /**
     * Sets display_option
     *
     * @param string $display_option What granularity to display the properties location at.   For residential listings, the accepted displayOption values are \"FullAddress\", \"StreetAndSuburb\" or \"SuburbOnly\".
     *
     * @return $this
     */
    public function setDisplayOption($display_option)
    {
        $allowedValues = $this->getDisplayOptionAllowableValues();
        if (!is_null($display_option) && !in_array($display_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'display_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_option'] = $display_option;

        return $this;
    }

    /**
     * Gets suggested_geo_location
     *
     * @return \Swagger\Client\Model\ListingAdminV2GeoLocation
     */
    public function getSuggestedGeoLocation()
    {
        return $this->container['suggested_geo_location'];
    }

    /**
     * Sets suggested_geo_location
     *
     * @param \Swagger\Client\Model\ListingAdminV2GeoLocation $suggested_geo_location suggested_geo_location
     *
     * @return $this
     */
    public function setSuggestedGeoLocation($suggested_geo_location)
    {
        $this->container['suggested_geo_location'] = $suggested_geo_location;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number Street number, maximum 20 characters
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Suburb name , maximum 50 characters
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
