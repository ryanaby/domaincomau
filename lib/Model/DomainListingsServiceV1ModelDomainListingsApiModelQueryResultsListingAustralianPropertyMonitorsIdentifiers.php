<?php
/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_id' => 'int',
        'street_id' => 'int',
        'suburb_id' => 'int',
        'cadastre_id' => 'int',
        'postcode_id' => 'int',
        'state_id' => 'int',
        'state' => 'string',
        'property_type_id' => 'int',
        'property_type_category_id' => 'int',
        'flat_number' => 'string',
        'street_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_id' => 'int32',
        'street_id' => 'int32',
        'suburb_id' => 'int32',
        'cadastre_id' => 'int64',
        'postcode_id' => 'int32',
        'state_id' => 'int32',
        'state' => null,
        'property_type_id' => 'int32',
        'property_type_category_id' => 'int32',
        'flat_number' => null,
        'street_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_id' => 'addressId',
        'street_id' => 'streetId',
        'suburb_id' => 'suburbId',
        'cadastre_id' => 'cadastreId',
        'postcode_id' => 'postcodeId',
        'state_id' => 'stateId',
        'state' => 'state',
        'property_type_id' => 'propertyTypeId',
        'property_type_category_id' => 'propertyTypeCategoryId',
        'flat_number' => 'flatNumber',
        'street_number' => 'streetNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_id' => 'setAddressId',
        'street_id' => 'setStreetId',
        'suburb_id' => 'setSuburbId',
        'cadastre_id' => 'setCadastreId',
        'postcode_id' => 'setPostcodeId',
        'state_id' => 'setStateId',
        'state' => 'setState',
        'property_type_id' => 'setPropertyTypeId',
        'property_type_category_id' => 'setPropertyTypeCategoryId',
        'flat_number' => 'setFlatNumber',
        'street_number' => 'setStreetNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_id' => 'getAddressId',
        'street_id' => 'getStreetId',
        'suburb_id' => 'getSuburbId',
        'cadastre_id' => 'getCadastreId',
        'postcode_id' => 'getPostcodeId',
        'state_id' => 'getStateId',
        'state' => 'getState',
        'property_type_id' => 'getPropertyTypeId',
        'property_type_category_id' => 'getPropertyTypeCategoryId',
        'flat_number' => 'getFlatNumber',
        'street_number' => 'getStreetNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['street_id'] = isset($data['street_id']) ? $data['street_id'] : null;
        $this->container['suburb_id'] = isset($data['suburb_id']) ? $data['suburb_id'] : null;
        $this->container['cadastre_id'] = isset($data['cadastre_id']) ? $data['cadastre_id'] : null;
        $this->container['postcode_id'] = isset($data['postcode_id']) ? $data['postcode_id'] : null;
        $this->container['state_id'] = isset($data['state_id']) ? $data['state_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['property_type_id'] = isset($data['property_type_id']) ? $data['property_type_id'] : null;
        $this->container['property_type_category_id'] = isset($data['property_type_category_id']) ? $data['property_type_category_id'] : null;
        $this->container['flat_number'] = isset($data['flat_number']) ? $data['flat_number'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_id
     *
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param int $address_id address_id
     *
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets street_id
     *
     * @return int
     */
    public function getStreetId()
    {
        return $this->container['street_id'];
    }

    /**
     * Sets street_id
     *
     * @param int $street_id street_id
     *
     * @return $this
     */
    public function setStreetId($street_id)
    {
        $this->container['street_id'] = $street_id;

        return $this;
    }

    /**
     * Gets suburb_id
     *
     * @return int
     */
    public function getSuburbId()
    {
        return $this->container['suburb_id'];
    }

    /**
     * Sets suburb_id
     *
     * @param int $suburb_id suburb_id
     *
     * @return $this
     */
    public function setSuburbId($suburb_id)
    {
        $this->container['suburb_id'] = $suburb_id;

        return $this;
    }

    /**
     * Gets cadastre_id
     *
     * @return int
     */
    public function getCadastreId()
    {
        return $this->container['cadastre_id'];
    }

    /**
     * Sets cadastre_id
     *
     * @param int $cadastre_id cadastre_id
     *
     * @return $this
     */
    public function setCadastreId($cadastre_id)
    {
        $this->container['cadastre_id'] = $cadastre_id;

        return $this;
    }

    /**
     * Gets postcode_id
     *
     * @return int
     */
    public function getPostcodeId()
    {
        return $this->container['postcode_id'];
    }

    /**
     * Sets postcode_id
     *
     * @param int $postcode_id postcode_id
     *
     * @return $this
     */
    public function setPostcodeId($postcode_id)
    {
        $this->container['postcode_id'] = $postcode_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return int
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param int $state_id state_id
     *
     * @return $this
     */
    public function setStateId($state_id)
    {
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets property_type_id
     *
     * @return int
     */
    public function getPropertyTypeId()
    {
        return $this->container['property_type_id'];
    }

    /**
     * Sets property_type_id
     *
     * @param int $property_type_id property_type_id
     *
     * @return $this
     */
    public function setPropertyTypeId($property_type_id)
    {
        $this->container['property_type_id'] = $property_type_id;

        return $this;
    }

    /**
     * Gets property_type_category_id
     *
     * @return int
     */
    public function getPropertyTypeCategoryId()
    {
        return $this->container['property_type_category_id'];
    }

    /**
     * Sets property_type_category_id
     *
     * @param int $property_type_category_id property_type_category_id
     *
     * @return $this
     */
    public function setPropertyTypeCategoryId($property_type_category_id)
    {
        $this->container['property_type_category_id'] = $property_type_category_id;

        return $this;
    }

    /**
     * Gets flat_number
     *
     * @return string
     */
    public function getFlatNumber()
    {
        return $this->container['flat_number'];
    }

    /**
     * Sets flat_number
     *
     * @param string $flat_number flat_number
     *
     * @return $this
     */
    public function setFlatNumber($flat_number)
    {
        $this->container['flat_number'] = $flat_number;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number street_number
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
