<?php
/**
 * PropertiesV1SaleActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertiesV1SaleActivity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesV1SaleActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Properties.v1.SaleActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agency' => 'string',
        'agency_colour' => 'string',
        'agency_id' => 'int',
        'agency_logo' => 'string',
        'agency_url' => 'string',
        'apm_agency_id' => 'int',
        'date' => '\DateTime',
        'days_on_market' => 'double',
        'documented_as_sold' => 'bool',
        'price' => 'int',
        'reported_as_sold' => 'bool',
        'suppress_details' => 'bool',
        'suppress_price' => 'bool',
        'type' => 'string',
        'url' => 'string',
        'first' => '\Swagger\Client\Model\PropertiesV1ActivityBoundary',
        'id' => 'int',
        'last' => '\Swagger\Client\Model\PropertiesV1ActivityBoundary',
        'property_type' => 'string',
        'listing_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agency' => null,
        'agency_colour' => null,
        'agency_id' => 'int32',
        'agency_logo' => null,
        'agency_url' => null,
        'apm_agency_id' => 'int32',
        'date' => 'date-time',
        'days_on_market' => 'double',
        'documented_as_sold' => null,
        'price' => 'int32',
        'reported_as_sold' => null,
        'suppress_details' => null,
        'suppress_price' => null,
        'type' => null,
        'url' => null,
        'first' => null,
        'id' => 'int64',
        'last' => null,
        'property_type' => null,
        'listing_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agency' => 'agency',
        'agency_colour' => 'agencyColour',
        'agency_id' => 'agencyId',
        'agency_logo' => 'agencyLogo',
        'agency_url' => 'agencyUrl',
        'apm_agency_id' => 'apmAgencyId',
        'date' => 'date',
        'days_on_market' => 'daysOnMarket',
        'documented_as_sold' => 'documentedAsSold',
        'price' => 'price',
        'reported_as_sold' => 'reportedAsSold',
        'suppress_details' => 'suppressDetails',
        'suppress_price' => 'suppressPrice',
        'type' => 'type',
        'url' => 'url',
        'first' => 'first',
        'id' => 'id',
        'last' => 'last',
        'property_type' => 'propertyType',
        'listing_id' => 'listingId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agency' => 'setAgency',
        'agency_colour' => 'setAgencyColour',
        'agency_id' => 'setAgencyId',
        'agency_logo' => 'setAgencyLogo',
        'agency_url' => 'setAgencyUrl',
        'apm_agency_id' => 'setApmAgencyId',
        'date' => 'setDate',
        'days_on_market' => 'setDaysOnMarket',
        'documented_as_sold' => 'setDocumentedAsSold',
        'price' => 'setPrice',
        'reported_as_sold' => 'setReportedAsSold',
        'suppress_details' => 'setSuppressDetails',
        'suppress_price' => 'setSuppressPrice',
        'type' => 'setType',
        'url' => 'setUrl',
        'first' => 'setFirst',
        'id' => 'setId',
        'last' => 'setLast',
        'property_type' => 'setPropertyType',
        'listing_id' => 'setListingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agency' => 'getAgency',
        'agency_colour' => 'getAgencyColour',
        'agency_id' => 'getAgencyId',
        'agency_logo' => 'getAgencyLogo',
        'agency_url' => 'getAgencyUrl',
        'apm_agency_id' => 'getApmAgencyId',
        'date' => 'getDate',
        'days_on_market' => 'getDaysOnMarket',
        'documented_as_sold' => 'getDocumentedAsSold',
        'price' => 'getPrice',
        'reported_as_sold' => 'getReportedAsSold',
        'suppress_details' => 'getSuppressDetails',
        'suppress_price' => 'getSuppressPrice',
        'type' => 'getType',
        'url' => 'getUrl',
        'first' => 'getFirst',
        'id' => 'getId',
        'last' => 'getLast',
        'property_type' => 'getPropertyType',
        'listing_id' => 'getListingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agency'] = isset($data['agency']) ? $data['agency'] : null;
        $this->container['agency_colour'] = isset($data['agency_colour']) ? $data['agency_colour'] : null;
        $this->container['agency_id'] = isset($data['agency_id']) ? $data['agency_id'] : null;
        $this->container['agency_logo'] = isset($data['agency_logo']) ? $data['agency_logo'] : null;
        $this->container['agency_url'] = isset($data['agency_url']) ? $data['agency_url'] : null;
        $this->container['apm_agency_id'] = isset($data['apm_agency_id']) ? $data['apm_agency_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['days_on_market'] = isset($data['days_on_market']) ? $data['days_on_market'] : null;
        $this->container['documented_as_sold'] = isset($data['documented_as_sold']) ? $data['documented_as_sold'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['reported_as_sold'] = isset($data['reported_as_sold']) ? $data['reported_as_sold'] : null;
        $this->container['suppress_details'] = isset($data['suppress_details']) ? $data['suppress_details'] : null;
        $this->container['suppress_price'] = isset($data['suppress_price']) ? $data['suppress_price'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['first'] = isset($data['first']) ? $data['first'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agency
     *
     * @return string
     */
    public function getAgency()
    {
        return $this->container['agency'];
    }

    /**
     * Sets agency
     *
     * @param string $agency Gets or Sets Agency
     *
     * @return $this
     */
    public function setAgency($agency)
    {
        $this->container['agency'] = $agency;

        return $this;
    }

    /**
     * Gets agency_colour
     *
     * @return string
     */
    public function getAgencyColour()
    {
        return $this->container['agency_colour'];
    }

    /**
     * Sets agency_colour
     *
     * @param string $agency_colour Gets or Sets AgencyColour
     *
     * @return $this
     */
    public function setAgencyColour($agency_colour)
    {
        $this->container['agency_colour'] = $agency_colour;

        return $this;
    }

    /**
     * Gets agency_id
     *
     * @return int
     */
    public function getAgencyId()
    {
        return $this->container['agency_id'];
    }

    /**
     * Sets agency_id
     *
     * @param int $agency_id Gets or Sets AgencyId
     *
     * @return $this
     */
    public function setAgencyId($agency_id)
    {
        $this->container['agency_id'] = $agency_id;

        return $this;
    }

    /**
     * Gets agency_logo
     *
     * @return string
     */
    public function getAgencyLogo()
    {
        return $this->container['agency_logo'];
    }

    /**
     * Sets agency_logo
     *
     * @param string $agency_logo Gets or Sets AgencyLogo
     *
     * @return $this
     */
    public function setAgencyLogo($agency_logo)
    {
        $this->container['agency_logo'] = $agency_logo;

        return $this;
    }

    /**
     * Gets agency_url
     *
     * @return string
     */
    public function getAgencyUrl()
    {
        return $this->container['agency_url'];
    }

    /**
     * Sets agency_url
     *
     * @param string $agency_url Gets or Sets AgencyUrl
     *
     * @return $this
     */
    public function setAgencyUrl($agency_url)
    {
        $this->container['agency_url'] = $agency_url;

        return $this;
    }

    /**
     * Gets apm_agency_id
     *
     * @return int
     */
    public function getApmAgencyId()
    {
        return $this->container['apm_agency_id'];
    }

    /**
     * Sets apm_agency_id
     *
     * @param int $apm_agency_id Gets or Sets ApmAgencyId
     *
     * @return $this
     */
    public function setApmAgencyId($apm_agency_id)
    {
        $this->container['apm_agency_id'] = $apm_agency_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Gets or Sets Date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets days_on_market
     *
     * @return double
     */
    public function getDaysOnMarket()
    {
        return $this->container['days_on_market'];
    }

    /**
     * Sets days_on_market
     *
     * @param double $days_on_market Gets or Sets DaysOnMarket
     *
     * @return $this
     */
    public function setDaysOnMarket($days_on_market)
    {
        $this->container['days_on_market'] = $days_on_market;

        return $this;
    }

    /**
     * Gets documented_as_sold
     *
     * @return bool
     */
    public function getDocumentedAsSold()
    {
        return $this->container['documented_as_sold'];
    }

    /**
     * Sets documented_as_sold
     *
     * @param bool $documented_as_sold Gets or Sets DocumentedAsSold
     *
     * @return $this
     */
    public function setDocumentedAsSold($documented_as_sold)
    {
        $this->container['documented_as_sold'] = $documented_as_sold;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price Gets or Sets Price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets reported_as_sold
     *
     * @return bool
     */
    public function getReportedAsSold()
    {
        return $this->container['reported_as_sold'];
    }

    /**
     * Sets reported_as_sold
     *
     * @param bool $reported_as_sold Gets or Sets ReportedAsSold
     *
     * @return $this
     */
    public function setReportedAsSold($reported_as_sold)
    {
        $this->container['reported_as_sold'] = $reported_as_sold;

        return $this;
    }

    /**
     * Gets suppress_details
     *
     * @return bool
     */
    public function getSuppressDetails()
    {
        return $this->container['suppress_details'];
    }

    /**
     * Sets suppress_details
     *
     * @param bool $suppress_details Gets or Sets SuppressDetails
     *
     * @return $this
     */
    public function setSuppressDetails($suppress_details)
    {
        $this->container['suppress_details'] = $suppress_details;

        return $this;
    }

    /**
     * Gets suppress_price
     *
     * @return bool
     */
    public function getSuppressPrice()
    {
        return $this->container['suppress_price'];
    }

    /**
     * Sets suppress_price
     *
     * @param bool $suppress_price Gets or Sets SuppressPrice
     *
     * @return $this
     */
    public function setSuppressPrice($suppress_price)
    {
        $this->container['suppress_price'] = $suppress_price;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Gets or Sets Type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Gets or Sets Url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets first
     *
     * @return \Swagger\Client\Model\PropertiesV1ActivityBoundary
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param \Swagger\Client\Model\PropertiesV1ActivityBoundary $first first
     *
     * @return $this
     */
    public function setFirst($first)
    {
        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Gets or Sets Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last
     *
     * @return \Swagger\Client\Model\PropertiesV1ActivityBoundary
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param \Swagger\Client\Model\PropertiesV1ActivityBoundary $last last
     *
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Gets or Sets PropertyType
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id listing_id
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
