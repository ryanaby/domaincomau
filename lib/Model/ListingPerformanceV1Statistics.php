<?php
/**
 * ListingPerformanceV1Statistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingPerformanceV1Statistics Class Doc Comment
 *
 * @category Class
 * @description Listing statistics
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingPerformanceV1Statistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingPerformance.v1.Statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listing_id' => 'int',
        'total_listing_views' => 'int',
        'total_photo_views' => 'int',
        'total_photo_gallery_views' => 'int',
        'total_floorplan_views' => 'int',
        'total_map_views' => 'int',
        'total_video_views' => 'int',
        'total_ebrochure_views' => 'int',
        'total_agent_detail_views' => 'int',
        'total_shortlisted' => 'int',
        'total_printed' => 'int',
        'total_agent_phone_number_reveals' => 'int',
        'total_enquiries' => 'int',
        'total_email_to_friend' => 'int',
        'total_shared_via_social_media' => 'int',
        'total_inspection_time_saving' => 'int',
        'total_call_to_agent_from_mobile' => 'int',
        'percentage_website_views' => 'double',
        'percentage_mobile_site_views' => 'double',
        'percentage_smart_phone_views' => 'double',
        'percentage_tablet_views' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listing_id' => 'int64',
        'total_listing_views' => 'int32',
        'total_photo_views' => 'int32',
        'total_photo_gallery_views' => 'int32',
        'total_floorplan_views' => 'int32',
        'total_map_views' => 'int32',
        'total_video_views' => 'int32',
        'total_ebrochure_views' => 'int32',
        'total_agent_detail_views' => 'int32',
        'total_shortlisted' => 'int32',
        'total_printed' => 'int32',
        'total_agent_phone_number_reveals' => 'int32',
        'total_enquiries' => 'int32',
        'total_email_to_friend' => 'int32',
        'total_shared_via_social_media' => 'int32',
        'total_inspection_time_saving' => 'int32',
        'total_call_to_agent_from_mobile' => 'int32',
        'percentage_website_views' => 'double',
        'percentage_mobile_site_views' => 'double',
        'percentage_smart_phone_views' => 'double',
        'percentage_tablet_views' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingId',
        'total_listing_views' => 'totalListingViews',
        'total_photo_views' => 'totalPhotoViews',
        'total_photo_gallery_views' => 'totalPhotoGalleryViews',
        'total_floorplan_views' => 'totalFloorplanViews',
        'total_map_views' => 'totalMapViews',
        'total_video_views' => 'totalVideoViews',
        'total_ebrochure_views' => 'totalEbrochureViews',
        'total_agent_detail_views' => 'totalAgentDetailViews',
        'total_shortlisted' => 'totalShortlisted',
        'total_printed' => 'totalPrinted',
        'total_agent_phone_number_reveals' => 'totalAgentPhoneNumberReveals',
        'total_enquiries' => 'totalEnquiries',
        'total_email_to_friend' => 'totalEmailToFriend',
        'total_shared_via_social_media' => 'totalSharedViaSocialMedia',
        'total_inspection_time_saving' => 'totalInspectionTimeSaving',
        'total_call_to_agent_from_mobile' => 'totalCallToAgentFromMobile',
        'percentage_website_views' => 'percentageWebsiteViews',
        'percentage_mobile_site_views' => 'percentageMobileSiteViews',
        'percentage_smart_phone_views' => 'percentageSmartPhoneViews',
        'percentage_tablet_views' => 'percentageTabletViews'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'total_listing_views' => 'setTotalListingViews',
        'total_photo_views' => 'setTotalPhotoViews',
        'total_photo_gallery_views' => 'setTotalPhotoGalleryViews',
        'total_floorplan_views' => 'setTotalFloorplanViews',
        'total_map_views' => 'setTotalMapViews',
        'total_video_views' => 'setTotalVideoViews',
        'total_ebrochure_views' => 'setTotalEbrochureViews',
        'total_agent_detail_views' => 'setTotalAgentDetailViews',
        'total_shortlisted' => 'setTotalShortlisted',
        'total_printed' => 'setTotalPrinted',
        'total_agent_phone_number_reveals' => 'setTotalAgentPhoneNumberReveals',
        'total_enquiries' => 'setTotalEnquiries',
        'total_email_to_friend' => 'setTotalEmailToFriend',
        'total_shared_via_social_media' => 'setTotalSharedViaSocialMedia',
        'total_inspection_time_saving' => 'setTotalInspectionTimeSaving',
        'total_call_to_agent_from_mobile' => 'setTotalCallToAgentFromMobile',
        'percentage_website_views' => 'setPercentageWebsiteViews',
        'percentage_mobile_site_views' => 'setPercentageMobileSiteViews',
        'percentage_smart_phone_views' => 'setPercentageSmartPhoneViews',
        'percentage_tablet_views' => 'setPercentageTabletViews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'total_listing_views' => 'getTotalListingViews',
        'total_photo_views' => 'getTotalPhotoViews',
        'total_photo_gallery_views' => 'getTotalPhotoGalleryViews',
        'total_floorplan_views' => 'getTotalFloorplanViews',
        'total_map_views' => 'getTotalMapViews',
        'total_video_views' => 'getTotalVideoViews',
        'total_ebrochure_views' => 'getTotalEbrochureViews',
        'total_agent_detail_views' => 'getTotalAgentDetailViews',
        'total_shortlisted' => 'getTotalShortlisted',
        'total_printed' => 'getTotalPrinted',
        'total_agent_phone_number_reveals' => 'getTotalAgentPhoneNumberReveals',
        'total_enquiries' => 'getTotalEnquiries',
        'total_email_to_friend' => 'getTotalEmailToFriend',
        'total_shared_via_social_media' => 'getTotalSharedViaSocialMedia',
        'total_inspection_time_saving' => 'getTotalInspectionTimeSaving',
        'total_call_to_agent_from_mobile' => 'getTotalCallToAgentFromMobile',
        'percentage_website_views' => 'getPercentageWebsiteViews',
        'percentage_mobile_site_views' => 'getPercentageMobileSiteViews',
        'percentage_smart_phone_views' => 'getPercentageSmartPhoneViews',
        'percentage_tablet_views' => 'getPercentageTabletViews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['total_listing_views'] = isset($data['total_listing_views']) ? $data['total_listing_views'] : null;
        $this->container['total_photo_views'] = isset($data['total_photo_views']) ? $data['total_photo_views'] : null;
        $this->container['total_photo_gallery_views'] = isset($data['total_photo_gallery_views']) ? $data['total_photo_gallery_views'] : null;
        $this->container['total_floorplan_views'] = isset($data['total_floorplan_views']) ? $data['total_floorplan_views'] : null;
        $this->container['total_map_views'] = isset($data['total_map_views']) ? $data['total_map_views'] : null;
        $this->container['total_video_views'] = isset($data['total_video_views']) ? $data['total_video_views'] : null;
        $this->container['total_ebrochure_views'] = isset($data['total_ebrochure_views']) ? $data['total_ebrochure_views'] : null;
        $this->container['total_agent_detail_views'] = isset($data['total_agent_detail_views']) ? $data['total_agent_detail_views'] : null;
        $this->container['total_shortlisted'] = isset($data['total_shortlisted']) ? $data['total_shortlisted'] : null;
        $this->container['total_printed'] = isset($data['total_printed']) ? $data['total_printed'] : null;
        $this->container['total_agent_phone_number_reveals'] = isset($data['total_agent_phone_number_reveals']) ? $data['total_agent_phone_number_reveals'] : null;
        $this->container['total_enquiries'] = isset($data['total_enquiries']) ? $data['total_enquiries'] : null;
        $this->container['total_email_to_friend'] = isset($data['total_email_to_friend']) ? $data['total_email_to_friend'] : null;
        $this->container['total_shared_via_social_media'] = isset($data['total_shared_via_social_media']) ? $data['total_shared_via_social_media'] : null;
        $this->container['total_inspection_time_saving'] = isset($data['total_inspection_time_saving']) ? $data['total_inspection_time_saving'] : null;
        $this->container['total_call_to_agent_from_mobile'] = isset($data['total_call_to_agent_from_mobile']) ? $data['total_call_to_agent_from_mobile'] : null;
        $this->container['percentage_website_views'] = isset($data['percentage_website_views']) ? $data['percentage_website_views'] : null;
        $this->container['percentage_mobile_site_views'] = isset($data['percentage_mobile_site_views']) ? $data['percentage_mobile_site_views'] : null;
        $this->container['percentage_smart_phone_views'] = isset($data['percentage_smart_phone_views']) ? $data['percentage_smart_phone_views'] : null;
        $this->container['percentage_tablet_views'] = isset($data['percentage_tablet_views']) ? $data['percentage_tablet_views'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id Domain Advertisement Id
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets total_listing_views
     *
     * @return int
     */
    public function getTotalListingViews()
    {
        return $this->container['total_listing_views'];
    }

    /**
     * Sets total_listing_views
     *
     * @param int $total_listing_views Total number of views for the listing details
     *
     * @return $this
     */
    public function setTotalListingViews($total_listing_views)
    {
        $this->container['total_listing_views'] = $total_listing_views;

        return $this;
    }

    /**
     * Gets total_photo_views
     *
     * @return int
     */
    public function getTotalPhotoViews()
    {
        return $this->container['total_photo_views'];
    }

    /**
     * Sets total_photo_views
     *
     * @param int $total_photo_views Total number of listing photo views
     *
     * @return $this
     */
    public function setTotalPhotoViews($total_photo_views)
    {
        $this->container['total_photo_views'] = $total_photo_views;

        return $this;
    }

    /**
     * Gets total_photo_gallery_views
     *
     * @return int
     */
    public function getTotalPhotoGalleryViews()
    {
        return $this->container['total_photo_gallery_views'];
    }

    /**
     * Sets total_photo_gallery_views
     *
     * @param int $total_photo_gallery_views Total number of listing photo gallery views
     *
     * @return $this
     */
    public function setTotalPhotoGalleryViews($total_photo_gallery_views)
    {
        $this->container['total_photo_gallery_views'] = $total_photo_gallery_views;

        return $this;
    }

    /**
     * Gets total_floorplan_views
     *
     * @return int
     */
    public function getTotalFloorplanViews()
    {
        return $this->container['total_floorplan_views'];
    }

    /**
     * Sets total_floorplan_views
     *
     * @param int $total_floorplan_views Total number of floorplan views
     *
     * @return $this
     */
    public function setTotalFloorplanViews($total_floorplan_views)
    {
        $this->container['total_floorplan_views'] = $total_floorplan_views;

        return $this;
    }

    /**
     * Gets total_map_views
     *
     * @return int
     */
    public function getTotalMapViews()
    {
        return $this->container['total_map_views'];
    }

    /**
     * Sets total_map_views
     *
     * @param int $total_map_views Total number of address map views
     *
     * @return $this
     */
    public function setTotalMapViews($total_map_views)
    {
        $this->container['total_map_views'] = $total_map_views;

        return $this;
    }

    /**
     * Gets total_video_views
     *
     * @return int
     */
    public function getTotalVideoViews()
    {
        return $this->container['total_video_views'];
    }

    /**
     * Sets total_video_views
     *
     * @param int $total_video_views Total number of vedio views
     *
     * @return $this
     */
    public function setTotalVideoViews($total_video_views)
    {
        $this->container['total_video_views'] = $total_video_views;

        return $this;
    }

    /**
     * Gets total_ebrochure_views
     *
     * @return int
     */
    public function getTotalEbrochureViews()
    {
        return $this->container['total_ebrochure_views'];
    }

    /**
     * Sets total_ebrochure_views
     *
     * @param int $total_ebrochure_views Total number of Ebrochure views
     *
     * @return $this
     */
    public function setTotalEbrochureViews($total_ebrochure_views)
    {
        $this->container['total_ebrochure_views'] = $total_ebrochure_views;

        return $this;
    }

    /**
     * Gets total_agent_detail_views
     *
     * @return int
     */
    public function getTotalAgentDetailViews()
    {
        return $this->container['total_agent_detail_views'];
    }

    /**
     * Sets total_agent_detail_views
     *
     * @param int $total_agent_detail_views Total number of agent detail views
     *
     * @return $this
     */
    public function setTotalAgentDetailViews($total_agent_detail_views)
    {
        $this->container['total_agent_detail_views'] = $total_agent_detail_views;

        return $this;
    }

    /**
     * Gets total_shortlisted
     *
     * @return int
     */
    public function getTotalShortlisted()
    {
        return $this->container['total_shortlisted'];
    }

    /**
     * Sets total_shortlisted
     *
     * @param int $total_shortlisted Total number of times the listing was shortlisted
     *
     * @return $this
     */
    public function setTotalShortlisted($total_shortlisted)
    {
        $this->container['total_shortlisted'] = $total_shortlisted;

        return $this;
    }

    /**
     * Gets total_printed
     *
     * @return int
     */
    public function getTotalPrinted()
    {
        return $this->container['total_printed'];
    }

    /**
     * Sets total_printed
     *
     * @param int $total_printed Total number of time the listing detail was printed
     *
     * @return $this
     */
    public function setTotalPrinted($total_printed)
    {
        $this->container['total_printed'] = $total_printed;

        return $this;
    }

    /**
     * Gets total_agent_phone_number_reveals
     *
     * @return int
     */
    public function getTotalAgentPhoneNumberReveals()
    {
        return $this->container['total_agent_phone_number_reveals'];
    }

    /**
     * Sets total_agent_phone_number_reveals
     *
     * @param int $total_agent_phone_number_reveals Total number of times the agent phone number was revealed for contact
     *
     * @return $this
     */
    public function setTotalAgentPhoneNumberReveals($total_agent_phone_number_reveals)
    {
        $this->container['total_agent_phone_number_reveals'] = $total_agent_phone_number_reveals;

        return $this;
    }

    /**
     * Gets total_enquiries
     *
     * @return int
     */
    public function getTotalEnquiries()
    {
        return $this->container['total_enquiries'];
    }

    /**
     * Sets total_enquiries
     *
     * @param int $total_enquiries Total number of enquiries
     *
     * @return $this
     */
    public function setTotalEnquiries($total_enquiries)
    {
        $this->container['total_enquiries'] = $total_enquiries;

        return $this;
    }

    /**
     * Gets total_email_to_friend
     *
     * @return int
     */
    public function getTotalEmailToFriend()
    {
        return $this->container['total_email_to_friend'];
    }

    /**
     * Sets total_email_to_friend
     *
     * @param int $total_email_to_friend Total number of times the listing link was emailed
     *
     * @return $this
     */
    public function setTotalEmailToFriend($total_email_to_friend)
    {
        $this->container['total_email_to_friend'] = $total_email_to_friend;

        return $this;
    }

    /**
     * Gets total_shared_via_social_media
     *
     * @return int
     */
    public function getTotalSharedViaSocialMedia()
    {
        return $this->container['total_shared_via_social_media'];
    }

    /**
     * Sets total_shared_via_social_media
     *
     * @param int $total_shared_via_social_media Total number of shares via social media
     *
     * @return $this
     */
    public function setTotalSharedViaSocialMedia($total_shared_via_social_media)
    {
        $this->container['total_shared_via_social_media'] = $total_shared_via_social_media;

        return $this;
    }

    /**
     * Gets total_inspection_time_saving
     *
     * @return int
     */
    public function getTotalInspectionTimeSaving()
    {
        return $this->container['total_inspection_time_saving'];
    }

    /**
     * Sets total_inspection_time_saving
     *
     * @param int $total_inspection_time_saving Total numnber of times when the inspection was saved to calendar
     *
     * @return $this
     */
    public function setTotalInspectionTimeSaving($total_inspection_time_saving)
    {
        $this->container['total_inspection_time_saving'] = $total_inspection_time_saving;

        return $this;
    }

    /**
     * Gets total_call_to_agent_from_mobile
     *
     * @return int
     */
    public function getTotalCallToAgentFromMobile()
    {
        return $this->container['total_call_to_agent_from_mobile'];
    }

    /**
     * Sets total_call_to_agent_from_mobile
     *
     * @param int $total_call_to_agent_from_mobile Total number of calls made to agent from inside the listing
     *
     * @return $this
     */
    public function setTotalCallToAgentFromMobile($total_call_to_agent_from_mobile)
    {
        $this->container['total_call_to_agent_from_mobile'] = $total_call_to_agent_from_mobile;

        return $this;
    }

    /**
     * Gets percentage_website_views
     *
     * @return double
     */
    public function getPercentageWebsiteViews()
    {
        return $this->container['percentage_website_views'];
    }

    /**
     * Sets percentage_website_views
     *
     * @param double $percentage_website_views Percentage of total views from website
     *
     * @return $this
     */
    public function setPercentageWebsiteViews($percentage_website_views)
    {
        $this->container['percentage_website_views'] = $percentage_website_views;

        return $this;
    }

    /**
     * Gets percentage_mobile_site_views
     *
     * @return double
     */
    public function getPercentageMobileSiteViews()
    {
        return $this->container['percentage_mobile_site_views'];
    }

    /**
     * Sets percentage_mobile_site_views
     *
     * @param double $percentage_mobile_site_views Percentage of total views from mobile site
     *
     * @return $this
     */
    public function setPercentageMobileSiteViews($percentage_mobile_site_views)
    {
        $this->container['percentage_mobile_site_views'] = $percentage_mobile_site_views;

        return $this;
    }

    /**
     * Gets percentage_smart_phone_views
     *
     * @return double
     */
    public function getPercentageSmartPhoneViews()
    {
        return $this->container['percentage_smart_phone_views'];
    }

    /**
     * Sets percentage_smart_phone_views
     *
     * @param double $percentage_smart_phone_views Percentage of total views from smart phone apps
     *
     * @return $this
     */
    public function setPercentageSmartPhoneViews($percentage_smart_phone_views)
    {
        $this->container['percentage_smart_phone_views'] = $percentage_smart_phone_views;

        return $this;
    }

    /**
     * Gets percentage_tablet_views
     *
     * @return double
     */
    public function getPercentageTabletViews()
    {
        return $this->container['percentage_tablet_views'];
    }

    /**
     * Sets percentage_tablet_views
     *
     * @param double $percentage_tablet_views Percentage of total views from tablets
     *
     * @return $this
     */
    public function setPercentageTabletViews($percentage_tablet_views)
    {
        $this->container['percentage_tablet_views'] = $percentage_tablet_views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
