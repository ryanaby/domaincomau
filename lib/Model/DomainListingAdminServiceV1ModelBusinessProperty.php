<?php
/**
 * DomainListingAdminServiceV1ModelBusinessProperty
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainListingAdminServiceV1ModelBusinessProperty Class Doc Comment
 *
 * @category Class
 * @description Business Property
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainListingAdminServiceV1ModelBusinessProperty implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.ListingAdminService.v1.Model.BusinessProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_type' => 'string[]',
        'land_area' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelLandArea',
        'parking' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelParking',
        'pdfs' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyPdf[]',
        'is_marked_for_liveability' => 'bool',
        'property_name' => 'string',
        'location' => 'string',
        'images' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[]',
        'address' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelAddress',
        'area' => '\Swagger\Client\Model\DomainListingAdminServiceV1ModelArea'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_type' => null,
        'land_area' => null,
        'parking' => null,
        'pdfs' => null,
        'is_marked_for_liveability' => null,
        'property_name' => null,
        'location' => null,
        'images' => null,
        'address' => null,
        'area' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_type' => 'propertyType',
        'land_area' => 'landArea',
        'parking' => 'parking',
        'pdfs' => 'pdfs',
        'is_marked_for_liveability' => 'isMarkedForLiveability',
        'property_name' => 'propertyName',
        'location' => 'location',
        'images' => 'images',
        'address' => 'address',
        'area' => 'area'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_type' => 'setPropertyType',
        'land_area' => 'setLandArea',
        'parking' => 'setParking',
        'pdfs' => 'setPdfs',
        'is_marked_for_liveability' => 'setIsMarkedForLiveability',
        'property_name' => 'setPropertyName',
        'location' => 'setLocation',
        'images' => 'setImages',
        'address' => 'setAddress',
        'area' => 'setArea'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_type' => 'getPropertyType',
        'land_area' => 'getLandArea',
        'parking' => 'getParking',
        'pdfs' => 'getPdfs',
        'is_marked_for_liveability' => 'getIsMarkedForLiveability',
        'property_name' => 'getPropertyName',
        'location' => 'getLocation',
        'images' => 'getImages',
        'address' => 'getAddress',
        'area' => 'getArea'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROPERTY_TYPE_ACCESSORIES_PARTS = 'accessoriesParts';
    const PROPERTY_TYPE_ACCOMMODATION_TOURISM = 'accommodationTourism';
    const PROPERTY_TYPE_ACCOUNTING = 'accounting';
    const PROPERTY_TYPE_ADULT = 'adult';
    const PROPERTY_TYPE_ADVERTISING_MARKETING = 'advertisingMarketing';
    const PROPERTY_TYPE_AERIAL = 'aerial';
    const PROPERTY_TYPE_AERONAUTICAL = 'aeronautical';
    const PROPERTY_TYPE_AGED_CARE = 'agedCare';
    const PROPERTY_TYPE_AGRICULTURAL = 'agricultural';
    const PROPERTY_TYPE_AIR = 'air';
    const PROPERTY_TYPE_AIRCRAFT = 'aircraft';
    const PROPERTY_TYPE_ALARMS = 'alarms';
    const PROPERTY_TYPE_ALCOHOL_LIQUOR = 'alcoholLiquor';
    const PROPERTY_TYPE_AMUSEMENTS = 'amusements';
    const PROPERTY_TYPE_ANIMAL_RELATED = 'animalRelated';
    const PROPERTY_TYPE_AQUACULTURE = 'aquaculture';
    const PROPERTY_TYPE_AQUATIC_MARINE_MARINA_BERTH = 'aquaticMarineMarinaBerth';
    const PROPERTY_TYPE_ARTS_CRAFTS = 'artsCrafts';
    const PROPERTY_TYPE_AUTO_ELECTRICAL = 'autoElectrical';
    const PROPERTY_TYPE_AUTOMOTIVE = 'automotive';
    const PROPERTY_TYPE_BACKPACKER_HOSTEL = 'backpackerHostel';
    const PROPERTY_TYPE_BAKERY = 'bakery';
    const PROPERTY_TYPE_BARS_NIGHTCLUBS = 'barsNightclubs';
    const PROPERTY_TYPE_BEAUTY_HEALTH = 'beautyHealth';
    const PROPERTY_TYPE_BEAUTY_PRODUCTS = 'beautyProducts';
    const PROPERTY_TYPE_BEAUTY_SALON = 'beautySalon';
    const PROPERTY_TYPE_BIKE_AND_MOTORCYCLE = 'bikeAndMotorcycle';
    const PROPERTY_TYPE_BOARDING_KENNELS = 'boardingKennels';
    const PROPERTY_TYPE_BOATS_MARINE_MARINA_BERTH = 'boatsMarineMarinaBerth';
    const PROPERTY_TYPE_BOOKKEEPING = 'bookkeeping';
    const PROPERTY_TYPE_BROKERAGE = 'brokerage';
    const PROPERTY_TYPE_BUILDER = 'builder';
    const PROPERTY_TYPE_BUILDING_AND_CONSTRUCTION = 'buildingAndConstruction';
    const PROPERTY_TYPE_BUS = 'bus';
    const PROPERTY_TYPE_BUTCHER = 'butcher';
    const PROPERTY_TYPE_CAFE_COFFEE_SHOP = 'cafeCoffeeShop';
    const PROPERTY_TYPE_CAR = 'car';
    const PROPERTY_TYPE_CAR_BUS_TRUCK = 'carBusTruck';
    const PROPERTY_TYPE_CAR_DEALERSHIP = 'carDealership';
    const PROPERTY_TYPE_CAR_RENTAL = 'carRental';
    const PROPERTY_TYPE_CAR_WASH = 'carWash';
    const PROPERTY_TYPE_CARAVAN_PARK = 'caravanPark';
    const PROPERTY_TYPE_CARPENTER = 'carpenter';
    const PROPERTY_TYPE_CATERING = 'catering';
    const PROPERTY_TYPE_CHILD_CARE = 'childCare';
    const PROPERTY_TYPE_CIVIL = 'civil';
    const PROPERTY_TYPE_CLEANING = 'cleaning';
    const PROPERTY_TYPE_CLEANING_AND_MAINTENANCE = 'cleaningAndMaintenance';
    const PROPERTY_TYPE_CLINICAL_PRACTICE = 'clinicalPractice';
    const PROPERTY_TYPE_CLOTHING_ACCESSORIES = 'clothingAccessories';
    const PROPERTY_TYPE_CLOTHING_FOOTWEAR = 'clothingFootwear';
    const PROPERTY_TYPE_COMMUNICATION = 'communication';
    const PROPERTY_TYPE_COMMUNICATIONS = 'communications';
    const PROPERTY_TYPE_COMPUTER_IT = 'computerIT';
    const PROPERTY_TYPE_COMPUTER_AND_INTERNET = 'computerAndInternet';
    const PROPERTY_TYPE_CONSTRUCTION = 'construction';
    const PROPERTY_TYPE_CONVENIENCE_STORE = 'convenienceStore';
    const PROPERTY_TYPE_COPY_LAMINATE = 'copyLaminate';
    const PROPERTY_TYPE_COURIER = 'courier';
    const PROPERTY_TYPE_CROP_HARVESTING = 'cropHarvesting';
    const PROPERTY_TYPE_CUSTOMS = 'customs';
    const PROPERTY_TYPE_DAIRY_FARMING = 'dairyFarming';
    const PROPERTY_TYPE_DELI = 'deli';
    const PROPERTY_TYPE_DENTAL = 'dental';
    const PROPERTY_TYPE_DETAILING = 'detailing';
    const PROPERTY_TYPE_DISTRIBUTORS = 'distributors';
    const PROPERTY_TYPE_DRIVING_SCHOOLS = 'drivingSchools';
    const PROPERTY_TYPE_EDUCATION_TRAINING = 'educationTraining';
    const PROPERTY_TYPE_EDUCATIONAL = 'educational';
    const PROPERTY_TYPE_ELECTRICAL = 'electrical';
    const PROPERTY_TYPE_EMPLOYMENT_RECRUITMENT = 'employmentRecruitment';
    const PROPERTY_TYPE_ENTERTAINMENT = 'entertainment';
    const PROPERTY_TYPE_ENTERTAINMENT_TECHNOLOGY = 'entertainmentTechnology';
    const PROPERTY_TYPE_EXPORT = 'export';
    const PROPERTY_TYPE_FARMING = 'farming';
    const PROPERTY_TYPE_FERTILISER = 'fertiliser';
    const PROPERTY_TYPE_FINANCE = 'finance';
    const PROPERTY_TYPE_FINANCIAL_SERVICES = 'financialServices';
    const PROPERTY_TYPE_FISHING_FORESTRY = 'fishingForestry';
    const PROPERTY_TYPE_FLORIST_NURSERY = 'floristNursery';
    const PROPERTY_TYPE_FOOD_BEVERAGE = 'foodBeverage';
    const PROPERTY_TYPE_FOOD_BEVERAGE_HOSPITALITY = 'foodBeverageHospitality';
    const PROPERTY_TYPE_FRANCHISE_BUSINESS_OPPORTUNITIES = 'franchiseBusinessOpportunities';
    const PROPERTY_TYPE_FREIGHT = 'freight';
    const PROPERTY_TYPE_FRUIT_VEG_FRESH_PRODUCE = 'fruitVegFreshProduce';
    const PROPERTY_TYPE_FRUIT_PICKING = 'fruitPicking';
    const PROPERTY_TYPE_FUNCTION_CENTRE = 'functionCentre';
    const PROPERTY_TYPE_FURNITURE_TIMBER = 'furnitureTimber';
    const PROPERTY_TYPE_GAMBLING = 'gambling';
    const PROPERTY_TYPE_GARDEN_HOUSEHOLD = 'gardenHousehold';
    const PROPERTY_TYPE_GARDEN_NURSERIES = 'gardenNurseries';
    const PROPERTY_TYPE_GARDENING = 'gardening';
    const PROPERTY_TYPE_GLASS_CERAMIC = 'glassCeramic';
    const PROPERTY_TYPE_GUEST_HOUSE_BB = 'guestHouseBB';
    const PROPERTY_TYPE_HAIRDRESSER = 'hairdresser';
    const PROPERTY_TYPE_HEALTH_BEAUTY = 'healthBeauty';
    const PROPERTY_TYPE_HEALTH_SPA = 'healthSpa';
    const PROPERTY_TYPE_HIRE = 'hire';
    const PROPERTY_TYPE_HOME_GARDEN = 'homeGarden';
    const PROPERTY_TYPE_HOME_BASED = 'homeBased';
    const PROPERTY_TYPE_HOMEWARE_HARDWARE = 'homewareHardware';
    const PROPERTY_TYPE_HOSPITAL = 'hospital';
    const PROPERTY_TYPE_HOTEL = 'hotel';
    const PROPERTY_TYPE_HUNTING_TRAP = 'huntingTrap';
    const PROPERTY_TYPE_IMPORT = 'import';
    const PROPERTY_TYPE_IMPORT_EXPORT_WHOLESALE = 'importExportWholesale';
    const PROPERTY_TYPE_INDUSTRIAL_MANUFACTURING = 'industrialManufacturing';
    const PROPERTY_TYPE_INSEMINATION = 'insemination';
    const PROPERTY_TYPE_INSURANCE = 'insurance';
    const PROPERTY_TYPE_INTERNET = 'internet';
    const PROPERTY_TYPE_IRRIGATION_SERVICES = 'irrigationServices';
    const PROPERTY_TYPE_JUICE_BAR = 'juiceBar';
    const PROPERTY_TYPE_LAND_CLEARING = 'landClearing';
    const PROPERTY_TYPE_LANDSCAPING = 'landscaping';
    const PROPERTY_TYPE_LAUNDRY_DRY_CLEANING = 'laundryDryCleaning';
    const PROPERTY_TYPE_LEGAL = 'legal';
    const PROPERTY_TYPE_LEISURE_ENTERTAINMENT = 'leisureEntertainment';
    const PROPERTY_TYPE_LIMOUSINE_TAXI = 'limousineTaxi';
    const PROPERTY_TYPE_LIVESTOCK = 'livestock';
    const PROPERTY_TYPE_MACHINERY = 'machinery';
    const PROPERTY_TYPE_MACHINERY_METAL = 'machineryMetal';
    const PROPERTY_TYPE_MANAGEMENT_RIGHTS = 'managementRights';
    const PROPERTY_TYPE_MANUFACTURERS = 'manufacturers';
    const PROPERTY_TYPE_MANUFACTURING_ENGINEERING = 'manufacturingEngineering';
    const PROPERTY_TYPE_MARINE = 'marine';
    const PROPERTY_TYPE_MASSAGE = 'massage';
    const PROPERTY_TYPE_MECHANICAL_REPAIR = 'mechanicalRepair';
    const PROPERTY_TYPE_MEDIA = 'media';
    const PROPERTY_TYPE_MEDICAL = 'medical';
    const PROPERTY_TYPE_MEDICAL_PRACTICE = 'medicalPractice';
    const PROPERTY_TYPE_MINING_EARTH_MOVING = 'miningEarthMoving';
    const PROPERTY_TYPE_MOBILE_SERVICES = 'mobileServices';
    const PROPERTY_TYPE_MOTEL = 'motel';
    const PROPERTY_TYPE_MOTORCYCLE = 'motorcycle';
    const PROPERTY_TYPE_MUSIC_RELATED = 'musicRelated';
    const PROPERTY_TYPE_MUSTERING = 'mustering';
    const PROPERTY_TYPE_NAILS = 'nails';
    const PROPERTY_TYPE_NATURAL_THERAPIES = 'naturalTherapies';
    const PROPERTY_TYPE_NEWSAGENCY = 'newsagency';
    const PROPERTY_TYPE_NURSERY = 'nursery';
    const PROPERTY_TYPE_NURSING_HOME = 'nursingHome';
    const PROPERTY_TYPE_OFFICE_SUPPLIES = 'officeSupplies';
    const PROPERTY_TYPE_OIL_GAS = 'oilGas';
    const PROPERTY_TYPE_PANEL_BEATING = 'panelBeating';
    const PROPERTY_TYPE_PAPER_PRINTING = 'paperPrinting';
    const PROPERTY_TYPE_PARKING_CAR_SPACE = 'parkingCarSpace';
    const PROPERTY_TYPE_PEST_RELATED = 'pestRelated';
    const PROPERTY_TYPE_PHARMACIES = 'pharmacies';
    const PROPERTY_TYPE_PLASTIC = 'plastic';
    const PROPERTY_TYPE_PLUMBING = 'plumbing';
    const PROPERTY_TYPE_POOL_WATER = 'poolWater';
    const PROPERTY_TYPE_POST_OFFICES = 'postOffices';
    const PROPERTY_TYPE_PRINT_PHOTO = 'printPhoto';
    const PROPERTY_TYPE_PROFESSIONAL = 'professional';
    const PROPERTY_TYPE_PROPERTY_REAL_ESTATE = 'propertyRealEstate';
    const PROPERTY_TYPE_RAIL = 'rail';
    const PROPERTY_TYPE_RECREATION_SPORT = 'recreationSport';
    const PROPERTY_TYPE_RECRUITMENT = 'recruitment';
    const PROPERTY_TYPE_REPAIR = 'repair';
    const PROPERTY_TYPE_RESORT = 'resort';
    const PROPERTY_TYPE_RESTAURANT = 'restaurant';
    const PROPERTY_TYPE_RETAIL = 'retail';
    const PROPERTY_TYPE_RETAILER = 'retailer';
    const PROPERTY_TYPE_RETIREMENT = 'retirement';
    const PROPERTY_TYPE_RETIREMENT_VILLAGE = 'retirementVillage';
    const PROPERTY_TYPE_ROAD = 'road';
    const PROPERTY_TYPE_RURAL = 'rural';
    const PROPERTY_TYPE_SCIENTIFIC = 'scientific';
    const PROPERTY_TYPE_SEA = 'sea';
    const PROPERTY_TYPE_SECURITY = 'security';
    const PROPERTY_TYPE_SERVICE_STATION = 'serviceStation';
    const PROPERTY_TYPE_SERVICES = 'services';
    const PROPERTY_TYPE_SHEARING = 'shearing';
    const PROPERTY_TYPE_SPORTS_COMPLEX_GYM = 'sportsComplexGym';
    const PROPERTY_TYPE_SUPERMARKET = 'supermarket';
    const PROPERTY_TYPE_TAKEAWAY_FOOD = 'takeawayFood';
    const PROPERTY_TYPE_TAXI = 'taxi';
    const PROPERTY_TYPE_THEME_PARK = 'themePark';
    const PROPERTY_TYPE_TOURS = 'tours';
    const PROPERTY_TYPE_TRAINING = 'training';
    const PROPERTY_TYPE_TRANSPORT_DISTRIBUTION = 'transportDistribution';
    const PROPERTY_TYPE_TRAVEL = 'travel';
    const PROPERTY_TYPE_TRUCK = 'truck';
    const PROPERTY_TYPE_VENDING = 'vending';
    const PROPERTY_TYPE_WATER = 'water';
    const PROPERTY_TYPE_WELDING = 'welding';
    const PROPERTY_TYPE_WHOLESALE = 'wholesale';
    const PROPERTY_TYPE_WHOLESALERS = 'wholesalers';
    const PROPERTY_TYPE_WOOL_CLASSING = 'woolClassing';
    const PROPERTY_TYPE_WRECKERS = 'wreckers';
    const PROPERTY_TYPE_ALCOHOL_GROCERY = 'alcoholGrocery';
    const PROPERTY_TYPE_CAFE_RESTAURANTS = 'cafeRestaurants';
    const PROPERTY_TYPE_DISCOUNT_STORE = 'discountStore';
    const PROPERTY_TYPE_ECO_FRIENDLY = 'ecoFriendly';
    const PROPERTY_TYPE_GREEN = 'green';
    const PROPERTY_TYPE_GROCERY = 'grocery';
    const PROPERTY_TYPE_SPECIALITY_RETAIL = 'specialityRetail';
    const PROPERTY_TYPE_STORAGE = 'storage';
    const PROPERTY_TYPE_TRAVEL_AGENCY = 'travelAgency';
    const PROPERTY_TYPE_VARIETY_STORE = 'varietyStore';
    const PROPERTY_TYPE_CHICKEN_SHOP = 'chickenShop';
    const PROPERTY_TYPE_SEAFOOD_SHOP = 'seafoodShop';
    const PROPERTY_TYPE_DELI_CAFE = 'deliCafe';
    const PROPERTY_TYPE_CROPPING = 'cropping';
    const PROPERTY_TYPE_VITICULTURE = 'viticulture';
    const PROPERTY_TYPE_GRAZING = 'grazing';
    const PROPERTY_TYPE_HORTICULTURE = 'horticulture';
    const PROPERTY_TYPE_EQUINE = 'equine';
    const PROPERTY_TYPE_FARMLET = 'farmlet';
    const PROPERTY_TYPE_ORCHARD = 'orchard';
    const PROPERTY_TYPE_RURAL_LIFESTYLE = 'ruralLifestyle';
    const PROPERTY_TYPE_ONLINE_BUSINESS = 'onlineBusiness';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypeAllowableValues()
    {
        return [
            self::PROPERTY_TYPE_ACCESSORIES_PARTS,
            self::PROPERTY_TYPE_ACCOMMODATION_TOURISM,
            self::PROPERTY_TYPE_ACCOUNTING,
            self::PROPERTY_TYPE_ADULT,
            self::PROPERTY_TYPE_ADVERTISING_MARKETING,
            self::PROPERTY_TYPE_AERIAL,
            self::PROPERTY_TYPE_AERONAUTICAL,
            self::PROPERTY_TYPE_AGED_CARE,
            self::PROPERTY_TYPE_AGRICULTURAL,
            self::PROPERTY_TYPE_AIR,
            self::PROPERTY_TYPE_AIRCRAFT,
            self::PROPERTY_TYPE_ALARMS,
            self::PROPERTY_TYPE_ALCOHOL_LIQUOR,
            self::PROPERTY_TYPE_AMUSEMENTS,
            self::PROPERTY_TYPE_ANIMAL_RELATED,
            self::PROPERTY_TYPE_AQUACULTURE,
            self::PROPERTY_TYPE_AQUATIC_MARINE_MARINA_BERTH,
            self::PROPERTY_TYPE_ARTS_CRAFTS,
            self::PROPERTY_TYPE_AUTO_ELECTRICAL,
            self::PROPERTY_TYPE_AUTOMOTIVE,
            self::PROPERTY_TYPE_BACKPACKER_HOSTEL,
            self::PROPERTY_TYPE_BAKERY,
            self::PROPERTY_TYPE_BARS_NIGHTCLUBS,
            self::PROPERTY_TYPE_BEAUTY_HEALTH,
            self::PROPERTY_TYPE_BEAUTY_PRODUCTS,
            self::PROPERTY_TYPE_BEAUTY_SALON,
            self::PROPERTY_TYPE_BIKE_AND_MOTORCYCLE,
            self::PROPERTY_TYPE_BOARDING_KENNELS,
            self::PROPERTY_TYPE_BOATS_MARINE_MARINA_BERTH,
            self::PROPERTY_TYPE_BOOKKEEPING,
            self::PROPERTY_TYPE_BROKERAGE,
            self::PROPERTY_TYPE_BUILDER,
            self::PROPERTY_TYPE_BUILDING_AND_CONSTRUCTION,
            self::PROPERTY_TYPE_BUS,
            self::PROPERTY_TYPE_BUTCHER,
            self::PROPERTY_TYPE_CAFE_COFFEE_SHOP,
            self::PROPERTY_TYPE_CAR,
            self::PROPERTY_TYPE_CAR_BUS_TRUCK,
            self::PROPERTY_TYPE_CAR_DEALERSHIP,
            self::PROPERTY_TYPE_CAR_RENTAL,
            self::PROPERTY_TYPE_CAR_WASH,
            self::PROPERTY_TYPE_CARAVAN_PARK,
            self::PROPERTY_TYPE_CARPENTER,
            self::PROPERTY_TYPE_CATERING,
            self::PROPERTY_TYPE_CHILD_CARE,
            self::PROPERTY_TYPE_CIVIL,
            self::PROPERTY_TYPE_CLEANING,
            self::PROPERTY_TYPE_CLEANING_AND_MAINTENANCE,
            self::PROPERTY_TYPE_CLINICAL_PRACTICE,
            self::PROPERTY_TYPE_CLOTHING_ACCESSORIES,
            self::PROPERTY_TYPE_CLOTHING_FOOTWEAR,
            self::PROPERTY_TYPE_COMMUNICATION,
            self::PROPERTY_TYPE_COMMUNICATIONS,
            self::PROPERTY_TYPE_COMPUTER_IT,
            self::PROPERTY_TYPE_COMPUTER_AND_INTERNET,
            self::PROPERTY_TYPE_CONSTRUCTION,
            self::PROPERTY_TYPE_CONVENIENCE_STORE,
            self::PROPERTY_TYPE_COPY_LAMINATE,
            self::PROPERTY_TYPE_COURIER,
            self::PROPERTY_TYPE_CROP_HARVESTING,
            self::PROPERTY_TYPE_CUSTOMS,
            self::PROPERTY_TYPE_DAIRY_FARMING,
            self::PROPERTY_TYPE_DELI,
            self::PROPERTY_TYPE_DENTAL,
            self::PROPERTY_TYPE_DETAILING,
            self::PROPERTY_TYPE_DISTRIBUTORS,
            self::PROPERTY_TYPE_DRIVING_SCHOOLS,
            self::PROPERTY_TYPE_EDUCATION_TRAINING,
            self::PROPERTY_TYPE_EDUCATIONAL,
            self::PROPERTY_TYPE_ELECTRICAL,
            self::PROPERTY_TYPE_EMPLOYMENT_RECRUITMENT,
            self::PROPERTY_TYPE_ENTERTAINMENT,
            self::PROPERTY_TYPE_ENTERTAINMENT_TECHNOLOGY,
            self::PROPERTY_TYPE_EXPORT,
            self::PROPERTY_TYPE_FARMING,
            self::PROPERTY_TYPE_FERTILISER,
            self::PROPERTY_TYPE_FINANCE,
            self::PROPERTY_TYPE_FINANCIAL_SERVICES,
            self::PROPERTY_TYPE_FISHING_FORESTRY,
            self::PROPERTY_TYPE_FLORIST_NURSERY,
            self::PROPERTY_TYPE_FOOD_BEVERAGE,
            self::PROPERTY_TYPE_FOOD_BEVERAGE_HOSPITALITY,
            self::PROPERTY_TYPE_FRANCHISE_BUSINESS_OPPORTUNITIES,
            self::PROPERTY_TYPE_FREIGHT,
            self::PROPERTY_TYPE_FRUIT_VEG_FRESH_PRODUCE,
            self::PROPERTY_TYPE_FRUIT_PICKING,
            self::PROPERTY_TYPE_FUNCTION_CENTRE,
            self::PROPERTY_TYPE_FURNITURE_TIMBER,
            self::PROPERTY_TYPE_GAMBLING,
            self::PROPERTY_TYPE_GARDEN_HOUSEHOLD,
            self::PROPERTY_TYPE_GARDEN_NURSERIES,
            self::PROPERTY_TYPE_GARDENING,
            self::PROPERTY_TYPE_GLASS_CERAMIC,
            self::PROPERTY_TYPE_GUEST_HOUSE_BB,
            self::PROPERTY_TYPE_HAIRDRESSER,
            self::PROPERTY_TYPE_HEALTH_BEAUTY,
            self::PROPERTY_TYPE_HEALTH_SPA,
            self::PROPERTY_TYPE_HIRE,
            self::PROPERTY_TYPE_HOME_GARDEN,
            self::PROPERTY_TYPE_HOME_BASED,
            self::PROPERTY_TYPE_HOMEWARE_HARDWARE,
            self::PROPERTY_TYPE_HOSPITAL,
            self::PROPERTY_TYPE_HOTEL,
            self::PROPERTY_TYPE_HUNTING_TRAP,
            self::PROPERTY_TYPE_IMPORT,
            self::PROPERTY_TYPE_IMPORT_EXPORT_WHOLESALE,
            self::PROPERTY_TYPE_INDUSTRIAL_MANUFACTURING,
            self::PROPERTY_TYPE_INSEMINATION,
            self::PROPERTY_TYPE_INSURANCE,
            self::PROPERTY_TYPE_INTERNET,
            self::PROPERTY_TYPE_IRRIGATION_SERVICES,
            self::PROPERTY_TYPE_JUICE_BAR,
            self::PROPERTY_TYPE_LAND_CLEARING,
            self::PROPERTY_TYPE_LANDSCAPING,
            self::PROPERTY_TYPE_LAUNDRY_DRY_CLEANING,
            self::PROPERTY_TYPE_LEGAL,
            self::PROPERTY_TYPE_LEISURE_ENTERTAINMENT,
            self::PROPERTY_TYPE_LIMOUSINE_TAXI,
            self::PROPERTY_TYPE_LIVESTOCK,
            self::PROPERTY_TYPE_MACHINERY,
            self::PROPERTY_TYPE_MACHINERY_METAL,
            self::PROPERTY_TYPE_MANAGEMENT_RIGHTS,
            self::PROPERTY_TYPE_MANUFACTURERS,
            self::PROPERTY_TYPE_MANUFACTURING_ENGINEERING,
            self::PROPERTY_TYPE_MARINE,
            self::PROPERTY_TYPE_MASSAGE,
            self::PROPERTY_TYPE_MECHANICAL_REPAIR,
            self::PROPERTY_TYPE_MEDIA,
            self::PROPERTY_TYPE_MEDICAL,
            self::PROPERTY_TYPE_MEDICAL_PRACTICE,
            self::PROPERTY_TYPE_MINING_EARTH_MOVING,
            self::PROPERTY_TYPE_MOBILE_SERVICES,
            self::PROPERTY_TYPE_MOTEL,
            self::PROPERTY_TYPE_MOTORCYCLE,
            self::PROPERTY_TYPE_MUSIC_RELATED,
            self::PROPERTY_TYPE_MUSTERING,
            self::PROPERTY_TYPE_NAILS,
            self::PROPERTY_TYPE_NATURAL_THERAPIES,
            self::PROPERTY_TYPE_NEWSAGENCY,
            self::PROPERTY_TYPE_NURSERY,
            self::PROPERTY_TYPE_NURSING_HOME,
            self::PROPERTY_TYPE_OFFICE_SUPPLIES,
            self::PROPERTY_TYPE_OIL_GAS,
            self::PROPERTY_TYPE_PANEL_BEATING,
            self::PROPERTY_TYPE_PAPER_PRINTING,
            self::PROPERTY_TYPE_PARKING_CAR_SPACE,
            self::PROPERTY_TYPE_PEST_RELATED,
            self::PROPERTY_TYPE_PHARMACIES,
            self::PROPERTY_TYPE_PLASTIC,
            self::PROPERTY_TYPE_PLUMBING,
            self::PROPERTY_TYPE_POOL_WATER,
            self::PROPERTY_TYPE_POST_OFFICES,
            self::PROPERTY_TYPE_PRINT_PHOTO,
            self::PROPERTY_TYPE_PROFESSIONAL,
            self::PROPERTY_TYPE_PROPERTY_REAL_ESTATE,
            self::PROPERTY_TYPE_RAIL,
            self::PROPERTY_TYPE_RECREATION_SPORT,
            self::PROPERTY_TYPE_RECRUITMENT,
            self::PROPERTY_TYPE_REPAIR,
            self::PROPERTY_TYPE_RESORT,
            self::PROPERTY_TYPE_RESTAURANT,
            self::PROPERTY_TYPE_RETAIL,
            self::PROPERTY_TYPE_RETAILER,
            self::PROPERTY_TYPE_RETIREMENT,
            self::PROPERTY_TYPE_RETIREMENT_VILLAGE,
            self::PROPERTY_TYPE_ROAD,
            self::PROPERTY_TYPE_RURAL,
            self::PROPERTY_TYPE_SCIENTIFIC,
            self::PROPERTY_TYPE_SEA,
            self::PROPERTY_TYPE_SECURITY,
            self::PROPERTY_TYPE_SERVICE_STATION,
            self::PROPERTY_TYPE_SERVICES,
            self::PROPERTY_TYPE_SHEARING,
            self::PROPERTY_TYPE_SPORTS_COMPLEX_GYM,
            self::PROPERTY_TYPE_SUPERMARKET,
            self::PROPERTY_TYPE_TAKEAWAY_FOOD,
            self::PROPERTY_TYPE_TAXI,
            self::PROPERTY_TYPE_THEME_PARK,
            self::PROPERTY_TYPE_TOURS,
            self::PROPERTY_TYPE_TRAINING,
            self::PROPERTY_TYPE_TRANSPORT_DISTRIBUTION,
            self::PROPERTY_TYPE_TRAVEL,
            self::PROPERTY_TYPE_TRUCK,
            self::PROPERTY_TYPE_VENDING,
            self::PROPERTY_TYPE_WATER,
            self::PROPERTY_TYPE_WELDING,
            self::PROPERTY_TYPE_WHOLESALE,
            self::PROPERTY_TYPE_WHOLESALERS,
            self::PROPERTY_TYPE_WOOL_CLASSING,
            self::PROPERTY_TYPE_WRECKERS,
            self::PROPERTY_TYPE_ALCOHOL_GROCERY,
            self::PROPERTY_TYPE_CAFE_RESTAURANTS,
            self::PROPERTY_TYPE_DISCOUNT_STORE,
            self::PROPERTY_TYPE_ECO_FRIENDLY,
            self::PROPERTY_TYPE_GREEN,
            self::PROPERTY_TYPE_GROCERY,
            self::PROPERTY_TYPE_SPECIALITY_RETAIL,
            self::PROPERTY_TYPE_STORAGE,
            self::PROPERTY_TYPE_TRAVEL_AGENCY,
            self::PROPERTY_TYPE_VARIETY_STORE,
            self::PROPERTY_TYPE_CHICKEN_SHOP,
            self::PROPERTY_TYPE_SEAFOOD_SHOP,
            self::PROPERTY_TYPE_DELI_CAFE,
            self::PROPERTY_TYPE_CROPPING,
            self::PROPERTY_TYPE_VITICULTURE,
            self::PROPERTY_TYPE_GRAZING,
            self::PROPERTY_TYPE_HORTICULTURE,
            self::PROPERTY_TYPE_EQUINE,
            self::PROPERTY_TYPE_FARMLET,
            self::PROPERTY_TYPE_ORCHARD,
            self::PROPERTY_TYPE_RURAL_LIFESTYLE,
            self::PROPERTY_TYPE_ONLINE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['land_area'] = isset($data['land_area']) ? $data['land_area'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['pdfs'] = isset($data['pdfs']) ? $data['pdfs'] : null;
        $this->container['is_marked_for_liveability'] = isset($data['is_marked_for_liveability']) ? $data['is_marked_for_liveability'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_type
     *
     * @return string[]
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string[] $property_type Business property types ['accessoriesParts', 'accommodationTourism', 'accounting', 'adult', 'advertisingMarketing', 'aerial', 'aeronautical', 'agedCare', 'agricultural', 'air', 'aircraft', 'alarms', 'alcoholLiquor', 'amusements', 'animalRelated', 'aquaculture', 'aquaticMarineMarinaBerth', 'artsCrafts', 'autoElectrical', 'automotive', 'backpackerHostel', 'bakery', 'barsNightclubs', 'beautyHealth', 'beautyProducts', 'beautySalon', 'bikeAndMotorcycle', 'boardingKennels', 'boatsMarineMarinaBerth', 'bookkeeping', 'brokerage', 'builder', 'buildingAndConstruction', 'bus', 'butcher', 'cafeCoffeeShop', 'car', 'carBusTruck', 'carDealership', 'carRental', 'carWash', 'caravanPark', 'carpenter', 'catering', 'childCare', 'civil', 'cleaning', 'cleaningAndMaintenance', 'clinicalPractice', 'clothingAccessories', 'clothingFootwear', 'communication', 'communications', 'computerIT', 'computerAndInternet', 'construction', 'convenienceStore', 'copyLaminate', 'courier', 'cropHarvesting', 'customs', 'dairyFarming', 'deli', 'dental', 'detailing', 'distributors', 'drivingSchools', 'educationTraining', 'educational', 'electrical', 'employmentRecruitment', 'entertainment', 'entertainmentTechnology', 'export', 'farming', 'fertiliser', 'finance', 'financialServices', 'fishingForestry', 'floristNursery', 'foodBeverage', 'foodBeverageHospitality', 'franchiseBusinessOpportunities', 'freight', 'fruitVegFreshProduce', 'fruitPicking', 'functionCentre', 'furnitureTimber', 'gambling', 'gardenHousehold', 'gardenNurseries', 'gardening', 'glassCeramic', 'guestHouseBB', 'hairdresser', 'healthBeauty', 'healthSpa', 'hire', 'homeGarden', 'homeBased', 'homewareHardware', 'hospital', 'hotel', 'huntingTrap', 'import', 'importExportWholesale', 'industrialManufacturing', 'insemination', 'insurance', 'internet', 'irrigationServices', 'juiceBar', 'landClearing', 'landscaping', 'laundryDryCleaning', 'legal', 'leisureEntertainment', 'limousineTaxi', 'livestock', 'machinery', 'machineryMetal', 'managementRights', 'manufacturers', 'manufacturingEngineering', 'marine', 'massage', 'mechanicalRepair', 'media', 'medical', 'medicalPractice', 'miningEarthMoving', 'mobileServices', 'motel', 'motorcycle', 'musicRelated', 'mustering', 'nails', 'naturalTherapies', 'newsagency', 'nursery', 'nursingHome', 'officeSupplies', 'oilGas', 'panelBeating', 'paperPrinting', 'parkingCarSpace', 'pestRelated', 'pharmacies', 'plastic', 'plumbing', 'poolWater', 'postOffices', 'printPhoto', 'professional', 'propertyRealEstate', 'rail', 'recreationSport', 'recruitment', 'repair', 'resort', 'restaurant', 'retail', 'retailer', 'retirement', 'retirementVillage', 'road', 'rural', 'scientific', 'sea', 'security', 'serviceStation', 'services', 'shearing', 'sportsComplexGym', 'supermarket', 'takeawayFood', 'taxi', 'themePark', 'tours', 'training', 'transportDistribution', 'travel', 'truck', 'vending', 'water', 'welding', 'wholesale', 'wholesalers', 'woolClassing', 'wreckers', 'alcoholGrocery', 'cafeRestaurants', 'discountStore', 'ecoFriendly', 'green', 'grocery', 'specialityRetail', 'storage', 'travelAgency', 'varietyStore', 'chickenShop', 'seafoodShop', 'deliCafe', 'cropping', 'viticulture', 'grazing', 'horticulture', 'equine', 'farmlet', 'orchard', 'ruralLifestyle', 'onlineBusiness'].
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($property_type) && array_diff($property_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets land_area
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelLandArea
     */
    public function getLandArea()
    {
        return $this->container['land_area'];
    }

    /**
     * Sets land_area
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelLandArea $land_area land_area
     *
     * @return $this
     */
    public function setLandArea($land_area)
    {
        $this->container['land_area'] = $land_area;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelParking
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelParking $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets pdfs
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyPdf[]
     */
    public function getPdfs()
    {
        return $this->container['pdfs'];
    }

    /**
     * Sets pdfs
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyPdf[] $pdfs List of PDF files related to the listing
     *
     * @return $this
     */
    public function setPdfs($pdfs)
    {
        $this->container['pdfs'] = $pdfs;

        return $this;
    }

    /**
     * Gets is_marked_for_liveability
     *
     * @return bool
     */
    public function getIsMarkedForLiveability()
    {
        return $this->container['is_marked_for_liveability'];
    }

    /**
     * Sets is_marked_for_liveability
     *
     * @param bool $is_marked_for_liveability Is the property liveability compliant
     *
     * @return $this
     */
    public function setIsMarkedForLiveability($is_marked_for_liveability)
    {
        $this->container['is_marked_for_liveability'] = $is_marked_for_liveability;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param string $property_name Name of the property up to 70 characters
     *
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Short location information up to 30 character, e.g.: Greenhills Beach
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelPropertyMedia[] $images List of image files, photos or floor plans related to the listing.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Swagger\Client\Model\DomainListingAdminServiceV1ModelArea
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Swagger\Client\Model\DomainListingAdminServiceV1ModelArea $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
