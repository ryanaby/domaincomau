<?php
/**
 * PreMarketV1ListingRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PreMarketV1ListingRequest Class Doc Comment
 *
 * @category Class
 * @description Pre-portal listing request.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreMarketV1ListingRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreMarket.v1.ListingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listing_status' => '\Swagger\Client\Model\PreMarketV1PrePortalListingStatus',
        'address' => '\Swagger\Client\Model\PreMarketV1Address',
        'domain_agency_id' => 'int',
        'listing_provider' => 'string',
        'provider_ad_id' => 'string',
        'contacts' => '\Swagger\Client\Model\PreMarketV1Contact[]',
        'bedrooms' => 'float',
        'bathrooms' => 'float',
        'carspaces' => 'float',
        'summary' => 'string',
        'description' => 'string',
        'authority_executed_date' => '\DateTime',
        'reserve_price' => 'double',
        'estimated_sale_price' => '\Swagger\Client\Model\PreMarketV1Price',
        'property_types' => '\Swagger\Client\Model\PreMarketV1PropertyType[]',
        'authority_type' => '\Swagger\Client\Model\PreMarketV1AuthorityType',
        'exclusive_period_days' => 'int',
        'exclusive_continuing_period_days' => 'int',
        'exclusive_period_start_date' => '\DateTime',
        'statement_of_information' => '\Swagger\Client\Model\PreMarketV1StatementOfInformation',
        'images' => '\Swagger\Client\Model\PreMarketV1PropertyMedia[]',
        'metadata' => 'map[string,string]',
        'comment' => 'string',
        'sold_details' => '\Swagger\Client\Model\PreMarketV1SoldDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listing_status' => null,
        'address' => null,
        'domain_agency_id' => 'int32',
        'listing_provider' => null,
        'provider_ad_id' => null,
        'contacts' => null,
        'bedrooms' => 'float',
        'bathrooms' => 'float',
        'carspaces' => 'float',
        'summary' => null,
        'description' => null,
        'authority_executed_date' => 'date-time',
        'reserve_price' => 'double',
        'estimated_sale_price' => null,
        'property_types' => null,
        'authority_type' => null,
        'exclusive_period_days' => 'int32',
        'exclusive_continuing_period_days' => 'int32',
        'exclusive_period_start_date' => 'date-time',
        'statement_of_information' => null,
        'images' => null,
        'metadata' => null,
        'comment' => null,
        'sold_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_status' => 'listingStatus',
        'address' => 'address',
        'domain_agency_id' => 'domainAgencyId',
        'listing_provider' => 'listingProvider',
        'provider_ad_id' => 'providerAdId',
        'contacts' => 'contacts',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'carspaces' => 'carspaces',
        'summary' => 'summary',
        'description' => 'description',
        'authority_executed_date' => 'authorityExecutedDate',
        'reserve_price' => 'reservePrice',
        'estimated_sale_price' => 'estimatedSalePrice',
        'property_types' => 'propertyTypes',
        'authority_type' => 'authorityType',
        'exclusive_period_days' => 'exclusivePeriodDays',
        'exclusive_continuing_period_days' => 'exclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'exclusivePeriodStartDate',
        'statement_of_information' => 'statementOfInformation',
        'images' => 'images',
        'metadata' => 'metadata',
        'comment' => 'comment',
        'sold_details' => 'soldDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_status' => 'setListingStatus',
        'address' => 'setAddress',
        'domain_agency_id' => 'setDomainAgencyId',
        'listing_provider' => 'setListingProvider',
        'provider_ad_id' => 'setProviderAdId',
        'contacts' => 'setContacts',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'carspaces' => 'setCarspaces',
        'summary' => 'setSummary',
        'description' => 'setDescription',
        'authority_executed_date' => 'setAuthorityExecutedDate',
        'reserve_price' => 'setReservePrice',
        'estimated_sale_price' => 'setEstimatedSalePrice',
        'property_types' => 'setPropertyTypes',
        'authority_type' => 'setAuthorityType',
        'exclusive_period_days' => 'setExclusivePeriodDays',
        'exclusive_continuing_period_days' => 'setExclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'setExclusivePeriodStartDate',
        'statement_of_information' => 'setStatementOfInformation',
        'images' => 'setImages',
        'metadata' => 'setMetadata',
        'comment' => 'setComment',
        'sold_details' => 'setSoldDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_status' => 'getListingStatus',
        'address' => 'getAddress',
        'domain_agency_id' => 'getDomainAgencyId',
        'listing_provider' => 'getListingProvider',
        'provider_ad_id' => 'getProviderAdId',
        'contacts' => 'getContacts',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'carspaces' => 'getCarspaces',
        'summary' => 'getSummary',
        'description' => 'getDescription',
        'authority_executed_date' => 'getAuthorityExecutedDate',
        'reserve_price' => 'getReservePrice',
        'estimated_sale_price' => 'getEstimatedSalePrice',
        'property_types' => 'getPropertyTypes',
        'authority_type' => 'getAuthorityType',
        'exclusive_period_days' => 'getExclusivePeriodDays',
        'exclusive_continuing_period_days' => 'getExclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'getExclusivePeriodStartDate',
        'statement_of_information' => 'getStatementOfInformation',
        'images' => 'getImages',
        'metadata' => 'getMetadata',
        'comment' => 'getComment',
        'sold_details' => 'getSoldDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_status'] = isset($data['listing_status']) ? $data['listing_status'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['domain_agency_id'] = isset($data['domain_agency_id']) ? $data['domain_agency_id'] : null;
        $this->container['listing_provider'] = isset($data['listing_provider']) ? $data['listing_provider'] : null;
        $this->container['provider_ad_id'] = isset($data['provider_ad_id']) ? $data['provider_ad_id'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['carspaces'] = isset($data['carspaces']) ? $data['carspaces'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['authority_executed_date'] = isset($data['authority_executed_date']) ? $data['authority_executed_date'] : null;
        $this->container['reserve_price'] = isset($data['reserve_price']) ? $data['reserve_price'] : null;
        $this->container['estimated_sale_price'] = isset($data['estimated_sale_price']) ? $data['estimated_sale_price'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['authority_type'] = isset($data['authority_type']) ? $data['authority_type'] : null;
        $this->container['exclusive_period_days'] = isset($data['exclusive_period_days']) ? $data['exclusive_period_days'] : null;
        $this->container['exclusive_continuing_period_days'] = isset($data['exclusive_continuing_period_days']) ? $data['exclusive_continuing_period_days'] : null;
        $this->container['exclusive_period_start_date'] = isset($data['exclusive_period_start_date']) ? $data['exclusive_period_start_date'] : null;
        $this->container['statement_of_information'] = isset($data['statement_of_information']) ? $data['statement_of_information'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['sold_details'] = isset($data['sold_details']) ? $data['sold_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_status'] === null) {
            $invalidProperties[] = "'listing_status' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['domain_agency_id'] === null) {
            $invalidProperties[] = "'domain_agency_id' can't be null";
        }
        if ($this->container['listing_provider'] === null) {
            $invalidProperties[] = "'listing_provider' can't be null";
        }
        if ($this->container['provider_ad_id'] === null) {
            $invalidProperties[] = "'provider_ad_id' can't be null";
        }
        if ($this->container['bedrooms'] === null) {
            $invalidProperties[] = "'bedrooms' can't be null";
        }
        if ($this->container['bathrooms'] === null) {
            $invalidProperties[] = "'bathrooms' can't be null";
        }
        if ($this->container['carspaces'] === null) {
            $invalidProperties[] = "'carspaces' can't be null";
        }
        if ($this->container['estimated_sale_price'] === null) {
            $invalidProperties[] = "'estimated_sale_price' can't be null";
        }
        if ($this->container['property_types'] === null) {
            $invalidProperties[] = "'property_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_status
     *
     * @return \Swagger\Client\Model\PreMarketV1PrePortalListingStatus
     */
    public function getListingStatus()
    {
        return $this->container['listing_status'];
    }

    /**
     * Sets listing_status
     *
     * @param \Swagger\Client\Model\PreMarketV1PrePortalListingStatus $listing_status listing_status
     *
     * @return $this
     */
    public function setListingStatus($listing_status)
    {
        $this->container['listing_status'] = $listing_status;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\PreMarketV1Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\PreMarketV1Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets domain_agency_id
     *
     * @return int
     */
    public function getDomainAgencyId()
    {
        return $this->container['domain_agency_id'];
    }

    /**
     * Sets domain_agency_id
     *
     * @param int $domain_agency_id The Domain agency ID. Must match an existing Domain agency ID.
     *
     * @return $this
     */
    public function setDomainAgencyId($domain_agency_id)
    {
        $this->container['domain_agency_id'] = $domain_agency_id;

        return $this;
    }

    /**
     * Gets listing_provider
     *
     * @return string
     */
    public function getListingProvider()
    {
        return $this->container['listing_provider'];
    }

    /**
     * Sets listing_provider
     *
     * @param string $listing_provider A string identifying the source of the listing.
     *
     * @return $this
     */
    public function setListingProvider($listing_provider)
    {
        $this->container['listing_provider'] = $listing_provider;

        return $this;
    }

    /**
     * Gets provider_ad_id
     *
     * @return string
     */
    public function getProviderAdId()
    {
        return $this->container['provider_ad_id'];
    }

    /**
     * Sets provider_ad_id
     *
     * @param string $provider_ad_id External Advertisement Id of up to 50 characters will be stored.  This value is correlated with actual Domain listing when it is created, and it should be unique for the listing provider.  This value is case-insensitive (meaning AAAA will update aaaa).
     *
     * @return $this
     */
    public function setProviderAdId($provider_ad_id)
    {
        $this->container['provider_ad_id'] = $provider_ad_id;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Swagger\Client\Model\PreMarketV1Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Swagger\Client\Model\PreMarketV1Contact[] $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return float
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param float $bedrooms Number of bedrooms divisible by 0.5.
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float $bathrooms Number of bathrooms divisible by 0.5.
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets carspaces
     *
     * @return float
     */
    public function getCarspaces()
    {
        return $this->container['carspaces'];
    }

    /**
     * Sets carspaces
     *
     * @param float $carspaces Number of car spaces divisible by 0.5.
     *
     * @return $this
     */
    public function setCarspaces($carspaces)
    {
        $this->container['carspaces'] = $carspaces;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary Headline of the advertisement. Any HTML will be stripped out.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the property.  Allow up to 6000 characters in length. The following HTML elements are permitted: ```<br />, <p></p>, &nbsp;``` . HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets authority_executed_date
     *
     * @return \DateTime
     */
    public function getAuthorityExecutedDate()
    {
        return $this->container['authority_executed_date'];
    }

    /**
     * Sets authority_executed_date
     *
     * @param \DateTime $authority_executed_date The date on which the authority contract was executed.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setAuthorityExecutedDate($authority_executed_date)
    {
        $this->container['authority_executed_date'] = $authority_executed_date;

        return $this;
    }

    /**
     * Gets reserve_price
     *
     * @return double
     */
    public function getReservePrice()
    {
        return $this->container['reserve_price'];
    }

    /**
     * Sets reserve_price
     *
     * @param double $reserve_price Vendor reserve price.
     *
     * @return $this
     */
    public function setReservePrice($reserve_price)
    {
        $this->container['reserve_price'] = $reserve_price;

        return $this;
    }

    /**
     * Gets estimated_sale_price
     *
     * @return \Swagger\Client\Model\PreMarketV1Price
     */
    public function getEstimatedSalePrice()
    {
        return $this->container['estimated_sale_price'];
    }

    /**
     * Sets estimated_sale_price
     *
     * @param \Swagger\Client\Model\PreMarketV1Price $estimated_sale_price estimated_sale_price
     *
     * @return $this
     */
    public function setEstimatedSalePrice($estimated_sale_price)
    {
        $this->container['estimated_sale_price'] = $estimated_sale_price;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return \Swagger\Client\Model\PreMarketV1PropertyType[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param \Swagger\Client\Model\PreMarketV1PropertyType[] $property_types The property types (e.g. house, apartment/unit/flat, etc.).
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets authority_type
     *
     * @return \Swagger\Client\Model\PreMarketV1AuthorityType
     */
    public function getAuthorityType()
    {
        return $this->container['authority_type'];
    }

    /**
     * Sets authority_type
     *
     * @param \Swagger\Client\Model\PreMarketV1AuthorityType $authority_type authority_type
     *
     * @return $this
     */
    public function setAuthorityType($authority_type)
    {
        $this->container['authority_type'] = $authority_type;

        return $this;
    }

    /**
     * Gets exclusive_period_days
     *
     * @return int
     */
    public function getExclusivePeriodDays()
    {
        return $this->container['exclusive_period_days'];
    }

    /**
     * Sets exclusive_period_days
     *
     * @param int $exclusive_period_days The time (in days) that the agent has exclusive authority to sell the property.
     *
     * @return $this
     */
    public function setExclusivePeriodDays($exclusive_period_days)
    {
        $this->container['exclusive_period_days'] = $exclusive_period_days;

        return $this;
    }

    /**
     * Gets exclusive_continuing_period_days
     *
     * @return int
     */
    public function getExclusiveContinuingPeriodDays()
    {
        return $this->container['exclusive_continuing_period_days'];
    }

    /**
     * Sets exclusive_continuing_period_days
     *
     * @param int $exclusive_continuing_period_days The time (in days) that exclusive authority has been extended.
     *
     * @return $this
     */
    public function setExclusiveContinuingPeriodDays($exclusive_continuing_period_days)
    {
        $this->container['exclusive_continuing_period_days'] = $exclusive_continuing_period_days;

        return $this;
    }

    /**
     * Gets exclusive_period_start_date
     *
     * @return \DateTime
     */
    public function getExclusivePeriodStartDate()
    {
        return $this->container['exclusive_period_start_date'];
    }

    /**
     * Sets exclusive_period_start_date
     *
     * @param \DateTime $exclusive_period_start_date Start date of the exclusivity period.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setExclusivePeriodStartDate($exclusive_period_start_date)
    {
        $this->container['exclusive_period_start_date'] = $exclusive_period_start_date;

        return $this;
    }

    /**
     * Gets statement_of_information
     *
     * @return \Swagger\Client\Model\PreMarketV1StatementOfInformation
     */
    public function getStatementOfInformation()
    {
        return $this->container['statement_of_information'];
    }

    /**
     * Sets statement_of_information
     *
     * @param \Swagger\Client\Model\PreMarketV1StatementOfInformation $statement_of_information statement_of_information
     *
     * @return $this
     */
    public function setStatementOfInformation($statement_of_information)
    {
        $this->container['statement_of_information'] = $statement_of_information;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\PreMarketV1PropertyMedia[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\PreMarketV1PropertyMedia[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata Optional listing metadata.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Optional listing comment.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets sold_details
     *
     * @return \Swagger\Client\Model\PreMarketV1SoldDetails
     */
    public function getSoldDetails()
    {
        return $this->container['sold_details'];
    }

    /**
     * Sets sold_details
     *
     * @param \Swagger\Client\Model\PreMarketV1SoldDetails $sold_details sold_details
     *
     * @return $this
     */
    public function setSoldDetails($sold_details)
    {
        $this->container['sold_details'] = $sold_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
