<?php
/**
 * SalesResultsV1SaleListing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesResultsV1SaleListing Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesResultsV1SaleListing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesResults.v1.SaleListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_number' => 'string',
        'street_number' => 'string',
        'street_name' => 'string',
        'street_type' => 'string',
        'suburb' => 'string',
        'postcode' => 'string',
        'state' => 'string',
        'geo_location' => '\Swagger\Client\Model\SalesResultsV1GeoLocation',
        'property_type' => 'string',
        'bedrooms' => 'int',
        'bathrooms' => 'int',
        'carspaces' => 'float',
        'price' => 'int',
        'result' => 'string',
        'agent' => 'string',
        'agency_name' => 'string',
        'agency_profile_page_url' => 'string',
        'id' => 'int',
        'agency_id' => 'int',
        'property_details_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_number' => null,
        'street_number' => null,
        'street_name' => null,
        'street_type' => null,
        'suburb' => null,
        'postcode' => null,
        'state' => null,
        'geo_location' => null,
        'property_type' => null,
        'bedrooms' => 'int32',
        'bathrooms' => 'int32',
        'carspaces' => 'float',
        'price' => 'int32',
        'result' => null,
        'agent' => null,
        'agency_name' => null,
        'agency_profile_page_url' => null,
        'id' => 'int32',
        'agency_id' => 'int32',
        'property_details_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_number' => 'unitNumber',
        'street_number' => 'streetNumber',
        'street_name' => 'streetName',
        'street_type' => 'streetType',
        'suburb' => 'suburb',
        'postcode' => 'postcode',
        'state' => 'state',
        'geo_location' => 'geoLocation',
        'property_type' => 'propertyType',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'carspaces' => 'carspaces',
        'price' => 'price',
        'result' => 'result',
        'agent' => 'agent',
        'agency_name' => 'agencyName',
        'agency_profile_page_url' => 'agencyProfilePageUrl',
        'id' => 'id',
        'agency_id' => 'agencyId',
        'property_details_url' => 'propertyDetailsUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_number' => 'setUnitNumber',
        'street_number' => 'setStreetNumber',
        'street_name' => 'setStreetName',
        'street_type' => 'setStreetType',
        'suburb' => 'setSuburb',
        'postcode' => 'setPostcode',
        'state' => 'setState',
        'geo_location' => 'setGeoLocation',
        'property_type' => 'setPropertyType',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'carspaces' => 'setCarspaces',
        'price' => 'setPrice',
        'result' => 'setResult',
        'agent' => 'setAgent',
        'agency_name' => 'setAgencyName',
        'agency_profile_page_url' => 'setAgencyProfilePageUrl',
        'id' => 'setId',
        'agency_id' => 'setAgencyId',
        'property_details_url' => 'setPropertyDetailsUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_number' => 'getUnitNumber',
        'street_number' => 'getStreetNumber',
        'street_name' => 'getStreetName',
        'street_type' => 'getStreetType',
        'suburb' => 'getSuburb',
        'postcode' => 'getPostcode',
        'state' => 'getState',
        'geo_location' => 'getGeoLocation',
        'property_type' => 'getPropertyType',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'carspaces' => 'getCarspaces',
        'price' => 'getPrice',
        'result' => 'getResult',
        'agent' => 'getAgent',
        'agency_name' => 'getAgencyName',
        'agency_profile_page_url' => 'getAgencyProfilePageUrl',
        'id' => 'getId',
        'agency_id' => 'getAgencyId',
        'property_details_url' => 'getPropertyDetailsUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['street_type'] = isset($data['street_type']) ? $data['street_type'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['geo_location'] = isset($data['geo_location']) ? $data['geo_location'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['carspaces'] = isset($data['carspaces']) ? $data['carspaces'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['agency_name'] = isset($data['agency_name']) ? $data['agency_name'] : null;
        $this->container['agency_profile_page_url'] = isset($data['agency_profile_page_url']) ? $data['agency_profile_page_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['agency_id'] = isset($data['agency_id']) ? $data['agency_id'] : null;
        $this->container['property_details_url'] = isset($data['property_details_url']) ? $data['property_details_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number Gets or Sets UnitNumber
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number Gets or Sets StreetNumber
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name Gets or Sets StreetName
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_type
     *
     * @return string
     */
    public function getStreetType()
    {
        return $this->container['street_type'];
    }

    /**
     * Sets street_type
     *
     * @param string $street_type Gets or Sets StreetType
     *
     * @return $this
     */
    public function setStreetType($street_type)
    {
        $this->container['street_type'] = $street_type;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Gets or Sets Suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Gets or Sets Postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Gets or Sets State
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets geo_location
     *
     * @return \Swagger\Client\Model\SalesResultsV1GeoLocation
     */
    public function getGeoLocation()
    {
        return $this->container['geo_location'];
    }

    /**
     * Sets geo_location
     *
     * @param \Swagger\Client\Model\SalesResultsV1GeoLocation $geo_location geo_location
     *
     * @return $this
     */
    public function setGeoLocation($geo_location)
    {
        $this->container['geo_location'] = $geo_location;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Gets or Sets PropertyType
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms Gets or Sets Bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int $bathrooms Gets or Sets Bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets carspaces
     *
     * @return float
     */
    public function getCarspaces()
    {
        return $this->container['carspaces'];
    }

    /**
     * Sets carspaces
     *
     * @param float $carspaces Gets or Sets Carspaces
     *
     * @return $this
     */
    public function setCarspaces($carspaces)
    {
        $this->container['carspaces'] = $carspaces;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price Gets or Sets Price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result Gets or Sets Result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return string
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param string $agent Gets or Sets Agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets agency_name
     *
     * @return string
     */
    public function getAgencyName()
    {
        return $this->container['agency_name'];
    }

    /**
     * Sets agency_name
     *
     * @param string $agency_name Gets or Sets AgencyName
     *
     * @return $this
     */
    public function setAgencyName($agency_name)
    {
        $this->container['agency_name'] = $agency_name;

        return $this;
    }

    /**
     * Gets agency_profile_page_url
     *
     * @return string
     */
    public function getAgencyProfilePageUrl()
    {
        return $this->container['agency_profile_page_url'];
    }

    /**
     * Sets agency_profile_page_url
     *
     * @param string $agency_profile_page_url Gets or Sets AgencyProfilePageUrl
     *
     * @return $this
     */
    public function setAgencyProfilePageUrl($agency_profile_page_url)
    {
        $this->container['agency_profile_page_url'] = $agency_profile_page_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Listing id on Domain
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets agency_id
     *
     * @return int
     */
    public function getAgencyId()
    {
        return $this->container['agency_id'];
    }

    /**
     * Sets agency_id
     *
     * @param int $agency_id agency_id
     *
     * @return $this
     */
    public function setAgencyId($agency_id)
    {
        $this->container['agency_id'] = $agency_id;

        return $this;
    }

    /**
     * Gets property_details_url
     *
     * @return string
     */
    public function getPropertyDetailsUrl()
    {
        return $this->container['property_details_url'];
    }

    /**
     * Sets property_details_url
     *
     * @param string $property_details_url property_details_url
     *
     * @return $this
     */
    public function setPropertyDetailsUrl($property_details_url)
    {
        $this->container['property_details_url'] = $property_details_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
