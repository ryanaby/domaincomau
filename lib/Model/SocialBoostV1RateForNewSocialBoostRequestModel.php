<?php
/**
 * SocialBoostV1RateForNewSocialBoostRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SocialBoostV1RateForNewSocialBoostRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SocialBoostV1RateForNewSocialBoostRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SocialBoost.v1.RateForNewSocialBoostRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agency_id' => 'int',
        'agent_first_name' => 'string',
        'agent_last_name' => 'string',
        'agent_email' => 'string',
        'suburb' => 'string',
        'postcode' => 'string',
        'state' => 'string',
        'property_type' => 'string',
        'is_rural' => 'bool',
        'listing_type' => 'string',
        'price' => 'double',
        'channel' => 'string',
        'booking_start_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agency_id' => 'int32',
        'agent_first_name' => null,
        'agent_last_name' => null,
        'agent_email' => null,
        'suburb' => null,
        'postcode' => null,
        'state' => null,
        'property_type' => null,
        'is_rural' => null,
        'listing_type' => null,
        'price' => 'double',
        'channel' => null,
        'booking_start_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agency_id' => 'agencyId',
        'agent_first_name' => 'agentFirstName',
        'agent_last_name' => 'agentLastName',
        'agent_email' => 'agentEmail',
        'suburb' => 'suburb',
        'postcode' => 'postcode',
        'state' => 'state',
        'property_type' => 'propertyType',
        'is_rural' => 'isRural',
        'listing_type' => 'listingType',
        'price' => 'price',
        'channel' => 'channel',
        'booking_start_date' => 'bookingStartDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agency_id' => 'setAgencyId',
        'agent_first_name' => 'setAgentFirstName',
        'agent_last_name' => 'setAgentLastName',
        'agent_email' => 'setAgentEmail',
        'suburb' => 'setSuburb',
        'postcode' => 'setPostcode',
        'state' => 'setState',
        'property_type' => 'setPropertyType',
        'is_rural' => 'setIsRural',
        'listing_type' => 'setListingType',
        'price' => 'setPrice',
        'channel' => 'setChannel',
        'booking_start_date' => 'setBookingStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agency_id' => 'getAgencyId',
        'agent_first_name' => 'getAgentFirstName',
        'agent_last_name' => 'getAgentLastName',
        'agent_email' => 'getAgentEmail',
        'suburb' => 'getSuburb',
        'postcode' => 'getPostcode',
        'state' => 'getState',
        'property_type' => 'getPropertyType',
        'is_rural' => 'getIsRural',
        'listing_type' => 'getListingType',
        'price' => 'getPrice',
        'channel' => 'getChannel',
        'booking_start_date' => 'getBookingStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROPERTY_TYPE_UNKNOWN = 'Unknown';
    const PROPERTY_TYPE_ACREAGE_SEMI_RURAL = 'AcreageSemiRural';
    const PROPERTY_TYPE_APARTMENT_UNIT_FLAT = 'ApartmentUnitFlat';
    const PROPERTY_TYPE_AQUACULTURE = 'Aquaculture';
    const PROPERTY_TYPE_BLOCK_OF_UNITS = 'BlockOfUnits';
    const PROPERTY_TYPE_CARSPACE = 'Carspace';
    const PROPERTY_TYPE_DAIRY_FARMING = 'DairyFarming';
    const PROPERTY_TYPE_DEVELOPMENT_SITE = 'DevelopmentSite';
    const PROPERTY_TYPE_DUPLEX = 'Duplex';
    const PROPERTY_TYPE_FARM = 'Farm';
    const PROPERTY_TYPE_FISHING_FORESTRY = 'FishingForestry';
    const PROPERTY_TYPE_NEW_HOME_DESIGNS = 'NewHomeDesigns';
    const PROPERTY_TYPE_HOUSE = 'House';
    const PROPERTY_TYPE_NEW_HOUSE_LAND = 'NewHouseLand';
    const PROPERTY_TYPE_IRRIGATION_SERVICES = 'IrrigationServices';
    const PROPERTY_TYPE_NEW_LAND = 'NewLand';
    const PROPERTY_TYPE_LIVESTOCK = 'Livestock';
    const PROPERTY_TYPE_NEW_APARTMENTS = 'NewApartments';
    const PROPERTY_TYPE_PENTHOUSE = 'Penthouse';
    const PROPERTY_TYPE_RETIREMENT = 'Retirement';
    const PROPERTY_TYPE_RETIREMENT_VILLAGE = 'RetirementVillage';
    const PROPERTY_TYPE_RURAL = 'Rural';
    const PROPERTY_TYPE_SEMI_DETACHED = 'SemiDetached';
    const PROPERTY_TYPE_SPECIALIST_FARM = 'SpecialistFarm';
    const PROPERTY_TYPE_STUDIO = 'Studio';
    const PROPERTY_TYPE_TERRACE = 'Terrace';
    const PROPERTY_TYPE_TOWNHOUSE = 'Townhouse';
    const PROPERTY_TYPE_VACANT_LAND = 'VacantLand';
    const PROPERTY_TYPE_VILLA = 'Villa';
    const PROPERTY_TYPE_CROPPING = 'Cropping';
    const PROPERTY_TYPE_VITICULTURE = 'Viticulture';
    const PROPERTY_TYPE_MIXED_FARMING = 'MixedFarming';
    const PROPERTY_TYPE_GRAZING = 'Grazing';
    const PROPERTY_TYPE_HORTICULTURE = 'Horticulture';
    const PROPERTY_TYPE_EQUINE = 'Equine';
    const PROPERTY_TYPE_FARMLET = 'Farmlet';
    const PROPERTY_TYPE_ORCHARD = 'Orchard';
    const PROPERTY_TYPE_RURAL_LIFESTYLE = 'RuralLifestyle';
    const LISTING_TYPE_SALE = 'Sale';
    const LISTING_TYPE_RENT = 'Rent';
    const LISTING_TYPE_NONE = 'None';
    const CHANNEL_RESIDENTIAL = 'Residential';
    const CHANNEL_COMMERCIAL = 'Commercial';
    const CHANNEL_BUSINESS = 'Business';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypeAllowableValues()
    {
        return [
            self::PROPERTY_TYPE_UNKNOWN,
            self::PROPERTY_TYPE_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPE_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPE_AQUACULTURE,
            self::PROPERTY_TYPE_BLOCK_OF_UNITS,
            self::PROPERTY_TYPE_CARSPACE,
            self::PROPERTY_TYPE_DAIRY_FARMING,
            self::PROPERTY_TYPE_DEVELOPMENT_SITE,
            self::PROPERTY_TYPE_DUPLEX,
            self::PROPERTY_TYPE_FARM,
            self::PROPERTY_TYPE_FISHING_FORESTRY,
            self::PROPERTY_TYPE_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPE_HOUSE,
            self::PROPERTY_TYPE_NEW_HOUSE_LAND,
            self::PROPERTY_TYPE_IRRIGATION_SERVICES,
            self::PROPERTY_TYPE_NEW_LAND,
            self::PROPERTY_TYPE_LIVESTOCK,
            self::PROPERTY_TYPE_NEW_APARTMENTS,
            self::PROPERTY_TYPE_PENTHOUSE,
            self::PROPERTY_TYPE_RETIREMENT,
            self::PROPERTY_TYPE_RETIREMENT_VILLAGE,
            self::PROPERTY_TYPE_RURAL,
            self::PROPERTY_TYPE_SEMI_DETACHED,
            self::PROPERTY_TYPE_SPECIALIST_FARM,
            self::PROPERTY_TYPE_STUDIO,
            self::PROPERTY_TYPE_TERRACE,
            self::PROPERTY_TYPE_TOWNHOUSE,
            self::PROPERTY_TYPE_VACANT_LAND,
            self::PROPERTY_TYPE_VILLA,
            self::PROPERTY_TYPE_CROPPING,
            self::PROPERTY_TYPE_VITICULTURE,
            self::PROPERTY_TYPE_MIXED_FARMING,
            self::PROPERTY_TYPE_GRAZING,
            self::PROPERTY_TYPE_HORTICULTURE,
            self::PROPERTY_TYPE_EQUINE,
            self::PROPERTY_TYPE_FARMLET,
            self::PROPERTY_TYPE_ORCHARD,
            self::PROPERTY_TYPE_RURAL_LIFESTYLE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingTypeAllowableValues()
    {
        return [
            self::LISTING_TYPE_SALE,
            self::LISTING_TYPE_RENT,
            self::LISTING_TYPE_NONE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_RESIDENTIAL,
            self::CHANNEL_COMMERCIAL,
            self::CHANNEL_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agency_id'] = isset($data['agency_id']) ? $data['agency_id'] : null;
        $this->container['agent_first_name'] = isset($data['agent_first_name']) ? $data['agent_first_name'] : null;
        $this->container['agent_last_name'] = isset($data['agent_last_name']) ? $data['agent_last_name'] : null;
        $this->container['agent_email'] = isset($data['agent_email']) ? $data['agent_email'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['is_rural'] = isset($data['is_rural']) ? $data['is_rural'] : null;
        $this->container['listing_type'] = isset($data['listing_type']) ? $data['listing_type'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['booking_start_date'] = isset($data['booking_start_date']) ? $data['booking_start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['agency_id'] === null) {
            $invalidProperties[] = "'agency_id' can't be null";
        }
        if ($this->container['agent_first_name'] === null) {
            $invalidProperties[] = "'agent_first_name' can't be null";
        }
        if ($this->container['agent_last_name'] === null) {
            $invalidProperties[] = "'agent_last_name' can't be null";
        }
        if ($this->container['agent_email'] === null) {
            $invalidProperties[] = "'agent_email' can't be null";
        }
        if ($this->container['suburb'] === null) {
            $invalidProperties[] = "'suburb' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['property_type'] === null) {
            $invalidProperties[] = "'property_type' can't be null";
        }
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($this->container['property_type']) && !in_array($this->container['property_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'property_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_rural'] === null) {
            $invalidProperties[] = "'is_rural' can't be null";
        }
        if ($this->container['listing_type'] === null) {
            $invalidProperties[] = "'listing_type' can't be null";
        }
        $allowedValues = $this->getListingTypeAllowableValues();
        if (!is_null($this->container['listing_type']) && !in_array($this->container['listing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'listing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agency_id
     *
     * @return int
     */
    public function getAgencyId()
    {
        return $this->container['agency_id'];
    }

    /**
     * Sets agency_id
     *
     * @param int $agency_id Id of the agency for whom rates are to be calculated.
     *
     * @return $this
     */
    public function setAgencyId($agency_id)
    {
        $this->container['agency_id'] = $agency_id;

        return $this;
    }

    /**
     * Gets agent_first_name
     *
     * @return string
     */
    public function getAgentFirstName()
    {
        return $this->container['agent_first_name'];
    }

    /**
     * Sets agent_first_name
     *
     * @param string $agent_first_name The first name of the primary agent associated with the listing.
     *
     * @return $this
     */
    public function setAgentFirstName($agent_first_name)
    {
        $this->container['agent_first_name'] = $agent_first_name;

        return $this;
    }

    /**
     * Gets agent_last_name
     *
     * @return string
     */
    public function getAgentLastName()
    {
        return $this->container['agent_last_name'];
    }

    /**
     * Sets agent_last_name
     *
     * @param string $agent_last_name The last name of the primary agent associated with the listing
     *
     * @return $this
     */
    public function setAgentLastName($agent_last_name)
    {
        $this->container['agent_last_name'] = $agent_last_name;

        return $this;
    }

    /**
     * Gets agent_email
     *
     * @return string
     */
    public function getAgentEmail()
    {
        return $this->container['agent_email'];
    }

    /**
     * Sets agent_email
     *
     * @param string $agent_email The email of the primary agent associated with the listing.
     *
     * @return $this
     */
    public function setAgentEmail($agent_email)
    {
        $this->container['agent_email'] = $agent_email;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Suburb for which rates are to be calculated.
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Postcode for which rates are to be calculated.
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State for which rates are to be calculated
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type The property type of the listing e.g. House
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!in_array($property_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets is_rural
     *
     * @return bool
     */
    public function getIsRural()
    {
        return $this->container['is_rural'];
    }

    /**
     * Sets is_rural
     *
     * @param bool $is_rural Whether to return the normal or rural rates
     *
     * @return $this
     */
    public function setIsRural($is_rural)
    {
        $this->container['is_rural'] = $is_rural;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return string
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param string $listing_type Type of the listing whether sale or rent
     *
     * @return $this
     */
    public function setListingType($listing_type)
    {
        $allowedValues = $this->getListingTypeAllowableValues();
        if (!in_array($listing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'listing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price The value of the listing
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel The intended channel of the listing.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets booking_start_date
     *
     * @return \DateTime
     */
    public function getBookingStartDate()
    {
        return $this->container['booking_start_date'];
    }

    /**
     * Sets booking_start_date
     *
     * @param \DateTime $booking_start_date Date at which the booking will start. Defaults to today. Allows for returning future contracts/price changes.
     *
     * @return $this
     */
    public function setBookingStartDate($booking_start_date)
    {
        $this->container['booking_start_date'] = $booking_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
