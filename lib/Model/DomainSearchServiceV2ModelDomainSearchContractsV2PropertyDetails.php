<?php
/**
 * DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.SearchService.v2.Model.DomainSearchContractsV2PropertyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => 'string',
        'features' => 'string[]',
        'property_type' => 'string',
        'all_property_types' => 'string[]',
        'bathrooms' => 'float',
        'bedrooms' => 'float',
        'carspaces' => 'int',
        'unit_number' => 'string',
        'street_number' => 'string',
        'street' => 'string',
        'area' => 'string',
        'region' => 'string',
        'suburb' => 'string',
        'suburb_id' => 'int',
        'postcode' => 'string',
        'displayable_address' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'map_certainty' => 'int',
        'land_area' => 'double',
        'building_area' => 'double',
        'only_show_properties' => 'string[]',
        'display_address_type' => 'string',
        'is_rural' => 'bool',
        'top_spot_keywords' => 'string[]',
        'is_new' => 'bool',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'state' => null,
        'features' => null,
        'property_type' => null,
        'all_property_types' => null,
        'bathrooms' => 'float',
        'bedrooms' => 'float',
        'carspaces' => 'int32',
        'unit_number' => null,
        'street_number' => null,
        'street' => null,
        'area' => null,
        'region' => null,
        'suburb' => null,
        'suburb_id' => 'int32',
        'postcode' => null,
        'displayable_address' => null,
        'latitude' => 'float',
        'longitude' => 'float',
        'map_certainty' => 'int32',
        'land_area' => 'double',
        'building_area' => 'double',
        'only_show_properties' => null,
        'display_address_type' => null,
        'is_rural' => null,
        'top_spot_keywords' => null,
        'is_new' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'features' => 'features',
        'property_type' => 'propertyType',
        'all_property_types' => 'allPropertyTypes',
        'bathrooms' => 'bathrooms',
        'bedrooms' => 'bedrooms',
        'carspaces' => 'carspaces',
        'unit_number' => 'unitNumber',
        'street_number' => 'streetNumber',
        'street' => 'street',
        'area' => 'area',
        'region' => 'region',
        'suburb' => 'suburb',
        'suburb_id' => 'suburbId',
        'postcode' => 'postcode',
        'displayable_address' => 'displayableAddress',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'map_certainty' => 'mapCertainty',
        'land_area' => 'landArea',
        'building_area' => 'buildingArea',
        'only_show_properties' => 'onlyShowProperties',
        'display_address_type' => 'displayAddressType',
        'is_rural' => 'isRural',
        'top_spot_keywords' => 'topSpotKeywords',
        'is_new' => 'isNew',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'features' => 'setFeatures',
        'property_type' => 'setPropertyType',
        'all_property_types' => 'setAllPropertyTypes',
        'bathrooms' => 'setBathrooms',
        'bedrooms' => 'setBedrooms',
        'carspaces' => 'setCarspaces',
        'unit_number' => 'setUnitNumber',
        'street_number' => 'setStreetNumber',
        'street' => 'setStreet',
        'area' => 'setArea',
        'region' => 'setRegion',
        'suburb' => 'setSuburb',
        'suburb_id' => 'setSuburbId',
        'postcode' => 'setPostcode',
        'displayable_address' => 'setDisplayableAddress',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'map_certainty' => 'setMapCertainty',
        'land_area' => 'setLandArea',
        'building_area' => 'setBuildingArea',
        'only_show_properties' => 'setOnlyShowProperties',
        'display_address_type' => 'setDisplayAddressType',
        'is_rural' => 'setIsRural',
        'top_spot_keywords' => 'setTopSpotKeywords',
        'is_new' => 'setIsNew',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'features' => 'getFeatures',
        'property_type' => 'getPropertyType',
        'all_property_types' => 'getAllPropertyTypes',
        'bathrooms' => 'getBathrooms',
        'bedrooms' => 'getBedrooms',
        'carspaces' => 'getCarspaces',
        'unit_number' => 'getUnitNumber',
        'street_number' => 'getStreetNumber',
        'street' => 'getStreet',
        'area' => 'getArea',
        'region' => 'getRegion',
        'suburb' => 'getSuburb',
        'suburb_id' => 'getSuburbId',
        'postcode' => 'getPostcode',
        'displayable_address' => 'getDisplayableAddress',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'map_certainty' => 'getMapCertainty',
        'land_area' => 'getLandArea',
        'building_area' => 'getBuildingArea',
        'only_show_properties' => 'getOnlyShowProperties',
        'display_address_type' => 'getDisplayAddressType',
        'is_rural' => 'getIsRural',
        'top_spot_keywords' => 'getTopSpotKeywords',
        'is_new' => 'getIsNew',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACT = 'ACT';
    const STATE_NSW = 'NSW';
    const STATE_QLD = 'QLD';
    const STATE_VIC = 'VIC';
    const STATE_SA = 'SA';
    const STATE_WA = 'WA';
    const STATE_NT = 'NT';
    const STATE_TAS = 'TAS';
    const FEATURES_UNRECOGNISED = 'Unrecognised';
    const FEATURES_AIR_CONDITIONING = 'AirConditioning';
    const FEATURES_BUILT_IN_WARDROBES = 'BuiltInWardrobes';
    const FEATURES_CABLE_OR_SATELLITE = 'CableOrSatellite';
    const FEATURES_ENSUITE = 'Ensuite';
    const FEATURES_FLOORBOARDS = 'Floorboards';
    const FEATURES_GAS = 'Gas';
    const FEATURES_INTERNAL_LAUNDRY = 'InternalLaundry';
    const FEATURES_PETS_ALLOWED = 'PetsAllowed';
    const FEATURES_SECURE_PARKING = 'SecureParking';
    const FEATURES_SWIMMING_POOL = 'SwimmingPool';
    const FEATURES_FURNISHED = 'Furnished';
    const FEATURES_GROUND_FLOOR = 'GroundFloor';
    const FEATURES_WATER_VIEWS = 'WaterViews';
    const FEATURES_NORTH_FACING = 'NorthFacing';
    const FEATURES_CITY_VIEWS = 'CityViews';
    const FEATURES_INDOOR_SPA = 'IndoorSpa';
    const FEATURES_GYM = 'Gym';
    const FEATURES_ALARM_SYSTEM = 'AlarmSystem';
    const FEATURES_INTERCOM = 'Intercom';
    const FEATURES_BROADBAND_INTERNET_ACCESS = 'BroadbandInternetAccess';
    const FEATURES_BATH = 'Bath';
    const FEATURES_FIREPLACE = 'Fireplace';
    const FEATURES_SEPARATE_DINING_ROOM = 'SeparateDiningRoom';
    const FEATURES_HEATING = 'Heating';
    const FEATURES_DISHWASHER = 'Dishwasher';
    const FEATURES_STUDY = 'Study';
    const FEATURES_TENNIS_COURT = 'TennisCourt';
    const FEATURES_SHED = 'Shed';
    const FEATURES_FULLY_FENCED = 'FullyFenced';
    const FEATURES_BALCONY_DECK = 'BalconyDeck';
    const FEATURES_GARDEN_COURTYARD = 'GardenCourtyard';
    const FEATURES_OUTDOOR_SPA = 'OutdoorSpa';
    const FEATURES_DOUBLE_GLAZED_WINDOWS = 'DoubleGlazedWindows';
    const FEATURES_ENERGY_EFFICIENT_APPLIANCES = 'EnergyEfficientAppliances';
    const FEATURES_WATER_EFFICIENT_APPLIANCES = 'WaterEfficientAppliances';
    const FEATURES_WALL_CEILING_INSULATION = 'WallCeilingInsulation';
    const FEATURES_RAINWATER_STORAGE_TANK = 'RainwaterStorageTank';
    const FEATURES_GREYWATER_SYSTEM = 'GreywaterSystem';
    const FEATURES_WATER_EFFICIENT_FIXTURES = 'WaterEfficientFixtures';
    const FEATURES_SOLAR_HOT_WATER = 'SolarHotWater';
    const FEATURES_SOLAR_PANELS = 'SolarPanels';
    const PROPERTY_TYPE_UNKNOWN = 'Unknown';
    const PROPERTY_TYPE_ACREAGE_SEMI_RURAL = 'AcreageSemiRural';
    const PROPERTY_TYPE_APARTMENT_UNIT_FLAT = 'ApartmentUnitFlat';
    const PROPERTY_TYPE_AQUACULTURE = 'Aquaculture';
    const PROPERTY_TYPE_BLOCK_OF_UNITS = 'BlockOfUnits';
    const PROPERTY_TYPE_CAR_SPACE = 'CarSpace';
    const PROPERTY_TYPE_DAIRY_FARMING = 'DairyFarming';
    const PROPERTY_TYPE_DEVELOPMENT_SITE = 'DevelopmentSite';
    const PROPERTY_TYPE_DUPLEX = 'Duplex';
    const PROPERTY_TYPE_FARM = 'Farm';
    const PROPERTY_TYPE_FISHING_FORESTRY = 'FishingForestry';
    const PROPERTY_TYPE_NEW_HOME_DESIGNS = 'NewHomeDesigns';
    const PROPERTY_TYPE_HOUSE = 'House';
    const PROPERTY_TYPE_NEW_HOUSE_LAND = 'NewHouseLand';
    const PROPERTY_TYPE_IRRIGATION_SERVICES = 'IrrigationServices';
    const PROPERTY_TYPE_NEW_LAND = 'NewLand';
    const PROPERTY_TYPE_LIVESTOCK = 'Livestock';
    const PROPERTY_TYPE_NEW_APARTMENTS = 'NewApartments';
    const PROPERTY_TYPE_PENTHOUSE = 'Penthouse';
    const PROPERTY_TYPE_RETIREMENT_VILLAGE = 'RetirementVillage';
    const PROPERTY_TYPE_RURAL = 'Rural';
    const PROPERTY_TYPE_SEMI_DETACHED = 'SemiDetached';
    const PROPERTY_TYPE_SPECIALIST_FARM = 'SpecialistFarm';
    const PROPERTY_TYPE_STUDIO = 'Studio';
    const PROPERTY_TYPE_TERRACE = 'Terrace';
    const PROPERTY_TYPE_TOWNHOUSE = 'Townhouse';
    const PROPERTY_TYPE_VACANT_LAND = 'VacantLand';
    const PROPERTY_TYPE_VILLA = 'Villa';
    const PROPERTY_TYPE_CROPPING = 'Cropping';
    const PROPERTY_TYPE_VITICULTURE = 'Viticulture';
    const PROPERTY_TYPE_MIXED_FARMING = 'MixedFarming';
    const PROPERTY_TYPE_GRAZING = 'Grazing';
    const PROPERTY_TYPE_HORTICULTURE = 'Horticulture';
    const PROPERTY_TYPE_EQUINE = 'Equine';
    const PROPERTY_TYPE_FARMLET = 'Farmlet';
    const PROPERTY_TYPE_ORCHARD = 'Orchard';
    const PROPERTY_TYPE_RURAL_LIFESTYLE = 'RuralLifestyle';
    const ALL_PROPERTY_TYPES_UNKNOWN = 'Unknown';
    const ALL_PROPERTY_TYPES_ACREAGE_SEMI_RURAL = 'AcreageSemiRural';
    const ALL_PROPERTY_TYPES_APARTMENT_UNIT_FLAT = 'ApartmentUnitFlat';
    const ALL_PROPERTY_TYPES_AQUACULTURE = 'Aquaculture';
    const ALL_PROPERTY_TYPES_BLOCK_OF_UNITS = 'BlockOfUnits';
    const ALL_PROPERTY_TYPES_CAR_SPACE = 'CarSpace';
    const ALL_PROPERTY_TYPES_DAIRY_FARMING = 'DairyFarming';
    const ALL_PROPERTY_TYPES_DEVELOPMENT_SITE = 'DevelopmentSite';
    const ALL_PROPERTY_TYPES_DUPLEX = 'Duplex';
    const ALL_PROPERTY_TYPES_FARM = 'Farm';
    const ALL_PROPERTY_TYPES_FISHING_FORESTRY = 'FishingForestry';
    const ALL_PROPERTY_TYPES_NEW_HOME_DESIGNS = 'NewHomeDesigns';
    const ALL_PROPERTY_TYPES_HOUSE = 'House';
    const ALL_PROPERTY_TYPES_NEW_HOUSE_LAND = 'NewHouseLand';
    const ALL_PROPERTY_TYPES_IRRIGATION_SERVICES = 'IrrigationServices';
    const ALL_PROPERTY_TYPES_NEW_LAND = 'NewLand';
    const ALL_PROPERTY_TYPES_LIVESTOCK = 'Livestock';
    const ALL_PROPERTY_TYPES_NEW_APARTMENTS = 'NewApartments';
    const ALL_PROPERTY_TYPES_PENTHOUSE = 'Penthouse';
    const ALL_PROPERTY_TYPES_RETIREMENT_VILLAGE = 'RetirementVillage';
    const ALL_PROPERTY_TYPES_RURAL = 'Rural';
    const ALL_PROPERTY_TYPES_SEMI_DETACHED = 'SemiDetached';
    const ALL_PROPERTY_TYPES_SPECIALIST_FARM = 'SpecialistFarm';
    const ALL_PROPERTY_TYPES_STUDIO = 'Studio';
    const ALL_PROPERTY_TYPES_TERRACE = 'Terrace';
    const ALL_PROPERTY_TYPES_TOWNHOUSE = 'Townhouse';
    const ALL_PROPERTY_TYPES_VACANT_LAND = 'VacantLand';
    const ALL_PROPERTY_TYPES_VILLA = 'Villa';
    const ALL_PROPERTY_TYPES_CROPPING = 'Cropping';
    const ALL_PROPERTY_TYPES_VITICULTURE = 'Viticulture';
    const ALL_PROPERTY_TYPES_MIXED_FARMING = 'MixedFarming';
    const ALL_PROPERTY_TYPES_GRAZING = 'Grazing';
    const ALL_PROPERTY_TYPES_HORTICULTURE = 'Horticulture';
    const ALL_PROPERTY_TYPES_EQUINE = 'Equine';
    const ALL_PROPERTY_TYPES_FARMLET = 'Farmlet';
    const ALL_PROPERTY_TYPES_ORCHARD = 'Orchard';
    const ALL_PROPERTY_TYPES_RURAL_LIFESTYLE = 'RuralLifestyle';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACT,
            self::STATE_NSW,
            self::STATE_QLD,
            self::STATE_VIC,
            self::STATE_SA,
            self::STATE_WA,
            self::STATE_NT,
            self::STATE_TAS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeaturesAllowableValues()
    {
        return [
            self::FEATURES_UNRECOGNISED,
            self::FEATURES_AIR_CONDITIONING,
            self::FEATURES_BUILT_IN_WARDROBES,
            self::FEATURES_CABLE_OR_SATELLITE,
            self::FEATURES_ENSUITE,
            self::FEATURES_FLOORBOARDS,
            self::FEATURES_GAS,
            self::FEATURES_INTERNAL_LAUNDRY,
            self::FEATURES_PETS_ALLOWED,
            self::FEATURES_SECURE_PARKING,
            self::FEATURES_SWIMMING_POOL,
            self::FEATURES_FURNISHED,
            self::FEATURES_GROUND_FLOOR,
            self::FEATURES_WATER_VIEWS,
            self::FEATURES_NORTH_FACING,
            self::FEATURES_CITY_VIEWS,
            self::FEATURES_INDOOR_SPA,
            self::FEATURES_GYM,
            self::FEATURES_ALARM_SYSTEM,
            self::FEATURES_INTERCOM,
            self::FEATURES_BROADBAND_INTERNET_ACCESS,
            self::FEATURES_BATH,
            self::FEATURES_FIREPLACE,
            self::FEATURES_SEPARATE_DINING_ROOM,
            self::FEATURES_HEATING,
            self::FEATURES_DISHWASHER,
            self::FEATURES_STUDY,
            self::FEATURES_TENNIS_COURT,
            self::FEATURES_SHED,
            self::FEATURES_FULLY_FENCED,
            self::FEATURES_BALCONY_DECK,
            self::FEATURES_GARDEN_COURTYARD,
            self::FEATURES_OUTDOOR_SPA,
            self::FEATURES_DOUBLE_GLAZED_WINDOWS,
            self::FEATURES_ENERGY_EFFICIENT_APPLIANCES,
            self::FEATURES_WATER_EFFICIENT_APPLIANCES,
            self::FEATURES_WALL_CEILING_INSULATION,
            self::FEATURES_RAINWATER_STORAGE_TANK,
            self::FEATURES_GREYWATER_SYSTEM,
            self::FEATURES_WATER_EFFICIENT_FIXTURES,
            self::FEATURES_SOLAR_HOT_WATER,
            self::FEATURES_SOLAR_PANELS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypeAllowableValues()
    {
        return [
            self::PROPERTY_TYPE_UNKNOWN,
            self::PROPERTY_TYPE_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPE_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPE_AQUACULTURE,
            self::PROPERTY_TYPE_BLOCK_OF_UNITS,
            self::PROPERTY_TYPE_CAR_SPACE,
            self::PROPERTY_TYPE_DAIRY_FARMING,
            self::PROPERTY_TYPE_DEVELOPMENT_SITE,
            self::PROPERTY_TYPE_DUPLEX,
            self::PROPERTY_TYPE_FARM,
            self::PROPERTY_TYPE_FISHING_FORESTRY,
            self::PROPERTY_TYPE_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPE_HOUSE,
            self::PROPERTY_TYPE_NEW_HOUSE_LAND,
            self::PROPERTY_TYPE_IRRIGATION_SERVICES,
            self::PROPERTY_TYPE_NEW_LAND,
            self::PROPERTY_TYPE_LIVESTOCK,
            self::PROPERTY_TYPE_NEW_APARTMENTS,
            self::PROPERTY_TYPE_PENTHOUSE,
            self::PROPERTY_TYPE_RETIREMENT_VILLAGE,
            self::PROPERTY_TYPE_RURAL,
            self::PROPERTY_TYPE_SEMI_DETACHED,
            self::PROPERTY_TYPE_SPECIALIST_FARM,
            self::PROPERTY_TYPE_STUDIO,
            self::PROPERTY_TYPE_TERRACE,
            self::PROPERTY_TYPE_TOWNHOUSE,
            self::PROPERTY_TYPE_VACANT_LAND,
            self::PROPERTY_TYPE_VILLA,
            self::PROPERTY_TYPE_CROPPING,
            self::PROPERTY_TYPE_VITICULTURE,
            self::PROPERTY_TYPE_MIXED_FARMING,
            self::PROPERTY_TYPE_GRAZING,
            self::PROPERTY_TYPE_HORTICULTURE,
            self::PROPERTY_TYPE_EQUINE,
            self::PROPERTY_TYPE_FARMLET,
            self::PROPERTY_TYPE_ORCHARD,
            self::PROPERTY_TYPE_RURAL_LIFESTYLE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllPropertyTypesAllowableValues()
    {
        return [
            self::ALL_PROPERTY_TYPES_UNKNOWN,
            self::ALL_PROPERTY_TYPES_ACREAGE_SEMI_RURAL,
            self::ALL_PROPERTY_TYPES_APARTMENT_UNIT_FLAT,
            self::ALL_PROPERTY_TYPES_AQUACULTURE,
            self::ALL_PROPERTY_TYPES_BLOCK_OF_UNITS,
            self::ALL_PROPERTY_TYPES_CAR_SPACE,
            self::ALL_PROPERTY_TYPES_DAIRY_FARMING,
            self::ALL_PROPERTY_TYPES_DEVELOPMENT_SITE,
            self::ALL_PROPERTY_TYPES_DUPLEX,
            self::ALL_PROPERTY_TYPES_FARM,
            self::ALL_PROPERTY_TYPES_FISHING_FORESTRY,
            self::ALL_PROPERTY_TYPES_NEW_HOME_DESIGNS,
            self::ALL_PROPERTY_TYPES_HOUSE,
            self::ALL_PROPERTY_TYPES_NEW_HOUSE_LAND,
            self::ALL_PROPERTY_TYPES_IRRIGATION_SERVICES,
            self::ALL_PROPERTY_TYPES_NEW_LAND,
            self::ALL_PROPERTY_TYPES_LIVESTOCK,
            self::ALL_PROPERTY_TYPES_NEW_APARTMENTS,
            self::ALL_PROPERTY_TYPES_PENTHOUSE,
            self::ALL_PROPERTY_TYPES_RETIREMENT_VILLAGE,
            self::ALL_PROPERTY_TYPES_RURAL,
            self::ALL_PROPERTY_TYPES_SEMI_DETACHED,
            self::ALL_PROPERTY_TYPES_SPECIALIST_FARM,
            self::ALL_PROPERTY_TYPES_STUDIO,
            self::ALL_PROPERTY_TYPES_TERRACE,
            self::ALL_PROPERTY_TYPES_TOWNHOUSE,
            self::ALL_PROPERTY_TYPES_VACANT_LAND,
            self::ALL_PROPERTY_TYPES_VILLA,
            self::ALL_PROPERTY_TYPES_CROPPING,
            self::ALL_PROPERTY_TYPES_VITICULTURE,
            self::ALL_PROPERTY_TYPES_MIXED_FARMING,
            self::ALL_PROPERTY_TYPES_GRAZING,
            self::ALL_PROPERTY_TYPES_HORTICULTURE,
            self::ALL_PROPERTY_TYPES_EQUINE,
            self::ALL_PROPERTY_TYPES_FARMLET,
            self::ALL_PROPERTY_TYPES_ORCHARD,
            self::ALL_PROPERTY_TYPES_RURAL_LIFESTYLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['all_property_types'] = isset($data['all_property_types']) ? $data['all_property_types'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['carspaces'] = isset($data['carspaces']) ? $data['carspaces'] : null;
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['suburb_id'] = isset($data['suburb_id']) ? $data['suburb_id'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['displayable_address'] = isset($data['displayable_address']) ? $data['displayable_address'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['map_certainty'] = isset($data['map_certainty']) ? $data['map_certainty'] : null;
        $this->container['land_area'] = isset($data['land_area']) ? $data['land_area'] : null;
        $this->container['building_area'] = isset($data['building_area']) ? $data['building_area'] : null;
        $this->container['only_show_properties'] = isset($data['only_show_properties']) ? $data['only_show_properties'] : null;
        $this->container['display_address_type'] = isset($data['display_address_type']) ? $data['display_address_type'] : null;
        $this->container['is_rural'] = isset($data['is_rural']) ? $data['is_rural'] : null;
        $this->container['top_spot_keywords'] = isset($data['top_spot_keywords']) ? $data['top_spot_keywords'] : null;
        $this->container['is_new'] = isset($data['is_new']) ? $data['is_new'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($this->container['property_type']) && !in_array($this->container['property_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'property_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $allowedValues = $this->getFeaturesAllowableValues();
        if (!is_null($features) && array_diff($features, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'features', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type property_type
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($property_type) && !in_array($property_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets all_property_types
     *
     * @return string[]
     */
    public function getAllPropertyTypes()
    {
        return $this->container['all_property_types'];
    }

    /**
     * Sets all_property_types
     *
     * @param string[] $all_property_types all_property_types
     *
     * @return $this
     */
    public function setAllPropertyTypes($all_property_types)
    {
        $allowedValues = $this->getAllPropertyTypesAllowableValues();
        if (!is_null($all_property_types) && array_diff($all_property_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'all_property_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['all_property_types'] = $all_property_types;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float $bathrooms bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return float
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param float $bedrooms bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets carspaces
     *
     * @return int
     */
    public function getCarspaces()
    {
        return $this->container['carspaces'];
    }

    /**
     * Sets carspaces
     *
     * @param int $carspaces carspaces
     *
     * @return $this
     */
    public function setCarspaces($carspaces)
    {
        $this->container['carspaces'] = $carspaces;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number unit_number
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number street_number
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets suburb_id
     *
     * @return int
     */
    public function getSuburbId()
    {
        return $this->container['suburb_id'];
    }

    /**
     * Sets suburb_id
     *
     * @param int $suburb_id suburb_id
     *
     * @return $this
     */
    public function setSuburbId($suburb_id)
    {
        $this->container['suburb_id'] = $suburb_id;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets displayable_address
     *
     * @return string
     */
    public function getDisplayableAddress()
    {
        return $this->container['displayable_address'];
    }

    /**
     * Sets displayable_address
     *
     * @param string $displayable_address displayable_address
     *
     * @return $this
     */
    public function setDisplayableAddress($displayable_address)
    {
        $this->container['displayable_address'] = $displayable_address;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets map_certainty
     *
     * @return int
     */
    public function getMapCertainty()
    {
        return $this->container['map_certainty'];
    }

    /**
     * Sets map_certainty
     *
     * @param int $map_certainty map_certainty
     *
     * @return $this
     */
    public function setMapCertainty($map_certainty)
    {
        $this->container['map_certainty'] = $map_certainty;

        return $this;
    }

    /**
     * Gets land_area
     *
     * @return double
     */
    public function getLandArea()
    {
        return $this->container['land_area'];
    }

    /**
     * Sets land_area
     *
     * @param double $land_area land_area
     *
     * @return $this
     */
    public function setLandArea($land_area)
    {
        $this->container['land_area'] = $land_area;

        return $this;
    }

    /**
     * Gets building_area
     *
     * @return double
     */
    public function getBuildingArea()
    {
        return $this->container['building_area'];
    }

    /**
     * Sets building_area
     *
     * @param double $building_area building_area
     *
     * @return $this
     */
    public function setBuildingArea($building_area)
    {
        $this->container['building_area'] = $building_area;

        return $this;
    }

    /**
     * Gets only_show_properties
     *
     * @return string[]
     */
    public function getOnlyShowProperties()
    {
        return $this->container['only_show_properties'];
    }

    /**
     * Sets only_show_properties
     *
     * @param string[] $only_show_properties only_show_properties
     *
     * @return $this
     */
    public function setOnlyShowProperties($only_show_properties)
    {
        $this->container['only_show_properties'] = $only_show_properties;

        return $this;
    }

    /**
     * Gets display_address_type
     *
     * @return string
     */
    public function getDisplayAddressType()
    {
        return $this->container['display_address_type'];
    }

    /**
     * Sets display_address_type
     *
     * @param string $display_address_type display_address_type
     *
     * @return $this
     */
    public function setDisplayAddressType($display_address_type)
    {
        $this->container['display_address_type'] = $display_address_type;

        return $this;
    }

    /**
     * Gets is_rural
     *
     * @return bool
     */
    public function getIsRural()
    {
        return $this->container['is_rural'];
    }

    /**
     * Sets is_rural
     *
     * @param bool $is_rural is_rural
     *
     * @return $this
     */
    public function setIsRural($is_rural)
    {
        $this->container['is_rural'] = $is_rural;

        return $this;
    }

    /**
     * Gets top_spot_keywords
     *
     * @return string[]
     */
    public function getTopSpotKeywords()
    {
        return $this->container['top_spot_keywords'];
    }

    /**
     * Sets top_spot_keywords
     *
     * @param string[] $top_spot_keywords top_spot_keywords
     *
     * @return $this
     */
    public function setTopSpotKeywords($top_spot_keywords)
    {
        $this->container['top_spot_keywords'] = $top_spot_keywords;

        return $this;
    }

    /**
     * Gets is_new
     *
     * @return bool
     */
    public function getIsNew()
    {
        return $this->container['is_new'];
    }

    /**
     * Sets is_new
     *
     * @param bool $is_new is_new
     *
     * @return $this
     */
    public function setIsNew($is_new)
    {
        $this->container['is_new'] = $is_new;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
