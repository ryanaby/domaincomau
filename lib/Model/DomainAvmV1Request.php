<?php
/**
 * DomainAvmV1Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainAvmV1Request Class Doc Comment
 *
 * @category Class
 * @description The model used to request a bank grade valuation.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainAvmV1Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainAvm.v1.Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'val_ex_job_number' => 'string',
        'address' => '\Swagger\Client\Model\DomainAvmV1Address',
        'purchase_price' => 'int',
        'property_type' => 'string',
        'landarea' => 'int',
        'bedrooms' => 'int',
        'bathrooms' => 'int',
        'carparks' => 'int',
        'gnaf_pid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'val_ex_job_number' => null,
        'address' => null,
        'purchase_price' => 'int32',
        'property_type' => null,
        'landarea' => 'int32',
        'bedrooms' => 'int32',
        'bathrooms' => 'int32',
        'carparks' => 'int32',
        'gnaf_pid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'val_ex_job_number' => 'valExJobNumber',
        'address' => 'address',
        'purchase_price' => 'purchasePrice',
        'property_type' => 'propertyType',
        'landarea' => 'landarea',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'carparks' => 'carparks',
        'gnaf_pid' => 'gnafPId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'val_ex_job_number' => 'setValExJobNumber',
        'address' => 'setAddress',
        'purchase_price' => 'setPurchasePrice',
        'property_type' => 'setPropertyType',
        'landarea' => 'setLandarea',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'carparks' => 'setCarparks',
        'gnaf_pid' => 'setGnafPid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'val_ex_job_number' => 'getValExJobNumber',
        'address' => 'getAddress',
        'purchase_price' => 'getPurchasePrice',
        'property_type' => 'getPropertyType',
        'landarea' => 'getLandarea',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'carparks' => 'getCarparks',
        'gnaf_pid' => 'getGnafPid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['val_ex_job_number'] = isset($data['val_ex_job_number']) ? $data['val_ex_job_number'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['landarea'] = isset($data['landarea']) ? $data['landarea'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['carparks'] = isset($data['carparks']) ? $data['carparks'] : null;
        $this->container['gnaf_pid'] = isset($data['gnaf_pid']) ? $data['gnaf_pid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['val_ex_job_number'] === null) {
            $invalidProperties[] = "'val_ex_job_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets val_ex_job_number
     *
     * @return string
     */
    public function getValExJobNumber()
    {
        return $this->container['val_ex_job_number'];
    }

    /**
     * Sets val_ex_job_number
     *
     * @param string $val_ex_job_number The client identification for the valuation transaction.
     *
     * @return $this
     */
    public function setValExJobNumber($val_ex_job_number)
    {
        $this->container['val_ex_job_number'] = $val_ex_job_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\DomainAvmV1Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\DomainAvmV1Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return int
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param int $purchase_price The purchase price of the property to nearest AUD.
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Property type to be used when estimating value of property. Valid values: [House, Unit].
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets landarea
     *
     * @return int
     */
    public function getLandarea()
    {
        return $this->container['landarea'];
    }

    /**
     * Sets landarea
     *
     * @param int $landarea Land area in square meters to be used when estimating value of property, for houses only not units.
     *
     * @return $this
     */
    public function setLandarea($landarea)
    {
        $this->container['landarea'] = $landarea;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms Number of bedrooms to be used when estimating value of property.
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int $bathrooms Number of bathrooms to be used when estimating value of property.
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets carparks
     *
     * @return int
     */
    public function getCarparks()
    {
        return $this->container['carparks'];
    }

    /**
     * Sets carparks
     *
     * @param int $carparks Number of carparks to be used when estimating value of property.
     *
     * @return $this
     */
    public function setCarparks($carparks)
    {
        $this->container['carparks'] = $carparks;

        return $this;
    }

    /**
     * Gets gnaf_pid
     *
     * @return string
     */
    public function getGnafPid()
    {
        return $this->container['gnaf_pid'];
    }

    /**
     * Sets gnaf_pid
     *
     * @param string $gnaf_pid Geocoded National Address File. A G-NAF Persistent ID is a unique combination of address detail used to identify each property in Australia.
     *
     * @return $this
     */
    public function setGnafPid($gnaf_pid)
    {
        $this->container['gnaf_pid'] = $gnaf_pid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
