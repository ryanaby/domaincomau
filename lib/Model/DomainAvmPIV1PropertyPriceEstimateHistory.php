<?php
/**
 * DomainAvmPIV1PropertyPriceEstimateHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainAvmPIV1PropertyPriceEstimateHistory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainAvmPIV1PropertyPriceEstimateHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainAvm.PI.v1.PropertyPriceEstimateHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'confidence' => '\Swagger\Client\Model\DomainAvmPIV1ConfidenceEnum',
        'date' => 'string',
        'lower_price' => 'double',
        'mid_price' => 'double',
        'source' => 'string',
        'upper_price' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'confidence' => null,
        'date' => null,
        'lower_price' => 'double',
        'mid_price' => 'double',
        'source' => null,
        'upper_price' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confidence' => 'confidence',
        'date' => 'date',
        'lower_price' => 'lowerPrice',
        'mid_price' => 'midPrice',
        'source' => 'source',
        'upper_price' => 'upperPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confidence' => 'setConfidence',
        'date' => 'setDate',
        'lower_price' => 'setLowerPrice',
        'mid_price' => 'setMidPrice',
        'source' => 'setSource',
        'upper_price' => 'setUpperPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confidence' => 'getConfidence',
        'date' => 'getDate',
        'lower_price' => 'getLowerPrice',
        'mid_price' => 'getMidPrice',
        'source' => 'getSource',
        'upper_price' => 'getUpperPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['lower_price'] = isset($data['lower_price']) ? $data['lower_price'] : null;
        $this->container['mid_price'] = isset($data['mid_price']) ? $data['mid_price'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['upper_price'] = isset($data['upper_price']) ? $data['upper_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confidence
     *
     * @return \Swagger\Client\Model\DomainAvmPIV1ConfidenceEnum
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param \Swagger\Client\Model\DomainAvmPIV1ConfidenceEnum $confidence confidence
     *
     * @return $this
     */
    public function setConfidence($confidence)
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets lower_price
     *
     * @return double
     */
    public function getLowerPrice()
    {
        return $this->container['lower_price'];
    }

    /**
     * Sets lower_price
     *
     * @param double $lower_price lower_price
     *
     * @return $this
     */
    public function setLowerPrice($lower_price)
    {
        $this->container['lower_price'] = $lower_price;

        return $this;
    }

    /**
     * Gets mid_price
     *
     * @return double
     */
    public function getMidPrice()
    {
        return $this->container['mid_price'];
    }

    /**
     * Sets mid_price
     *
     * @param double $mid_price mid_price
     *
     * @return $this
     */
    public function setMidPrice($mid_price)
    {
        $this->container['mid_price'] = $mid_price;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets upper_price
     *
     * @return double
     */
    public function getUpperPrice()
    {
        return $this->container['upper_price'];
    }

    /**
     * Sets upper_price
     *
     * @param double $upper_price upper_price
     *
     * @return $this
     */
    public function setUpperPrice($upper_price)
    {
        $this->container['upper_price'] = $upper_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
