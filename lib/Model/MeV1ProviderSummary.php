<?php
/**
 * MeV1ProviderSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MeV1ProviderSummary Class Doc Comment
 *
 * @category Class
 * @description Create provider response
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeV1ProviderSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Me.V1.ProviderSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'company_name' => 'string',
        'contact_name_technical' => 'string',
        'email_technical' => 'string',
        'phone_technical' => 'string',
        'contact_name_business' => 'string',
        'email_business' => 'string',
        'phone_business' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'company_name' => null,
        'contact_name_technical' => null,
        'email_technical' => null,
        'phone_technical' => null,
        'contact_name_business' => null,
        'email_business' => null,
        'phone_business' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_name' => 'companyName',
        'contact_name_technical' => 'contactNameTechnical',
        'email_technical' => 'emailTechnical',
        'phone_technical' => 'phoneTechnical',
        'contact_name_business' => 'contactNameBusiness',
        'email_business' => 'emailBusiness',
        'phone_business' => 'phoneBusiness'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_name' => 'setCompanyName',
        'contact_name_technical' => 'setContactNameTechnical',
        'email_technical' => 'setEmailTechnical',
        'phone_technical' => 'setPhoneTechnical',
        'contact_name_business' => 'setContactNameBusiness',
        'email_business' => 'setEmailBusiness',
        'phone_business' => 'setPhoneBusiness'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_name' => 'getCompanyName',
        'contact_name_technical' => 'getContactNameTechnical',
        'email_technical' => 'getEmailTechnical',
        'phone_technical' => 'getPhoneTechnical',
        'contact_name_business' => 'getContactNameBusiness',
        'email_business' => 'getEmailBusiness',
        'phone_business' => 'getPhoneBusiness'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['contact_name_technical'] = isset($data['contact_name_technical']) ? $data['contact_name_technical'] : null;
        $this->container['email_technical'] = isset($data['email_technical']) ? $data['email_technical'] : null;
        $this->container['phone_technical'] = isset($data['phone_technical']) ? $data['phone_technical'] : null;
        $this->container['contact_name_business'] = isset($data['contact_name_business']) ? $data['contact_name_business'] : null;
        $this->container['email_business'] = isset($data['email_business']) ? $data['email_business'] : null;
        $this->container['phone_business'] = isset($data['phone_business']) ? $data['phone_business'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Provider identifier - this will map to the username
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets contact_name_technical
     *
     * @return string
     */
    public function getContactNameTechnical()
    {
        return $this->container['contact_name_technical'];
    }

    /**
     * Sets contact_name_technical
     *
     * @param string $contact_name_technical Contact person's name for technical related enquiries
     *
     * @return $this
     */
    public function setContactNameTechnical($contact_name_technical)
    {
        $this->container['contact_name_technical'] = $contact_name_technical;

        return $this;
    }

    /**
     * Gets email_technical
     *
     * @return string
     */
    public function getEmailTechnical()
    {
        return $this->container['email_technical'];
    }

    /**
     * Sets email_technical
     *
     * @param string $email_technical Email address to receive technical related emails
     *
     * @return $this
     */
    public function setEmailTechnical($email_technical)
    {
        $this->container['email_technical'] = $email_technical;

        return $this;
    }

    /**
     * Gets phone_technical
     *
     * @return string
     */
    public function getPhoneTechnical()
    {
        return $this->container['phone_technical'];
    }

    /**
     * Sets phone_technical
     *
     * @param string $phone_technical Phone to be contact for technical related enquiries
     *
     * @return $this
     */
    public function setPhoneTechnical($phone_technical)
    {
        $this->container['phone_technical'] = $phone_technical;

        return $this;
    }

    /**
     * Gets contact_name_business
     *
     * @return string
     */
    public function getContactNameBusiness()
    {
        return $this->container['contact_name_business'];
    }

    /**
     * Sets contact_name_business
     *
     * @param string $contact_name_business Contact person's name for business related enquiries
     *
     * @return $this
     */
    public function setContactNameBusiness($contact_name_business)
    {
        $this->container['contact_name_business'] = $contact_name_business;

        return $this;
    }

    /**
     * Gets email_business
     *
     * @return string
     */
    public function getEmailBusiness()
    {
        return $this->container['email_business'];
    }

    /**
     * Sets email_business
     *
     * @param string $email_business Email address to receive business related emails
     *
     * @return $this
     */
    public function setEmailBusiness($email_business)
    {
        $this->container['email_business'] = $email_business;

        return $this;
    }

    /**
     * Gets phone_business
     *
     * @return string
     */
    public function getPhoneBusiness()
    {
        return $this->container['phone_business'];
    }

    /**
     * Sets phone_business
     *
     * @param string $phone_business Phone to be contact for business related enquiries
     *
     * @return $this
     */
    public function setPhoneBusiness($phone_business)
    {
        $this->container['phone_business'] = $phone_business;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
