<?php
/**
 * SalesResultsV1CityResultsSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesResultsV1CityResultsSummary Class Doc Comment
 *
 * @category Class
 * @description summary of report for a given city
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesResultsV1CityResultsSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesResults.v1.CityResultsSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_listed_for_auction' => 'int',
        'number_withdrawn' => 'int',
        'number_unreported' => 'int',
        'number_auctioned' => 'int',
        'number_sold' => 'int',
        'total_sales' => 'double',
        'median' => 'int',
        'adj_clearance_rate' => 'double',
        'auctioned_date' => '\DateTime',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number_listed_for_auction' => 'int32',
        'number_withdrawn' => 'int32',
        'number_unreported' => 'int32',
        'number_auctioned' => 'int32',
        'number_sold' => 'int32',
        'total_sales' => 'double',
        'median' => 'int32',
        'adj_clearance_rate' => 'double',
        'auctioned_date' => 'date-time',
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_listed_for_auction' => 'numberListedForAuction',
        'number_withdrawn' => 'numberWithdrawn',
        'number_unreported' => 'numberUnreported',
        'number_auctioned' => 'numberAuctioned',
        'number_sold' => 'numberSold',
        'total_sales' => 'totalSales',
        'median' => 'median',
        'adj_clearance_rate' => 'adjClearanceRate',
        'auctioned_date' => 'auctionedDate',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_listed_for_auction' => 'setNumberListedForAuction',
        'number_withdrawn' => 'setNumberWithdrawn',
        'number_unreported' => 'setNumberUnreported',
        'number_auctioned' => 'setNumberAuctioned',
        'number_sold' => 'setNumberSold',
        'total_sales' => 'setTotalSales',
        'median' => 'setMedian',
        'adj_clearance_rate' => 'setAdjClearanceRate',
        'auctioned_date' => 'setAuctionedDate',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_listed_for_auction' => 'getNumberListedForAuction',
        'number_withdrawn' => 'getNumberWithdrawn',
        'number_unreported' => 'getNumberUnreported',
        'number_auctioned' => 'getNumberAuctioned',
        'number_sold' => 'getNumberSold',
        'total_sales' => 'getTotalSales',
        'median' => 'getMedian',
        'adj_clearance_rate' => 'getAdjClearanceRate',
        'auctioned_date' => 'getAuctionedDate',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_listed_for_auction'] = isset($data['number_listed_for_auction']) ? $data['number_listed_for_auction'] : null;
        $this->container['number_withdrawn'] = isset($data['number_withdrawn']) ? $data['number_withdrawn'] : null;
        $this->container['number_unreported'] = isset($data['number_unreported']) ? $data['number_unreported'] : null;
        $this->container['number_auctioned'] = isset($data['number_auctioned']) ? $data['number_auctioned'] : null;
        $this->container['number_sold'] = isset($data['number_sold']) ? $data['number_sold'] : null;
        $this->container['total_sales'] = isset($data['total_sales']) ? $data['total_sales'] : null;
        $this->container['median'] = isset($data['median']) ? $data['median'] : null;
        $this->container['adj_clearance_rate'] = isset($data['adj_clearance_rate']) ? $data['adj_clearance_rate'] : null;
        $this->container['auctioned_date'] = isset($data['auctioned_date']) ? $data['auctioned_date'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_listed_for_auction
     *
     * @return int
     */
    public function getNumberListedForAuction()
    {
        return $this->container['number_listed_for_auction'];
    }

    /**
     * Sets number_listed_for_auction
     *
     * @param int $number_listed_for_auction total number for auction
     *
     * @return $this
     */
    public function setNumberListedForAuction($number_listed_for_auction)
    {
        $this->container['number_listed_for_auction'] = $number_listed_for_auction;

        return $this;
    }

    /**
     * Gets number_withdrawn
     *
     * @return int
     */
    public function getNumberWithdrawn()
    {
        return $this->container['number_withdrawn'];
    }

    /**
     * Sets number_withdrawn
     *
     * @param int $number_withdrawn number withdrawn
     *
     * @return $this
     */
    public function setNumberWithdrawn($number_withdrawn)
    {
        $this->container['number_withdrawn'] = $number_withdrawn;

        return $this;
    }

    /**
     * Gets number_unreported
     *
     * @return int
     */
    public function getNumberUnreported()
    {
        return $this->container['number_unreported'];
    }

    /**
     * Sets number_unreported
     *
     * @param int $number_unreported number not reported
     *
     * @return $this
     */
    public function setNumberUnreported($number_unreported)
    {
        $this->container['number_unreported'] = $number_unreported;

        return $this;
    }

    /**
     * Gets number_auctioned
     *
     * @return int
     */
    public function getNumberAuctioned()
    {
        return $this->container['number_auctioned'];
    }

    /**
     * Sets number_auctioned
     *
     * @param int $number_auctioned number auctioned
     *
     * @return $this
     */
    public function setNumberAuctioned($number_auctioned)
    {
        $this->container['number_auctioned'] = $number_auctioned;

        return $this;
    }

    /**
     * Gets number_sold
     *
     * @return int
     */
    public function getNumberSold()
    {
        return $this->container['number_sold'];
    }

    /**
     * Sets number_sold
     *
     * @param int $number_sold solde number
     *
     * @return $this
     */
    public function setNumberSold($number_sold)
    {
        $this->container['number_sold'] = $number_sold;

        return $this;
    }

    /**
     * Gets total_sales
     *
     * @return double
     */
    public function getTotalSales()
    {
        return $this->container['total_sales'];
    }

    /**
     * Sets total_sales
     *
     * @param double $total_sales total
     *
     * @return $this
     */
    public function setTotalSales($total_sales)
    {
        $this->container['total_sales'] = $total_sales;

        return $this;
    }

    /**
     * Gets median
     *
     * @return int
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     *
     * @param int $median median for auctioned
     *
     * @return $this
     */
    public function setMedian($median)
    {
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets adj_clearance_rate
     *
     * @return double
     */
    public function getAdjClearanceRate()
    {
        return $this->container['adj_clearance_rate'];
    }

    /**
     * Sets adj_clearance_rate
     *
     * @param double $adj_clearance_rate adjusted clearance rate
     *
     * @return $this
     */
    public function setAdjClearanceRate($adj_clearance_rate)
    {
        $this->container['adj_clearance_rate'] = $adj_clearance_rate;

        return $this;
    }

    /**
     * Gets auctioned_date
     *
     * @return \DateTime
     */
    public function getAuctionedDate()
    {
        return $this->container['auctioned_date'];
    }

    /**
     * Sets auctioned_date
     *
     * @param \DateTime $auctioned_date Date when results were published
     *
     * @return $this
     */
    public function setAuctionedDate($auctioned_date)
    {
        $this->container['auctioned_date'] = $auctioned_date;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time When the results were last modified in Redis. Useful for knowing  when the listing enhancer last ran.  If Redis is not use this will be the same as Published Date
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
