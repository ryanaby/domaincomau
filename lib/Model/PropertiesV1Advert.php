<?php
/**
 * PropertiesV1Advert
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertiesV1Advert Class Doc Comment
 *
 * @category Class
 * @description DomainPropertyIdModelModelsAdvert
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesV1Advert implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Properties.v1.Advert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'on_market_types' => 'string[]',
        'advert_id' => 'int',
        'agency' => 'string',
        'agency_colour' => 'string',
        'agency_id' => 'int',
        'agency_logo' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'on_market_types' => null,
        'advert_id' => 'int32',
        'agency' => null,
        'agency_colour' => null,
        'agency_id' => 'int32',
        'agency_logo' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'on_market_types' => 'onMarketTypes',
        'advert_id' => 'advertId',
        'agency' => 'agency',
        'agency_colour' => 'agencyColour',
        'agency_id' => 'agencyId',
        'agency_logo' => 'agencyLogo',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'on_market_types' => 'setOnMarketTypes',
        'advert_id' => 'setAdvertId',
        'agency' => 'setAgency',
        'agency_colour' => 'setAgencyColour',
        'agency_id' => 'setAgencyId',
        'agency_logo' => 'setAgencyLogo',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'on_market_types' => 'getOnMarketTypes',
        'advert_id' => 'getAdvertId',
        'agency' => 'getAgency',
        'agency_colour' => 'getAgencyColour',
        'agency_id' => 'getAgencyId',
        'agency_logo' => 'getAgencyLogo',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ON_MARKET_TYPES_UNKNOWN = 'Unknown';
    const ON_MARKET_TYPES_RENT = 'Rent';
    const ON_MARKET_TYPES_SALE = 'Sale';
    const ON_MARKET_TYPES_SHARE = 'Share';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnMarketTypesAllowableValues()
    {
        return [
            self::ON_MARKET_TYPES_UNKNOWN,
            self::ON_MARKET_TYPES_RENT,
            self::ON_MARKET_TYPES_SALE,
            self::ON_MARKET_TYPES_SHARE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['on_market_types'] = isset($data['on_market_types']) ? $data['on_market_types'] : null;
        $this->container['advert_id'] = isset($data['advert_id']) ? $data['advert_id'] : null;
        $this->container['agency'] = isset($data['agency']) ? $data['agency'] : null;
        $this->container['agency_colour'] = isset($data['agency_colour']) ? $data['agency_colour'] : null;
        $this->container['agency_id'] = isset($data['agency_id']) ? $data['agency_id'] : null;
        $this->container['agency_logo'] = isset($data['agency_logo']) ? $data['agency_logo'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets on_market_types
     *
     * @return string[]
     */
    public function getOnMarketTypes()
    {
        return $this->container['on_market_types'];
    }

    /**
     * Sets on_market_types
     *
     * @param string[] $on_market_types Gets or Sets OnMarketTypes
     *
     * @return $this
     */
    public function setOnMarketTypes($on_market_types)
    {
        $allowedValues = $this->getOnMarketTypesAllowableValues();
        if (!is_null($on_market_types) && array_diff($on_market_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_market_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_market_types'] = $on_market_types;

        return $this;
    }

    /**
     * Gets advert_id
     *
     * @return int
     */
    public function getAdvertId()
    {
        return $this->container['advert_id'];
    }

    /**
     * Sets advert_id
     *
     * @param int $advert_id Gets or Sets AdvertId
     *
     * @return $this
     */
    public function setAdvertId($advert_id)
    {
        $this->container['advert_id'] = $advert_id;

        return $this;
    }

    /**
     * Gets agency
     *
     * @return string
     */
    public function getAgency()
    {
        return $this->container['agency'];
    }

    /**
     * Sets agency
     *
     * @param string $agency Gets or Sets Agency
     *
     * @return $this
     */
    public function setAgency($agency)
    {
        $this->container['agency'] = $agency;

        return $this;
    }

    /**
     * Gets agency_colour
     *
     * @return string
     */
    public function getAgencyColour()
    {
        return $this->container['agency_colour'];
    }

    /**
     * Sets agency_colour
     *
     * @param string $agency_colour Gets or Sets AgencyColour
     *
     * @return $this
     */
    public function setAgencyColour($agency_colour)
    {
        $this->container['agency_colour'] = $agency_colour;

        return $this;
    }

    /**
     * Gets agency_id
     *
     * @return int
     */
    public function getAgencyId()
    {
        return $this->container['agency_id'];
    }

    /**
     * Sets agency_id
     *
     * @param int $agency_id Gets or Sets AgencyId
     *
     * @return $this
     */
    public function setAgencyId($agency_id)
    {
        $this->container['agency_id'] = $agency_id;

        return $this;
    }

    /**
     * Gets agency_logo
     *
     * @return string
     */
    public function getAgencyLogo()
    {
        return $this->container['agency_logo'];
    }

    /**
     * Sets agency_logo
     *
     * @param string $agency_logo Gets or Sets AgencyLogo
     *
     * @return $this
     */
    public function setAgencyLogo($agency_logo)
    {
        $this->container['agency_logo'] = $agency_logo;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Gets or Sets Url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
