<?php
/**
 * DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Class Doc Comment
 *
 * @category Class
 * @description Listing search criteria
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.Public.Adapter.Web.Api.Models.v1.Listings.Commercial.SearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_number' => 'int',
        'advertiser_id' => 'int',
        'page_size' => 'int',
        'property_types' => 'string[]',
        'price' => '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch',
        'locations' => '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[]',
        'keywords' => 'string[]',
        'geo_window' => '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow',
        'land_area_min' => 'int',
        'land_area_max' => 'int',
        'building_size_min' => 'int',
        'building_size_max' => 'int',
        'search_mode' => 'string',
        'occupancy' => 'string',
        'sort' => 'string',
        'sale_type' => 'string',
        'property_title' => 'string',
        'parking' => '\Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch',
        'exclusion_types' => 'string[]',
        'annual_return' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_number' => 'int32',
        'advertiser_id' => 'int32',
        'page_size' => 'int32',
        'property_types' => null,
        'price' => null,
        'locations' => null,
        'keywords' => null,
        'geo_window' => null,
        'land_area_min' => 'int32',
        'land_area_max' => 'int32',
        'building_size_min' => 'int32',
        'building_size_max' => 'int32',
        'search_mode' => null,
        'occupancy' => null,
        'sort' => null,
        'sale_type' => null,
        'property_title' => null,
        'parking' => null,
        'exclusion_types' => null,
        'annual_return' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_number' => 'pageNumber',
        'advertiser_id' => 'advertiserId',
        'page_size' => 'pageSize',
        'property_types' => 'propertyTypes',
        'price' => 'price',
        'locations' => 'locations',
        'keywords' => 'keywords',
        'geo_window' => 'geoWindow',
        'land_area_min' => 'landAreaMin',
        'land_area_max' => 'landAreaMax',
        'building_size_min' => 'buildingSizeMin',
        'building_size_max' => 'buildingSizeMax',
        'search_mode' => 'searchMode',
        'occupancy' => 'occupancy',
        'sort' => 'sort',
        'sale_type' => 'saleType',
        'property_title' => 'propertyTitle',
        'parking' => 'parking',
        'exclusion_types' => 'exclusionTypes',
        'annual_return' => 'annualReturn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_number' => 'setPageNumber',
        'advertiser_id' => 'setAdvertiserId',
        'page_size' => 'setPageSize',
        'property_types' => 'setPropertyTypes',
        'price' => 'setPrice',
        'locations' => 'setLocations',
        'keywords' => 'setKeywords',
        'geo_window' => 'setGeoWindow',
        'land_area_min' => 'setLandAreaMin',
        'land_area_max' => 'setLandAreaMax',
        'building_size_min' => 'setBuildingSizeMin',
        'building_size_max' => 'setBuildingSizeMax',
        'search_mode' => 'setSearchMode',
        'occupancy' => 'setOccupancy',
        'sort' => 'setSort',
        'sale_type' => 'setSaleType',
        'property_title' => 'setPropertyTitle',
        'parking' => 'setParking',
        'exclusion_types' => 'setExclusionTypes',
        'annual_return' => 'setAnnualReturn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_number' => 'getPageNumber',
        'advertiser_id' => 'getAdvertiserId',
        'page_size' => 'getPageSize',
        'property_types' => 'getPropertyTypes',
        'price' => 'getPrice',
        'locations' => 'getLocations',
        'keywords' => 'getKeywords',
        'geo_window' => 'getGeoWindow',
        'land_area_min' => 'getLandAreaMin',
        'land_area_max' => 'getLandAreaMax',
        'building_size_min' => 'getBuildingSizeMin',
        'building_size_max' => 'getBuildingSizeMax',
        'search_mode' => 'getSearchMode',
        'occupancy' => 'getOccupancy',
        'sort' => 'getSort',
        'sale_type' => 'getSaleType',
        'property_title' => 'getPropertyTitle',
        'parking' => 'getParking',
        'exclusion_types' => 'getExclusionTypes',
        'annual_return' => 'getAnnualReturn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROPERTY_TYPES_UNKNOWN = 'unknown';
    const PROPERTY_TYPES_ACCESSORIES_PARTS = 'accessoriesParts';
    const PROPERTY_TYPES_ACCOMMODATION_TOURISM = 'accommodationTourism';
    const PROPERTY_TYPES_ACCOUNTING = 'accounting';
    const PROPERTY_TYPES_ACREAGE_SEMI_RURAL = 'acreageSemiRural';
    const PROPERTY_TYPES_ADULT = 'adult';
    const PROPERTY_TYPES_ADVERTISING_MARKETING = 'advertisingMarketing';
    const PROPERTY_TYPES_AERIAL = 'aerial';
    const PROPERTY_TYPES_AERONAUTICAL = 'aeronautical';
    const PROPERTY_TYPES_AGED_CARE = 'agedCare';
    const PROPERTY_TYPES_AGRICULTURAL = 'agricultural';
    const PROPERTY_TYPES_AIR = 'air';
    const PROPERTY_TYPES_AIRCRAFT = 'aircraft';
    const PROPERTY_TYPES_ALARMS = 'alarms';
    const PROPERTY_TYPES_ALCOHOL_LIQUOR = 'alcoholLiquor';
    const PROPERTY_TYPES_AMUSEMENTS = 'amusements';
    const PROPERTY_TYPES_ANIMAL_RELATED = 'animalRelated';
    const PROPERTY_TYPES_APARTMENT_UNIT_FLAT = 'apartmentUnitFlat';
    const PROPERTY_TYPES_AQUACULTURE = 'aquaculture';
    const PROPERTY_TYPES_AQUATIC_MARINE_MARINA_BERTH = 'aquaticMarineMarinaBerth';
    const PROPERTY_TYPES_ARTS_CRAFTS = 'artsCrafts';
    const PROPERTY_TYPES_AUTO_ELECTRICAL = 'autoElectrical';
    const PROPERTY_TYPES_AUTOMOTIVE = 'automotive';
    const PROPERTY_TYPES_BACKPACKER_HOSTEL = 'backpackerHostel';
    const PROPERTY_TYPES_BAKERY = 'bakery';
    const PROPERTY_TYPES_BARS_NIGHTCLUBS = 'barsNightclubs';
    const PROPERTY_TYPES_BEAUTY_HEALTH = 'beautyHealth';
    const PROPERTY_TYPES_BEAUTY_PRODUCTS = 'beautyProducts';
    const PROPERTY_TYPES_BEAUTY_SALON = 'beautySalon';
    const PROPERTY_TYPES_BED_AND_BREAKFAST = 'bedAndBreakfast';
    const PROPERTY_TYPES_BIKE_AND_MOTORCYCLE = 'bikeAndMotorcycle';
    const PROPERTY_TYPES_BLOCK_OF_UNITS = 'blockOfUnits';
    const PROPERTY_TYPES_BOARDING_KENNELS = 'boardingKennels';
    const PROPERTY_TYPES_BOATS_MARINE_MARINA_BERTH = 'boatsMarineMarinaBerth';
    const PROPERTY_TYPES_BOOKKEEPING = 'bookkeeping';
    const PROPERTY_TYPES_BROKERAGE = 'brokerage';
    const PROPERTY_TYPES_BUILDER = 'builder';
    const PROPERTY_TYPES_BUILDING_AND_CONSTRUCTION = 'buildingAndConstruction';
    const PROPERTY_TYPES_BUS = 'bus';
    const PROPERTY_TYPES_BUTCHER = 'butcher';
    const PROPERTY_TYPES_CAFE_COFFEE_SHOP = 'cafeCoffeeShop';
    const PROPERTY_TYPES_CAR = 'car';
    const PROPERTY_TYPES_CAR_BUS_TRUCK = 'carBusTruck';
    const PROPERTY_TYPES_CAR_DEALERSHIP = 'carDealership';
    const PROPERTY_TYPES_CAR_RENTAL = 'carRental';
    const PROPERTY_TYPES_CAR_SPACE = 'carSpace';
    const PROPERTY_TYPES_CAR_WASH = 'carWash';
    const PROPERTY_TYPES_CARAVAN_PARK = 'caravanPark';
    const PROPERTY_TYPES_CARPENTER = 'carpenter';
    const PROPERTY_TYPES_CATERING = 'catering';
    const PROPERTY_TYPES_CHILD_CARE = 'childCare';
    const PROPERTY_TYPES_CIVIL = 'civil';
    const PROPERTY_TYPES_CLEANING = 'cleaning';
    const PROPERTY_TYPES_CLEANING_AND_MAINTENANCE = 'cleaningAndMaintenance';
    const PROPERTY_TYPES_CLINICAL_PRACTICE = 'clinicalPractice';
    const PROPERTY_TYPES_CLOTHING_ACCESSORIES = 'clothingAccessories';
    const PROPERTY_TYPES_CLOTHING_FOOTWEAR = 'clothingFootwear';
    const PROPERTY_TYPES_COMMUNICATION = 'communication';
    const PROPERTY_TYPES_COMMUNICATIONS = 'communications';
    const PROPERTY_TYPES_COMPUTER_IT = 'computerIT';
    const PROPERTY_TYPES_COMPUTER_AND_INTERNET = 'computerAndInternet';
    const PROPERTY_TYPES_CONSTRUCTION = 'construction';
    const PROPERTY_TYPES_CONVENIENCE_STORE = 'convenienceStore';
    const PROPERTY_TYPES_COPY_LAMINATE = 'copyLaminate';
    const PROPERTY_TYPES_COURIER = 'courier';
    const PROPERTY_TYPES_CROP_HARVESTING = 'cropHarvesting';
    const PROPERTY_TYPES_CUSTOMS = 'customs';
    const PROPERTY_TYPES_DAIRY_FARMING = 'dairyFarming';
    const PROPERTY_TYPES_DELI = 'deli';
    const PROPERTY_TYPES_DENTAL = 'dental';
    const PROPERTY_TYPES_DETAILING = 'detailing';
    const PROPERTY_TYPES_DEVELOPMENT_LAND = 'developmentLand';
    const PROPERTY_TYPES_DEVELOPMENT_SITE = 'developmentSite';
    const PROPERTY_TYPES_DISTRIBUTORS = 'distributors';
    const PROPERTY_TYPES_DRIVING_SCHOOLS = 'drivingSchools';
    const PROPERTY_TYPES_DUPLEX = 'duplex';
    const PROPERTY_TYPES_EDUCATION_TRAINING = 'educationTraining';
    const PROPERTY_TYPES_EDUCATIONAL = 'educational';
    const PROPERTY_TYPES_ELECTRICAL = 'electrical';
    const PROPERTY_TYPES_EMPLOYMENT_RECRUITMENT = 'employmentRecruitment';
    const PROPERTY_TYPES_ENTERTAINMENT = 'entertainment';
    const PROPERTY_TYPES_ENTERTAINMENT_TECHNOLOGY = 'entertainmentTechnology';
    const PROPERTY_TYPES_EXPORT = 'export';
    const PROPERTY_TYPES_FARM = 'farm';
    const PROPERTY_TYPES_FARMING = 'farming';
    const PROPERTY_TYPES_FERTILISER = 'fertiliser';
    const PROPERTY_TYPES_FINANCE = 'finance';
    const PROPERTY_TYPES_FINANCIAL_SERVICES = 'financialServices';
    const PROPERTY_TYPES_FISHING_FORESTRY = 'fishingForestry';
    const PROPERTY_TYPES_FLORIST_NURSERY = 'floristNursery';
    const PROPERTY_TYPES_FOOD_BEVERAGE = 'foodBeverage';
    const PROPERTY_TYPES_FOOD_BEVERAGE_HOSPITALITY = 'foodBeverageHospitality';
    const PROPERTY_TYPES_FRANCHISE_BUSINESS_OPPORTUNITIES = 'franchiseBusinessOpportunities';
    const PROPERTY_TYPES_FREIGHT = 'freight';
    const PROPERTY_TYPES_FRUIT_VEG_FRESH_PRODUCE = 'fruitVegFreshProduce';
    const PROPERTY_TYPES_FRUIT_PICKING = 'fruitPicking';
    const PROPERTY_TYPES_FUNCTION_CENTRE = 'functionCentre';
    const PROPERTY_TYPES_FURNITURE_TIMBER = 'furnitureTimber';
    const PROPERTY_TYPES_GAMBLING = 'gambling';
    const PROPERTY_TYPES_GARDEN_HOUSEHOLD = 'gardenHousehold';
    const PROPERTY_TYPES_GARDEN_NURSERIES = 'gardenNurseries';
    const PROPERTY_TYPES_GARDENING = 'gardening';
    const PROPERTY_TYPES_GLASS_CERAMIC = 'glassCeramic';
    const PROPERTY_TYPES_GUEST_HOUSE_BB = 'guestHouseBB';
    const PROPERTY_TYPES_GUESTHOUSE = 'guesthouse';
    const PROPERTY_TYPES_HAIRDRESSER = 'hairdresser';
    const PROPERTY_TYPES_HEALTH_BEAUTY = 'healthBeauty';
    const PROPERTY_TYPES_HEALTH_SPA = 'healthSpa';
    const PROPERTY_TYPES_HIRE = 'hire';
    const PROPERTY_TYPES_HOME_GARDEN = 'homeGarden';
    const PROPERTY_TYPES_HOME_BASED = 'homeBased';
    const PROPERTY_TYPES_NEW_HOME_DESIGNS = 'newHomeDesigns';
    const PROPERTY_TYPES_HOMEWARE_HARDWARE = 'homewareHardware';
    const PROPERTY_TYPES_HOSPITAL = 'hospital';
    const PROPERTY_TYPES_HOTEL = 'hotel';
    const PROPERTY_TYPES_HOTEL_LEISURE = 'hotelLeisure';
    const PROPERTY_TYPES_HOTEL_MOTEL_PUB = 'hotelMotelPub';
    const PROPERTY_TYPES_HOUSE = 'house';
    const PROPERTY_TYPES_NEW_HOUSE_LAND = 'newHouseLand';
    const PROPERTY_TYPES_HUNTING_TRAP = 'huntingTrap';
    const PROPERTY_TYPES_IMPORT = 'import';
    const PROPERTY_TYPES_IMPORT_EXPORT_WHOLESALE = 'importExportWholesale';
    const PROPERTY_TYPES_INDUSTRIAL_MANUFACTURING = 'industrialManufacturing';
    const PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE = 'industrialWarehouse';
    const PROPERTY_TYPES_INSEMINATION = 'insemination';
    const PROPERTY_TYPES_INSURANCE = 'insurance';
    const PROPERTY_TYPES_INTERNATIONAL_NEW_DEVELOPMENT = 'internationalNewDevelopment';
    const PROPERTY_TYPES_INTERNET = 'internet';
    const PROPERTY_TYPES_IRRIGATION_SERVICES = 'irrigationServices';
    const PROPERTY_TYPES_JUICE_BAR = 'juiceBar';
    const PROPERTY_TYPES_LAND_CLEARING = 'landClearing';
    const PROPERTY_TYPES_NEW_LAND = 'newLand';
    const PROPERTY_TYPES_LANDSCAPING = 'landscaping';
    const PROPERTY_TYPES_LAUNDRY_DRY_CLEANING = 'laundryDryCleaning';
    const PROPERTY_TYPES_LEGAL = 'legal';
    const PROPERTY_TYPES_LEISURE_ENTERTAINMENT = 'leisureEntertainment';
    const PROPERTY_TYPES_LIMOUSINE_TAXI = 'limousineTaxi';
    const PROPERTY_TYPES_LIVESTOCK = 'livestock';
    const PROPERTY_TYPES_INTERNATIONAL_COMMERCIAL = 'internationalCommercial';
    const PROPERTY_TYPES_MACHINERY = 'machinery';
    const PROPERTY_TYPES_MACHINERY_METAL = 'machineryMetal';
    const PROPERTY_TYPES_MANAGEMENT_RIGHTS = 'managementRights';
    const PROPERTY_TYPES_MANUFACTURERS = 'manufacturers';
    const PROPERTY_TYPES_MANUFACTURING_ENGINEERING = 'manufacturingEngineering';
    const PROPERTY_TYPES_MARINE = 'marine';
    const PROPERTY_TYPES_MASSAGE = 'massage';
    const PROPERTY_TYPES_MECHANICAL_REPAIR = 'mechanicalRepair';
    const PROPERTY_TYPES_MEDIA = 'media';
    const PROPERTY_TYPES_MEDICAL = 'medical';
    const PROPERTY_TYPES_MEDICAL_CONSULTING = 'medicalConsulting';
    const PROPERTY_TYPES_MEDICAL_PRACTICE = 'medicalPractice';
    const PROPERTY_TYPES_MINING_EARTH_MOVING = 'miningEarthMoving';
    const PROPERTY_TYPES_MOBILE_SERVICES = 'mobileServices';
    const PROPERTY_TYPES_MOTEL = 'motel';
    const PROPERTY_TYPES_MOTORCYCLE = 'motorcycle';
    const PROPERTY_TYPES_MUSIC_RELATED = 'musicRelated';
    const PROPERTY_TYPES_MUSTERING = 'mustering';
    const PROPERTY_TYPES_NAILS = 'nails';
    const PROPERTY_TYPES_NATURAL_THERAPIES = 'naturalTherapies';
    const PROPERTY_TYPES_NEW_APARTMENTS = 'newApartments';
    const PROPERTY_TYPES_NEWSAGENCY = 'newsagency';
    const PROPERTY_TYPES_NURSERY = 'nursery';
    const PROPERTY_TYPES_NURSING_HOME = 'nursingHome';
    const PROPERTY_TYPES_OFFICES = 'offices';
    const PROPERTY_TYPES_OFFICE_SUPPLIES = 'officeSupplies';
    const PROPERTY_TYPES_OIL_GAS = 'oilGas';
    const PROPERTY_TYPES_ON_STREET = 'onStreet';
    const PROPERTY_TYPES_PANEL_BEATING = 'panelBeating';
    const PROPERTY_TYPES_PAPER_PRINTING = 'paperPrinting';
    const PROPERTY_TYPES_PARKING_CAR_SPACE = 'parkingCarSpace';
    const PROPERTY_TYPES_PENTHOUSE = 'penthouse';
    const PROPERTY_TYPES_PEST_RELATED = 'pestRelated';
    const PROPERTY_TYPES_PHARMACIES = 'pharmacies';
    const PROPERTY_TYPES_PLASTIC = 'plastic';
    const PROPERTY_TYPES_PLUMBING = 'plumbing';
    const PROPERTY_TYPES_POOL_WATER = 'poolWater';
    const PROPERTY_TYPES_POST_OFFICES = 'postOffices';
    const PROPERTY_TYPES_PRINT_PHOTO = 'printPhoto';
    const PROPERTY_TYPES_PROFESSIONAL = 'professional';
    const PROPERTY_TYPES_PROPERTY_REAL_ESTATE = 'propertyRealEstate';
    const PROPERTY_TYPES_RAIL = 'rail';
    const PROPERTY_TYPES_RECREATION_SPORT = 'recreationSport';
    const PROPERTY_TYPES_RECRUITMENT = 'recruitment';
    const PROPERTY_TYPES_REPAIR = 'repair';
    const PROPERTY_TYPES_RESORT = 'resort';
    const PROPERTY_TYPES_RESTAURANT = 'restaurant';
    const PROPERTY_TYPES_RETAIL = 'retail';
    const PROPERTY_TYPES_RETAILER = 'retailer';
    const PROPERTY_TYPES_RETIREMENT_VILLAGE = 'retirementVillage';
    const PROPERTY_TYPES_ROAD = 'road';
    const PROPERTY_TYPES_RURAL = 'rural';
    const PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING = 'ruralCommercialFarming';
    const PROPERTY_TYPES_SCIENTIFIC = 'scientific';
    const PROPERTY_TYPES_SEA = 'sea';
    const PROPERTY_TYPES_SECURITY = 'security';
    const PROPERTY_TYPES_SEMI_DETACHED = 'semiDetached';
    const PROPERTY_TYPES_SERVICE_STATION = 'serviceStation';
    const PROPERTY_TYPES_SERVICED = 'serviced';
    const PROPERTY_TYPES_SERVICES = 'services';
    const PROPERTY_TYPES_SHEARING = 'shearing';
    const PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS = 'showroomsBulkyGoods';
    const PROPERTY_TYPES_SPECIALIST_FARM = 'specialistFarm';
    const PROPERTY_TYPES_SPORTS_COMPLEX_GYM = 'sportsComplexGym';
    const PROPERTY_TYPES_STUDIO = 'studio';
    const PROPERTY_TYPES_SUPERMARKET = 'supermarket';
    const PROPERTY_TYPES_TAKEAWAY_FOOD = 'takeawayFood';
    const PROPERTY_TYPES_TAXI = 'taxi';
    const PROPERTY_TYPES_TERRACE = 'terrace';
    const PROPERTY_TYPES_THEME_PARK = 'themePark';
    const PROPERTY_TYPES_TOURS = 'tours';
    const PROPERTY_TYPES_TOWNHOUSE = 'townhouse';
    const PROPERTY_TYPES_TRAINING = 'training';
    const PROPERTY_TYPES_TRANSPORT_DISTRIBUTION = 'transportDistribution';
    const PROPERTY_TYPES_TRAVEL = 'travel';
    const PROPERTY_TYPES_TRUCK = 'truck';
    const PROPERTY_TYPES_VACANT_LAND = 'vacantLand';
    const PROPERTY_TYPES_VENDING = 'vending';
    const PROPERTY_TYPES_VILLA = 'villa';
    const PROPERTY_TYPES_WATER = 'water';
    const PROPERTY_TYPES_WELDING = 'welding';
    const PROPERTY_TYPES_WHOLESALE = 'wholesale';
    const PROPERTY_TYPES_WHOLESALERS = 'wholesalers';
    const PROPERTY_TYPES_WITH_SHOWROOM_WAREHOUSE = 'withShowroomWarehouse';
    const PROPERTY_TYPES_WITHIN_SHOPPING_COMPLEX = 'withinShoppingComplex';
    const PROPERTY_TYPES_WOOL_CLASSING = 'woolClassing';
    const PROPERTY_TYPES_WRECKERS = 'wreckers';
    const PROPERTY_TYPES_TATTERSALLS = 'tattersalls';
    const PROPERTY_TYPES_SERVICED_OFFICES = 'servicedOffices';
    const PROPERTY_TYPES_OTHER = 'other';
    const PROPERTY_TYPES_ALCOHOL_GROCERY = 'alcoholGrocery';
    const PROPERTY_TYPES_CAFE_RESTAURANT = 'cafeRestaurant';
    const PROPERTY_TYPES_DISCOUNT_STORE = 'discountStore';
    const PROPERTY_TYPES_ECO_FRIENDLY = 'ecoFriendly';
    const PROPERTY_TYPES_GREEN = 'green';
    const PROPERTY_TYPES_GROCERY = 'grocery';
    const PROPERTY_TYPES_SPECIALITY_RETAIL = 'specialityRetail';
    const PROPERTY_TYPES_STORAGE = 'storage';
    const PROPERTY_TYPES_TRAVEL_AGENCY = 'travelAgency';
    const PROPERTY_TYPES_VARIETY_STORE = 'varietyStore';
    const PROPERTY_TYPES_FRANCHISE_NEW = 'franchiseNew';
    const PROPERTY_TYPES_BUSINESS = 'business';
    const SEARCH_MODE_FOR_SALE = 'forSale';
    const SEARCH_MODE_FOR_LEASE = 'forLease';
    const SEARCH_MODE_SOLD = 'sold';
    const SEARCH_MODE_LEASED = 'leased';
    const SORT__DEFAULT = 'default';
    const SORT_NEWEST_FIRST = 'newestFirst';
    const SORT_CHEAPEST_TOTAL_FIRST = 'cheapestTotalFirst';
    const SORT_CHEAPEST_PER_SQM_FIRST = 'cheapestPerSqmFirst';
    const SORT_MOST_EXPENSIVE_TOTAL_FIRST = 'mostExpensiveTotalFirst';
    const SORT_MOST_EXPENSIVE_PER_SQM_FIRST = 'mostExpensivePerSqmFirst';
    const SORT_SUBURB_ASC = 'suburbAsc';
    const SORT_SUBURB_DESC = 'suburbDesc';
    const SORT_BUILDING_SIZE_ASC = 'buildingSizeAsc';
    const SORT_BUILDING_SIZE_DESC = 'buildingSizeDesc';
    const SALE_TYPE_STANDARD_SALE = 'standardSale';
    const SALE_TYPE_AUCTION = 'auction';
    const SALE_TYPE_EXPRESSION_OF_INTEREST = 'expressionOfInterest';
    const SALE_TYPE_TENDER = 'tender';
    const PROPERTY_TITLE_FREEHOLD = 'freehold';
    const PROPERTY_TITLE_STRATA = 'strata';
    const PROPERTY_TITLE_NO_BUILDING = 'noBuilding';
    const EXCLUSION_TYPES_SURROUNDING_SUBURBS = 'surroundingSuburbs';
    const EXCLUSION_TYPES_WITHOUT_PRICE = 'withoutPrice';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypesAllowableValues()
    {
        return [
            self::PROPERTY_TYPES_UNKNOWN,
            self::PROPERTY_TYPES_ACCESSORIES_PARTS,
            self::PROPERTY_TYPES_ACCOMMODATION_TOURISM,
            self::PROPERTY_TYPES_ACCOUNTING,
            self::PROPERTY_TYPES_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPES_ADULT,
            self::PROPERTY_TYPES_ADVERTISING_MARKETING,
            self::PROPERTY_TYPES_AERIAL,
            self::PROPERTY_TYPES_AERONAUTICAL,
            self::PROPERTY_TYPES_AGED_CARE,
            self::PROPERTY_TYPES_AGRICULTURAL,
            self::PROPERTY_TYPES_AIR,
            self::PROPERTY_TYPES_AIRCRAFT,
            self::PROPERTY_TYPES_ALARMS,
            self::PROPERTY_TYPES_ALCOHOL_LIQUOR,
            self::PROPERTY_TYPES_AMUSEMENTS,
            self::PROPERTY_TYPES_ANIMAL_RELATED,
            self::PROPERTY_TYPES_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPES_AQUACULTURE,
            self::PROPERTY_TYPES_AQUATIC_MARINE_MARINA_BERTH,
            self::PROPERTY_TYPES_ARTS_CRAFTS,
            self::PROPERTY_TYPES_AUTO_ELECTRICAL,
            self::PROPERTY_TYPES_AUTOMOTIVE,
            self::PROPERTY_TYPES_BACKPACKER_HOSTEL,
            self::PROPERTY_TYPES_BAKERY,
            self::PROPERTY_TYPES_BARS_NIGHTCLUBS,
            self::PROPERTY_TYPES_BEAUTY_HEALTH,
            self::PROPERTY_TYPES_BEAUTY_PRODUCTS,
            self::PROPERTY_TYPES_BEAUTY_SALON,
            self::PROPERTY_TYPES_BED_AND_BREAKFAST,
            self::PROPERTY_TYPES_BIKE_AND_MOTORCYCLE,
            self::PROPERTY_TYPES_BLOCK_OF_UNITS,
            self::PROPERTY_TYPES_BOARDING_KENNELS,
            self::PROPERTY_TYPES_BOATS_MARINE_MARINA_BERTH,
            self::PROPERTY_TYPES_BOOKKEEPING,
            self::PROPERTY_TYPES_BROKERAGE,
            self::PROPERTY_TYPES_BUILDER,
            self::PROPERTY_TYPES_BUILDING_AND_CONSTRUCTION,
            self::PROPERTY_TYPES_BUS,
            self::PROPERTY_TYPES_BUTCHER,
            self::PROPERTY_TYPES_CAFE_COFFEE_SHOP,
            self::PROPERTY_TYPES_CAR,
            self::PROPERTY_TYPES_CAR_BUS_TRUCK,
            self::PROPERTY_TYPES_CAR_DEALERSHIP,
            self::PROPERTY_TYPES_CAR_RENTAL,
            self::PROPERTY_TYPES_CAR_SPACE,
            self::PROPERTY_TYPES_CAR_WASH,
            self::PROPERTY_TYPES_CARAVAN_PARK,
            self::PROPERTY_TYPES_CARPENTER,
            self::PROPERTY_TYPES_CATERING,
            self::PROPERTY_TYPES_CHILD_CARE,
            self::PROPERTY_TYPES_CIVIL,
            self::PROPERTY_TYPES_CLEANING,
            self::PROPERTY_TYPES_CLEANING_AND_MAINTENANCE,
            self::PROPERTY_TYPES_CLINICAL_PRACTICE,
            self::PROPERTY_TYPES_CLOTHING_ACCESSORIES,
            self::PROPERTY_TYPES_CLOTHING_FOOTWEAR,
            self::PROPERTY_TYPES_COMMUNICATION,
            self::PROPERTY_TYPES_COMMUNICATIONS,
            self::PROPERTY_TYPES_COMPUTER_IT,
            self::PROPERTY_TYPES_COMPUTER_AND_INTERNET,
            self::PROPERTY_TYPES_CONSTRUCTION,
            self::PROPERTY_TYPES_CONVENIENCE_STORE,
            self::PROPERTY_TYPES_COPY_LAMINATE,
            self::PROPERTY_TYPES_COURIER,
            self::PROPERTY_TYPES_CROP_HARVESTING,
            self::PROPERTY_TYPES_CUSTOMS,
            self::PROPERTY_TYPES_DAIRY_FARMING,
            self::PROPERTY_TYPES_DELI,
            self::PROPERTY_TYPES_DENTAL,
            self::PROPERTY_TYPES_DETAILING,
            self::PROPERTY_TYPES_DEVELOPMENT_LAND,
            self::PROPERTY_TYPES_DEVELOPMENT_SITE,
            self::PROPERTY_TYPES_DISTRIBUTORS,
            self::PROPERTY_TYPES_DRIVING_SCHOOLS,
            self::PROPERTY_TYPES_DUPLEX,
            self::PROPERTY_TYPES_EDUCATION_TRAINING,
            self::PROPERTY_TYPES_EDUCATIONAL,
            self::PROPERTY_TYPES_ELECTRICAL,
            self::PROPERTY_TYPES_EMPLOYMENT_RECRUITMENT,
            self::PROPERTY_TYPES_ENTERTAINMENT,
            self::PROPERTY_TYPES_ENTERTAINMENT_TECHNOLOGY,
            self::PROPERTY_TYPES_EXPORT,
            self::PROPERTY_TYPES_FARM,
            self::PROPERTY_TYPES_FARMING,
            self::PROPERTY_TYPES_FERTILISER,
            self::PROPERTY_TYPES_FINANCE,
            self::PROPERTY_TYPES_FINANCIAL_SERVICES,
            self::PROPERTY_TYPES_FISHING_FORESTRY,
            self::PROPERTY_TYPES_FLORIST_NURSERY,
            self::PROPERTY_TYPES_FOOD_BEVERAGE,
            self::PROPERTY_TYPES_FOOD_BEVERAGE_HOSPITALITY,
            self::PROPERTY_TYPES_FRANCHISE_BUSINESS_OPPORTUNITIES,
            self::PROPERTY_TYPES_FREIGHT,
            self::PROPERTY_TYPES_FRUIT_VEG_FRESH_PRODUCE,
            self::PROPERTY_TYPES_FRUIT_PICKING,
            self::PROPERTY_TYPES_FUNCTION_CENTRE,
            self::PROPERTY_TYPES_FURNITURE_TIMBER,
            self::PROPERTY_TYPES_GAMBLING,
            self::PROPERTY_TYPES_GARDEN_HOUSEHOLD,
            self::PROPERTY_TYPES_GARDEN_NURSERIES,
            self::PROPERTY_TYPES_GARDENING,
            self::PROPERTY_TYPES_GLASS_CERAMIC,
            self::PROPERTY_TYPES_GUEST_HOUSE_BB,
            self::PROPERTY_TYPES_GUESTHOUSE,
            self::PROPERTY_TYPES_HAIRDRESSER,
            self::PROPERTY_TYPES_HEALTH_BEAUTY,
            self::PROPERTY_TYPES_HEALTH_SPA,
            self::PROPERTY_TYPES_HIRE,
            self::PROPERTY_TYPES_HOME_GARDEN,
            self::PROPERTY_TYPES_HOME_BASED,
            self::PROPERTY_TYPES_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPES_HOMEWARE_HARDWARE,
            self::PROPERTY_TYPES_HOSPITAL,
            self::PROPERTY_TYPES_HOTEL,
            self::PROPERTY_TYPES_HOTEL_LEISURE,
            self::PROPERTY_TYPES_HOTEL_MOTEL_PUB,
            self::PROPERTY_TYPES_HOUSE,
            self::PROPERTY_TYPES_NEW_HOUSE_LAND,
            self::PROPERTY_TYPES_HUNTING_TRAP,
            self::PROPERTY_TYPES_IMPORT,
            self::PROPERTY_TYPES_IMPORT_EXPORT_WHOLESALE,
            self::PROPERTY_TYPES_INDUSTRIAL_MANUFACTURING,
            self::PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE,
            self::PROPERTY_TYPES_INSEMINATION,
            self::PROPERTY_TYPES_INSURANCE,
            self::PROPERTY_TYPES_INTERNATIONAL_NEW_DEVELOPMENT,
            self::PROPERTY_TYPES_INTERNET,
            self::PROPERTY_TYPES_IRRIGATION_SERVICES,
            self::PROPERTY_TYPES_JUICE_BAR,
            self::PROPERTY_TYPES_LAND_CLEARING,
            self::PROPERTY_TYPES_NEW_LAND,
            self::PROPERTY_TYPES_LANDSCAPING,
            self::PROPERTY_TYPES_LAUNDRY_DRY_CLEANING,
            self::PROPERTY_TYPES_LEGAL,
            self::PROPERTY_TYPES_LEISURE_ENTERTAINMENT,
            self::PROPERTY_TYPES_LIMOUSINE_TAXI,
            self::PROPERTY_TYPES_LIVESTOCK,
            self::PROPERTY_TYPES_INTERNATIONAL_COMMERCIAL,
            self::PROPERTY_TYPES_MACHINERY,
            self::PROPERTY_TYPES_MACHINERY_METAL,
            self::PROPERTY_TYPES_MANAGEMENT_RIGHTS,
            self::PROPERTY_TYPES_MANUFACTURERS,
            self::PROPERTY_TYPES_MANUFACTURING_ENGINEERING,
            self::PROPERTY_TYPES_MARINE,
            self::PROPERTY_TYPES_MASSAGE,
            self::PROPERTY_TYPES_MECHANICAL_REPAIR,
            self::PROPERTY_TYPES_MEDIA,
            self::PROPERTY_TYPES_MEDICAL,
            self::PROPERTY_TYPES_MEDICAL_CONSULTING,
            self::PROPERTY_TYPES_MEDICAL_PRACTICE,
            self::PROPERTY_TYPES_MINING_EARTH_MOVING,
            self::PROPERTY_TYPES_MOBILE_SERVICES,
            self::PROPERTY_TYPES_MOTEL,
            self::PROPERTY_TYPES_MOTORCYCLE,
            self::PROPERTY_TYPES_MUSIC_RELATED,
            self::PROPERTY_TYPES_MUSTERING,
            self::PROPERTY_TYPES_NAILS,
            self::PROPERTY_TYPES_NATURAL_THERAPIES,
            self::PROPERTY_TYPES_NEW_APARTMENTS,
            self::PROPERTY_TYPES_NEWSAGENCY,
            self::PROPERTY_TYPES_NURSERY,
            self::PROPERTY_TYPES_NURSING_HOME,
            self::PROPERTY_TYPES_OFFICES,
            self::PROPERTY_TYPES_OFFICE_SUPPLIES,
            self::PROPERTY_TYPES_OIL_GAS,
            self::PROPERTY_TYPES_ON_STREET,
            self::PROPERTY_TYPES_PANEL_BEATING,
            self::PROPERTY_TYPES_PAPER_PRINTING,
            self::PROPERTY_TYPES_PARKING_CAR_SPACE,
            self::PROPERTY_TYPES_PENTHOUSE,
            self::PROPERTY_TYPES_PEST_RELATED,
            self::PROPERTY_TYPES_PHARMACIES,
            self::PROPERTY_TYPES_PLASTIC,
            self::PROPERTY_TYPES_PLUMBING,
            self::PROPERTY_TYPES_POOL_WATER,
            self::PROPERTY_TYPES_POST_OFFICES,
            self::PROPERTY_TYPES_PRINT_PHOTO,
            self::PROPERTY_TYPES_PROFESSIONAL,
            self::PROPERTY_TYPES_PROPERTY_REAL_ESTATE,
            self::PROPERTY_TYPES_RAIL,
            self::PROPERTY_TYPES_RECREATION_SPORT,
            self::PROPERTY_TYPES_RECRUITMENT,
            self::PROPERTY_TYPES_REPAIR,
            self::PROPERTY_TYPES_RESORT,
            self::PROPERTY_TYPES_RESTAURANT,
            self::PROPERTY_TYPES_RETAIL,
            self::PROPERTY_TYPES_RETAILER,
            self::PROPERTY_TYPES_RETIREMENT_VILLAGE,
            self::PROPERTY_TYPES_ROAD,
            self::PROPERTY_TYPES_RURAL,
            self::PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING,
            self::PROPERTY_TYPES_SCIENTIFIC,
            self::PROPERTY_TYPES_SEA,
            self::PROPERTY_TYPES_SECURITY,
            self::PROPERTY_TYPES_SEMI_DETACHED,
            self::PROPERTY_TYPES_SERVICE_STATION,
            self::PROPERTY_TYPES_SERVICED,
            self::PROPERTY_TYPES_SERVICES,
            self::PROPERTY_TYPES_SHEARING,
            self::PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS,
            self::PROPERTY_TYPES_SPECIALIST_FARM,
            self::PROPERTY_TYPES_SPORTS_COMPLEX_GYM,
            self::PROPERTY_TYPES_STUDIO,
            self::PROPERTY_TYPES_SUPERMARKET,
            self::PROPERTY_TYPES_TAKEAWAY_FOOD,
            self::PROPERTY_TYPES_TAXI,
            self::PROPERTY_TYPES_TERRACE,
            self::PROPERTY_TYPES_THEME_PARK,
            self::PROPERTY_TYPES_TOURS,
            self::PROPERTY_TYPES_TOWNHOUSE,
            self::PROPERTY_TYPES_TRAINING,
            self::PROPERTY_TYPES_TRANSPORT_DISTRIBUTION,
            self::PROPERTY_TYPES_TRAVEL,
            self::PROPERTY_TYPES_TRUCK,
            self::PROPERTY_TYPES_VACANT_LAND,
            self::PROPERTY_TYPES_VENDING,
            self::PROPERTY_TYPES_VILLA,
            self::PROPERTY_TYPES_WATER,
            self::PROPERTY_TYPES_WELDING,
            self::PROPERTY_TYPES_WHOLESALE,
            self::PROPERTY_TYPES_WHOLESALERS,
            self::PROPERTY_TYPES_WITH_SHOWROOM_WAREHOUSE,
            self::PROPERTY_TYPES_WITHIN_SHOPPING_COMPLEX,
            self::PROPERTY_TYPES_WOOL_CLASSING,
            self::PROPERTY_TYPES_WRECKERS,
            self::PROPERTY_TYPES_TATTERSALLS,
            self::PROPERTY_TYPES_SERVICED_OFFICES,
            self::PROPERTY_TYPES_OTHER,
            self::PROPERTY_TYPES_ALCOHOL_GROCERY,
            self::PROPERTY_TYPES_CAFE_RESTAURANT,
            self::PROPERTY_TYPES_DISCOUNT_STORE,
            self::PROPERTY_TYPES_ECO_FRIENDLY,
            self::PROPERTY_TYPES_GREEN,
            self::PROPERTY_TYPES_GROCERY,
            self::PROPERTY_TYPES_SPECIALITY_RETAIL,
            self::PROPERTY_TYPES_STORAGE,
            self::PROPERTY_TYPES_TRAVEL_AGENCY,
            self::PROPERTY_TYPES_VARIETY_STORE,
            self::PROPERTY_TYPES_FRANCHISE_NEW,
            self::PROPERTY_TYPES_BUSINESS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchModeAllowableValues()
    {
        return [
            self::SEARCH_MODE_FOR_SALE,
            self::SEARCH_MODE_FOR_LEASE,
            self::SEARCH_MODE_SOLD,
            self::SEARCH_MODE_LEASED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortAllowableValues()
    {
        return [
            self::SORT__DEFAULT,
            self::SORT_NEWEST_FIRST,
            self::SORT_CHEAPEST_TOTAL_FIRST,
            self::SORT_CHEAPEST_PER_SQM_FIRST,
            self::SORT_MOST_EXPENSIVE_TOTAL_FIRST,
            self::SORT_MOST_EXPENSIVE_PER_SQM_FIRST,
            self::SORT_SUBURB_ASC,
            self::SORT_SUBURB_DESC,
            self::SORT_BUILDING_SIZE_ASC,
            self::SORT_BUILDING_SIZE_DESC,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaleTypeAllowableValues()
    {
        return [
            self::SALE_TYPE_STANDARD_SALE,
            self::SALE_TYPE_AUCTION,
            self::SALE_TYPE_EXPRESSION_OF_INTEREST,
            self::SALE_TYPE_TENDER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTitleAllowableValues()
    {
        return [
            self::PROPERTY_TITLE_FREEHOLD,
            self::PROPERTY_TITLE_STRATA,
            self::PROPERTY_TITLE_NO_BUILDING,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExclusionTypesAllowableValues()
    {
        return [
            self::EXCLUSION_TYPES_SURROUNDING_SUBURBS,
            self::EXCLUSION_TYPES_WITHOUT_PRICE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['advertiser_id'] = isset($data['advertiser_id']) ? $data['advertiser_id'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['geo_window'] = isset($data['geo_window']) ? $data['geo_window'] : null;
        $this->container['land_area_min'] = isset($data['land_area_min']) ? $data['land_area_min'] : null;
        $this->container['land_area_max'] = isset($data['land_area_max']) ? $data['land_area_max'] : null;
        $this->container['building_size_min'] = isset($data['building_size_min']) ? $data['building_size_min'] : null;
        $this->container['building_size_max'] = isset($data['building_size_max']) ? $data['building_size_max'] : null;
        $this->container['search_mode'] = isset($data['search_mode']) ? $data['search_mode'] : null;
        $this->container['occupancy'] = isset($data['occupancy']) ? $data['occupancy'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['sale_type'] = isset($data['sale_type']) ? $data['sale_type'] : null;
        $this->container['property_title'] = isset($data['property_title']) ? $data['property_title'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['exclusion_types'] = isset($data['exclusion_types']) ? $data['exclusion_types'] : null;
        $this->container['annual_return'] = isset($data['annual_return']) ? $data['annual_return'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSearchModeAllowableValues();
        if (!is_null($this->container['search_mode']) && !in_array($this->container['search_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'search_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortAllowableValues();
        if (!is_null($this->container['sort']) && !in_array($this->container['sort'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSaleTypeAllowableValues();
        if (!is_null($this->container['sale_type']) && !in_array($this->container['sale_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sale_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPropertyTitleAllowableValues();
        if (!is_null($this->container['property_title']) && !in_array($this->container['property_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'property_title', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets advertiser_id
     *
     * @return int
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param int $advertiser_id Agency ID
     *
     * @return $this
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Search results page size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return string[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param string[] $property_types Listing property types
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $allowedValues = $this->getPropertyTypesAllowableValues();
        if (!is_null($property_types) && array_diff($property_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch[] $locations Location search criteria
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[] $keywords Search listings by keyword
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets geo_window
     *
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow
     */
    public function getGeoWindow()
    {
        return $this->container['geo_window'];
    }

    /**
     * Sets geo_window
     *
     * @param \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow $geo_window geo_window
     *
     * @return $this
     */
    public function setGeoWindow($geo_window)
    {
        $this->container['geo_window'] = $geo_window;

        return $this;
    }

    /**
     * Gets land_area_min
     *
     * @return int
     */
    public function getLandAreaMin()
    {
        return $this->container['land_area_min'];
    }

    /**
     * Sets land_area_min
     *
     * @param int $land_area_min Minimum land area
     *
     * @return $this
     */
    public function setLandAreaMin($land_area_min)
    {
        $this->container['land_area_min'] = $land_area_min;

        return $this;
    }

    /**
     * Gets land_area_max
     *
     * @return int
     */
    public function getLandAreaMax()
    {
        return $this->container['land_area_max'];
    }

    /**
     * Sets land_area_max
     *
     * @param int $land_area_max Maximum land area
     *
     * @return $this
     */
    public function setLandAreaMax($land_area_max)
    {
        $this->container['land_area_max'] = $land_area_max;

        return $this;
    }

    /**
     * Gets building_size_min
     *
     * @return int
     */
    public function getBuildingSizeMin()
    {
        return $this->container['building_size_min'];
    }

    /**
     * Sets building_size_min
     *
     * @param int $building_size_min Minimum building area
     *
     * @return $this
     */
    public function setBuildingSizeMin($building_size_min)
    {
        $this->container['building_size_min'] = $building_size_min;

        return $this;
    }

    /**
     * Gets building_size_max
     *
     * @return int
     */
    public function getBuildingSizeMax()
    {
        return $this->container['building_size_max'];
    }

    /**
     * Sets building_size_max
     *
     * @param int $building_size_max Maximum building area
     *
     * @return $this
     */
    public function setBuildingSizeMax($building_size_max)
    {
        $this->container['building_size_max'] = $building_size_max;

        return $this;
    }

    /**
     * Gets search_mode
     *
     * @return string
     */
    public function getSearchMode()
    {
        return $this->container['search_mode'];
    }

    /**
     * Sets search_mode
     *
     * @param string $search_mode Search mode
     *
     * @return $this
     */
    public function setSearchMode($search_mode)
    {
        $allowedValues = $this->getSearchModeAllowableValues();
        if (!is_null($search_mode) && !in_array($search_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'search_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_mode'] = $search_mode;

        return $this;
    }

    /**
     * Gets occupancy
     *
     * @return string
     */
    public function getOccupancy()
    {
        return $this->container['occupancy'];
    }

    /**
     * Sets occupancy
     *
     * @param string $occupancy Occupancy
     *
     * @return $this
     */
    public function setOccupancy($occupancy)
    {
        $this->container['occupancy'] = $occupancy;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort Sorting order
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $allowedValues = $this->getSortAllowableValues();
        if (!is_null($sort) && !in_array($sort, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets sale_type
     *
     * @return string
     */
    public function getSaleType()
    {
        return $this->container['sale_type'];
    }

    /**
     * Sets sale_type
     *
     * @param string $sale_type Sale type
     *
     * @return $this
     */
    public function setSaleType($sale_type)
    {
        $allowedValues = $this->getSaleTypeAllowableValues();
        if (!is_null($sale_type) && !in_array($sale_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sale_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sale_type'] = $sale_type;

        return $this;
    }

    /**
     * Gets property_title
     *
     * @return string
     */
    public function getPropertyTitle()
    {
        return $this->container['property_title'];
    }

    /**
     * Sets property_title
     *
     * @param string $property_title Property title
     *
     * @return $this
     */
    public function setPropertyTitle($property_title)
    {
        $allowedValues = $this->getPropertyTitleAllowableValues();
        if (!is_null($property_title) && !in_array($property_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_title', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_title'] = $property_title;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param \Swagger\Client\Model\DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets exclusion_types
     *
     * @return string[]
     */
    public function getExclusionTypes()
    {
        return $this->container['exclusion_types'];
    }

    /**
     * Sets exclusion_types
     *
     * @param string[] $exclusion_types Exclusion Types
     *
     * @return $this
     */
    public function setExclusionTypes($exclusion_types)
    {
        $allowedValues = $this->getExclusionTypesAllowableValues();
        if (!is_null($exclusion_types) && array_diff($exclusion_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclusion_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclusion_types'] = $exclusion_types;

        return $this;
    }

    /**
     * Gets annual_return
     *
     * @return int
     */
    public function getAnnualReturn()
    {
        return $this->container['annual_return'];
    }

    /**
     * Sets annual_return
     *
     * @param int $annual_return Minimum annual return (in percents)
     *
     * @return $this
     */
    public function setAnnualReturn($annual_return)
    {
        $this->container['annual_return'] = $annual_return;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
