<?php
/**
 * DomainLocationProfilesServiceV1ModelLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainLocationProfilesServiceV1ModelLocation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainLocationProfilesServiceV1ModelLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.LocationProfilesService.v1.Model.Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain_location_id' => 'int',
        'postcode' => 'string',
        'pf_location_id' => 'string',
        'surrounding_suburbs' => '\Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs[]',
        'url_slug' => 'string',
        'suburb_name' => 'string',
        'data' => '\Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationData',
        'apm_location_id' => 'int',
        'location_id' => 'int',
        'area_name' => 'string',
        'region_name' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain_location_id' => 'int32',
        'postcode' => null,
        'pf_location_id' => null,
        'surrounding_suburbs' => null,
        'url_slug' => null,
        'suburb_name' => null,
        'data' => null,
        'apm_location_id' => 'int32',
        'location_id' => 'int32',
        'area_name' => null,
        'region_name' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain_location_id' => 'domainLocationId',
        'postcode' => 'postcode',
        'pf_location_id' => 'pfLocationId',
        'surrounding_suburbs' => 'surroundingSuburbs',
        'url_slug' => 'urlSlug',
        'suburb_name' => 'suburbName',
        'data' => 'data',
        'apm_location_id' => 'apmLocationId',
        'location_id' => 'locationId',
        'area_name' => 'areaName',
        'region_name' => 'regionName',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain_location_id' => 'setDomainLocationId',
        'postcode' => 'setPostcode',
        'pf_location_id' => 'setPfLocationId',
        'surrounding_suburbs' => 'setSurroundingSuburbs',
        'url_slug' => 'setUrlSlug',
        'suburb_name' => 'setSuburbName',
        'data' => 'setData',
        'apm_location_id' => 'setApmLocationId',
        'location_id' => 'setLocationId',
        'area_name' => 'setAreaName',
        'region_name' => 'setRegionName',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain_location_id' => 'getDomainLocationId',
        'postcode' => 'getPostcode',
        'pf_location_id' => 'getPfLocationId',
        'surrounding_suburbs' => 'getSurroundingSuburbs',
        'url_slug' => 'getUrlSlug',
        'suburb_name' => 'getSuburbName',
        'data' => 'getData',
        'apm_location_id' => 'getApmLocationId',
        'location_id' => 'getLocationId',
        'area_name' => 'getAreaName',
        'region_name' => 'getRegionName',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain_location_id'] = isset($data['domain_location_id']) ? $data['domain_location_id'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['pf_location_id'] = isset($data['pf_location_id']) ? $data['pf_location_id'] : null;
        $this->container['surrounding_suburbs'] = isset($data['surrounding_suburbs']) ? $data['surrounding_suburbs'] : null;
        $this->container['url_slug'] = isset($data['url_slug']) ? $data['url_slug'] : null;
        $this->container['suburb_name'] = isset($data['suburb_name']) ? $data['suburb_name'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['apm_location_id'] = isset($data['apm_location_id']) ? $data['apm_location_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['area_name'] = isset($data['area_name']) ? $data['area_name'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain_location_id
     *
     * @return int
     */
    public function getDomainLocationId()
    {
        return $this->container['domain_location_id'];
    }

    /**
     * Sets domain_location_id
     *
     * @param int $domain_location_id domain_location_id
     *
     * @return $this
     */
    public function setDomainLocationId($domain_location_id)
    {
        $this->container['domain_location_id'] = $domain_location_id;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets pf_location_id
     *
     * @return string
     */
    public function getPfLocationId()
    {
        return $this->container['pf_location_id'];
    }

    /**
     * Sets pf_location_id
     *
     * @param string $pf_location_id pf_location_id
     *
     * @return $this
     */
    public function setPfLocationId($pf_location_id)
    {
        $this->container['pf_location_id'] = $pf_location_id;

        return $this;
    }

    /**
     * Gets surrounding_suburbs
     *
     * @return \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs[]
     */
    public function getSurroundingSuburbs()
    {
        return $this->container['surrounding_suburbs'];
    }

    /**
     * Sets surrounding_suburbs
     *
     * @param \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs[] $surrounding_suburbs surrounding_suburbs
     *
     * @return $this
     */
    public function setSurroundingSuburbs($surrounding_suburbs)
    {
        $this->container['surrounding_suburbs'] = $surrounding_suburbs;

        return $this;
    }

    /**
     * Gets url_slug
     *
     * @return string
     */
    public function getUrlSlug()
    {
        return $this->container['url_slug'];
    }

    /**
     * Sets url_slug
     *
     * @param string $url_slug url_slug
     *
     * @return $this
     */
    public function setUrlSlug($url_slug)
    {
        $this->container['url_slug'] = $url_slug;

        return $this;
    }

    /**
     * Gets suburb_name
     *
     * @return string
     */
    public function getSuburbName()
    {
        return $this->container['suburb_name'];
    }

    /**
     * Sets suburb_name
     *
     * @param string $suburb_name suburb_name
     *
     * @return $this
     */
    public function setSuburbName($suburb_name)
    {
        $this->container['suburb_name'] = $suburb_name;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationData
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationData $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets apm_location_id
     *
     * @return int
     */
    public function getApmLocationId()
    {
        return $this->container['apm_location_id'];
    }

    /**
     * Sets apm_location_id
     *
     * @param int $apm_location_id apm_location_id
     *
     * @return $this
     */
    public function setApmLocationId($apm_location_id)
    {
        $this->container['apm_location_id'] = $apm_location_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets area_name
     *
     * @return string
     */
    public function getAreaName()
    {
        return $this->container['area_name'];
    }

    /**
     * Sets area_name
     *
     * @param string $area_name area_name
     *
     * @return $this
     */
    public function setAreaName($area_name)
    {
        $this->container['area_name'] = $area_name;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
