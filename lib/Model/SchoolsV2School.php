<?php
/**
 * SchoolsV2School
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SchoolsV2School Class Doc Comment
 *
 * @category Class
 * @description School
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SchoolsV2School implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Schools.V2.School';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'school_sector' => 'string',
        'school_type' => 'string',
        'gender' => 'string',
        'name' => 'string',
        'suburb' => 'string',
        'state' => 'string',
        'postcode' => 'string',
        'centroid' => 'string',
        'profile' => '\Swagger\Client\Model\SchoolsV2SchoolProfile',
        'catchments' => '\Swagger\Client\Model\SchoolsV2SchoolCatchment[]',
        'domain_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'school_sector' => null,
        'school_type' => null,
        'gender' => null,
        'name' => null,
        'suburb' => null,
        'state' => null,
        'postcode' => null,
        'centroid' => null,
        'profile' => null,
        'catchments' => null,
        'domain_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'school_sector' => 'schoolSector',
        'school_type' => 'schoolType',
        'gender' => 'gender',
        'name' => 'name',
        'suburb' => 'suburb',
        'state' => 'state',
        'postcode' => 'postcode',
        'centroid' => 'centroid',
        'profile' => 'profile',
        'catchments' => 'catchments',
        'domain_id' => 'domainId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'school_sector' => 'setSchoolSector',
        'school_type' => 'setSchoolType',
        'gender' => 'setGender',
        'name' => 'setName',
        'suburb' => 'setSuburb',
        'state' => 'setState',
        'postcode' => 'setPostcode',
        'centroid' => 'setCentroid',
        'profile' => 'setProfile',
        'catchments' => 'setCatchments',
        'domain_id' => 'setDomainId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'school_sector' => 'getSchoolSector',
        'school_type' => 'getSchoolType',
        'gender' => 'getGender',
        'name' => 'getName',
        'suburb' => 'getSuburb',
        'state' => 'getState',
        'postcode' => 'getPostcode',
        'centroid' => 'getCentroid',
        'profile' => 'getProfile',
        'catchments' => 'getCatchments',
        'domain_id' => 'getDomainId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCHOOL_SECTOR_CATHOLIC = 'Catholic';
    const SCHOOL_SECTOR_GOVERNMENT = 'Government';
    const SCHOOL_SECTOR_INDEPENDENT = 'Independent';
    const SCHOOL_TYPE_COMBINED = 'Combined';
    const SCHOOL_TYPE_PRIMARY = 'Primary';
    const SCHOOL_TYPE_SECONDARY = 'Secondary';
    const SCHOOL_TYPE_SPECIAL = 'Special';
    const GENDER_BOYS = 'Boys';
    const GENDER_GIRLS = 'Girls';
    const GENDER_CO_ED = 'CoEd';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchoolSectorAllowableValues()
    {
        return [
            self::SCHOOL_SECTOR_CATHOLIC,
            self::SCHOOL_SECTOR_GOVERNMENT,
            self::SCHOOL_SECTOR_INDEPENDENT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchoolTypeAllowableValues()
    {
        return [
            self::SCHOOL_TYPE_COMBINED,
            self::SCHOOL_TYPE_PRIMARY,
            self::SCHOOL_TYPE_SECONDARY,
            self::SCHOOL_TYPE_SPECIAL,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_BOYS,
            self::GENDER_GIRLS,
            self::GENDER_CO_ED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['school_sector'] = isset($data['school_sector']) ? $data['school_sector'] : null;
        $this->container['school_type'] = isset($data['school_type']) ? $data['school_type'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['centroid'] = isset($data['centroid']) ? $data['centroid'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['catchments'] = isset($data['catchments']) ? $data['catchments'] : null;
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSchoolSectorAllowableValues();
        if (!is_null($this->container['school_sector']) && !in_array($this->container['school_sector'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'school_sector', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSchoolTypeAllowableValues();
        if (!is_null($this->container['school_type']) && !in_array($this->container['school_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'school_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets school_sector
     *
     * @return string
     */
    public function getSchoolSector()
    {
        return $this->container['school_sector'];
    }

    /**
     * Sets school_sector
     *
     * @param string $school_sector Gets or Sets SchoolSector
     *
     * @return $this
     */
    public function setSchoolSector($school_sector)
    {
        $allowedValues = $this->getSchoolSectorAllowableValues();
        if (!is_null($school_sector) && !in_array($school_sector, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'school_sector', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['school_sector'] = $school_sector;

        return $this;
    }

    /**
     * Gets school_type
     *
     * @return string
     */
    public function getSchoolType()
    {
        return $this->container['school_type'];
    }

    /**
     * Sets school_type
     *
     * @param string $school_type Gets or Sets SchoolType
     *
     * @return $this
     */
    public function setSchoolType($school_type)
    {
        $allowedValues = $this->getSchoolTypeAllowableValues();
        if (!is_null($school_type) && !in_array($school_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'school_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['school_type'] = $school_type;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gets or Sets Gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets or Sets Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Gets or Sets Suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Gets or Sets State
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Gets or Sets Postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets centroid
     *
     * @return string
     */
    public function getCentroid()
    {
        return $this->container['centroid'];
    }

    /**
     * Sets centroid
     *
     * @param string $centroid Gets or Sets Centroid
     *
     * @return $this
     */
    public function setCentroid($centroid)
    {
        $this->container['centroid'] = $centroid;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Swagger\Client\Model\SchoolsV2SchoolProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Swagger\Client\Model\SchoolsV2SchoolProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets catchments
     *
     * @return \Swagger\Client\Model\SchoolsV2SchoolCatchment[]
     */
    public function getCatchments()
    {
        return $this->container['catchments'];
    }

    /**
     * Sets catchments
     *
     * @param \Swagger\Client\Model\SchoolsV2SchoolCatchment[] $catchments Gets or Sets Catchments
     *
     * @return $this
     */
    public function setCatchments($catchments)
    {
        $this->container['catchments'] = $catchments;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param int $domain_id Gets or Sets DomainId
     *
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
