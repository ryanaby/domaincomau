<?php
/**
 * ListingsV2AdvertiserIdentifiers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingsV2AdvertiserIdentifiers Class Doc Comment
 *
 * @category Class
 * @description Encapsulates the listing&#x27;s advertiser identifiers
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsV2AdvertiserIdentifiers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Listings.V2.AdvertiserIdentifiers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advertiser_type' => 'string',
        'advertiser_id' => 'int',
        'contact_ids' => 'int[]',
        'agent_ids' => 'string[]',
        'conjunction_contact_ids' => 'int[]',
        'conjunction_agent_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advertiser_type' => null,
        'advertiser_id' => 'int32',
        'contact_ids' => 'int32',
        'agent_ids' => null,
        'conjunction_contact_ids' => 'int32',
        'conjunction_agent_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertiser_type' => 'advertiserType',
        'advertiser_id' => 'advertiserId',
        'contact_ids' => 'contactIds',
        'agent_ids' => 'agentIds',
        'conjunction_contact_ids' => 'conjunctionContactIds',
        'conjunction_agent_ids' => 'conjunctionAgentIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertiser_type' => 'setAdvertiserType',
        'advertiser_id' => 'setAdvertiserId',
        'contact_ids' => 'setContactIds',
        'agent_ids' => 'setAgentIds',
        'conjunction_contact_ids' => 'setConjunctionContactIds',
        'conjunction_agent_ids' => 'setConjunctionAgentIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertiser_type' => 'getAdvertiserType',
        'advertiser_id' => 'getAdvertiserId',
        'contact_ids' => 'getContactIds',
        'agent_ids' => 'getAgentIds',
        'conjunction_contact_ids' => 'getConjunctionContactIds',
        'conjunction_agent_ids' => 'getConjunctionAgentIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADVERTISER_TYPE_AGENCY = 'agency';
    const ADVERTISER_TYPE__PRIVATE = 'private';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdvertiserTypeAllowableValues()
    {
        return [
            self::ADVERTISER_TYPE_AGENCY,
            self::ADVERTISER_TYPE__PRIVATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertiser_type'] = isset($data['advertiser_type']) ? $data['advertiser_type'] : null;
        $this->container['advertiser_id'] = isset($data['advertiser_id']) ? $data['advertiser_id'] : null;
        $this->container['contact_ids'] = isset($data['contact_ids']) ? $data['contact_ids'] : null;
        $this->container['agent_ids'] = isset($data['agent_ids']) ? $data['agent_ids'] : null;
        $this->container['conjunction_contact_ids'] = isset($data['conjunction_contact_ids']) ? $data['conjunction_contact_ids'] : null;
        $this->container['conjunction_agent_ids'] = isset($data['conjunction_agent_ids']) ? $data['conjunction_agent_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdvertiserTypeAllowableValues();
        if (!is_null($this->container['advertiser_type']) && !in_array($this->container['advertiser_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'advertiser_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertiser_type
     *
     * @return string
     */
    public function getAdvertiserType()
    {
        return $this->container['advertiser_type'];
    }

    /**
     * Sets advertiser_type
     *
     * @param string $advertiser_type Gets or Sets AdvertiserType
     *
     * @return $this
     */
    public function setAdvertiserType($advertiser_type)
    {
        $allowedValues = $this->getAdvertiserTypeAllowableValues();
        if (!is_null($advertiser_type) && !in_array($advertiser_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'advertiser_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['advertiser_type'] = $advertiser_type;

        return $this;
    }

    /**
     * Gets advertiser_id
     *
     * @return int
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param int $advertiser_id Advertiser's identifier
     *
     * @return $this
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets contact_ids
     *
     * @return int[]
     */
    public function getContactIds()
    {
        return $this->container['contact_ids'];
    }

    /**
     * Sets contact_ids
     *
     * @param int[] $contact_ids Identifier of each contact the advertiser has associated with the listing
     *
     * @return $this
     */
    public function setContactIds($contact_ids)
    {
        $this->container['contact_ids'] = $contact_ids;

        return $this;
    }

    /**
     * Gets agent_ids
     *
     * @return string[]
     */
    public function getAgentIds()
    {
        return $this->container['agent_ids'];
    }

    /**
     * Sets agent_ids
     *
     * @param string[] $agent_ids Identifier of each agent the advertiser has associated with the listing
     *
     * @return $this
     */
    public function setAgentIds($agent_ids)
    {
        $this->container['agent_ids'] = $agent_ids;

        return $this;
    }

    /**
     * Gets conjunction_contact_ids
     *
     * @return int[]
     */
    public function getConjunctionContactIds()
    {
        return $this->container['conjunction_contact_ids'];
    }

    /**
     * Sets conjunction_contact_ids
     *
     * @param int[] $conjunction_contact_ids Identifier of each conjunctional contact associated with the listing
     *
     * @return $this
     */
    public function setConjunctionContactIds($conjunction_contact_ids)
    {
        $this->container['conjunction_contact_ids'] = $conjunction_contact_ids;

        return $this;
    }

    /**
     * Gets conjunction_agent_ids
     *
     * @return string[]
     */
    public function getConjunctionAgentIds()
    {
        return $this->container['conjunction_agent_ids'];
    }

    /**
     * Sets conjunction_agent_ids
     *
     * @param string[] $conjunction_agent_ids Identifier of each conjunctional agent associated with the listing
     *
     * @return $this
     */
    public function setConjunctionAgentIds($conjunction_agent_ids)
    {
        $this->container['conjunction_agent_ids'] = $conjunction_agent_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
