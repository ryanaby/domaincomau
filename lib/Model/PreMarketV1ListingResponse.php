<?php
/**
 * PreMarketV1ListingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PreMarketV1ListingResponse Class Doc Comment
 *
 * @category Class
 * @description Pre-portal listing response.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreMarketV1ListingResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreMarket.v1.ListingResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'listing_status' => '\Swagger\Client\Model\PreMarketV1PrePortalListingStatus',
        'related_ad_id' => 'int',
        'provider_details' => '\Swagger\Client\Model\PreMarketV1ProviderDetails',
        'address' => '\Swagger\Client\Model\PreMarketV1AddressResponse',
        'advertiser_identifiers' => '\Swagger\Client\Model\PreMarketV1AdvertiserIdentifiers',
        'bedrooms' => 'float',
        'bathrooms' => 'float',
        'carspaces' => 'float',
        'headline' => 'string',
        'description' => 'string',
        'authority_executed_date' => '\DateTime',
        'reserve_price' => 'double',
        'estimated_sale_price' => '\Swagger\Client\Model\PreMarketV1Price',
        'property_types' => '\Swagger\Client\Model\PreMarketV1PropertyType[]',
        'authority_type' => '\Swagger\Client\Model\PreMarketV1AuthorityType',
        'exclusive_period_days' => 'int',
        'exclusive_continuing_period_days' => 'int',
        'exclusive_period_start_date' => '\DateTime',
        'geo_location' => '\Swagger\Client\Model\PreMarketV1GeoLocation',
        'map_certainty' => 'int',
        'media' => '\Swagger\Client\Model\PreMarketV1PropertyMedia[]',
        'property_id' => 'string',
        'statement_of_information' => '\Swagger\Client\Model\PreMarketV1StatementOfInformation',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime',
        'date_pre_market' => '\DateTime',
        'date_listed' => '\DateTime',
        'date_sold' => '\DateTime',
        'date_withdrawn' => '\DateTime',
        'date_drafted' => '\DateTime',
        'metadata' => 'map[string,string]',
        'comment' => 'string',
        'sold_details' => '\Swagger\Client\Model\PreMarketV1SoldDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'listing_status' => null,
        'related_ad_id' => 'int32',
        'provider_details' => null,
        'address' => null,
        'advertiser_identifiers' => null,
        'bedrooms' => 'float',
        'bathrooms' => 'float',
        'carspaces' => 'float',
        'headline' => null,
        'description' => null,
        'authority_executed_date' => 'date-time',
        'reserve_price' => 'double',
        'estimated_sale_price' => null,
        'property_types' => null,
        'authority_type' => null,
        'exclusive_period_days' => 'int32',
        'exclusive_continuing_period_days' => 'int32',
        'exclusive_period_start_date' => 'date-time',
        'geo_location' => null,
        'map_certainty' => 'int32',
        'media' => null,
        'property_id' => null,
        'statement_of_information' => null,
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'date_pre_market' => 'date-time',
        'date_listed' => 'date-time',
        'date_sold' => 'date-time',
        'date_withdrawn' => 'date-time',
        'date_drafted' => 'date-time',
        'metadata' => null,
        'comment' => null,
        'sold_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'listing_status' => 'listingStatus',
        'related_ad_id' => 'relatedAdId',
        'provider_details' => 'providerDetails',
        'address' => 'address',
        'advertiser_identifiers' => 'advertiserIdentifiers',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'carspaces' => 'carspaces',
        'headline' => 'headline',
        'description' => 'description',
        'authority_executed_date' => 'authorityExecutedDate',
        'reserve_price' => 'reservePrice',
        'estimated_sale_price' => 'estimatedSalePrice',
        'property_types' => 'propertyTypes',
        'authority_type' => 'authorityType',
        'exclusive_period_days' => 'exclusivePeriodDays',
        'exclusive_continuing_period_days' => 'exclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'exclusivePeriodStartDate',
        'geo_location' => 'geoLocation',
        'map_certainty' => 'mapCertainty',
        'media' => 'media',
        'property_id' => 'propertyId',
        'statement_of_information' => 'statementOfInformation',
        'date_created' => 'dateCreated',
        'date_updated' => 'dateUpdated',
        'date_pre_market' => 'datePreMarket',
        'date_listed' => 'dateListed',
        'date_sold' => 'dateSold',
        'date_withdrawn' => 'dateWithdrawn',
        'date_drafted' => 'dateDrafted',
        'metadata' => 'metadata',
        'comment' => 'comment',
        'sold_details' => 'soldDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'listing_status' => 'setListingStatus',
        'related_ad_id' => 'setRelatedAdId',
        'provider_details' => 'setProviderDetails',
        'address' => 'setAddress',
        'advertiser_identifiers' => 'setAdvertiserIdentifiers',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'carspaces' => 'setCarspaces',
        'headline' => 'setHeadline',
        'description' => 'setDescription',
        'authority_executed_date' => 'setAuthorityExecutedDate',
        'reserve_price' => 'setReservePrice',
        'estimated_sale_price' => 'setEstimatedSalePrice',
        'property_types' => 'setPropertyTypes',
        'authority_type' => 'setAuthorityType',
        'exclusive_period_days' => 'setExclusivePeriodDays',
        'exclusive_continuing_period_days' => 'setExclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'setExclusivePeriodStartDate',
        'geo_location' => 'setGeoLocation',
        'map_certainty' => 'setMapCertainty',
        'media' => 'setMedia',
        'property_id' => 'setPropertyId',
        'statement_of_information' => 'setStatementOfInformation',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'date_pre_market' => 'setDatePreMarket',
        'date_listed' => 'setDateListed',
        'date_sold' => 'setDateSold',
        'date_withdrawn' => 'setDateWithdrawn',
        'date_drafted' => 'setDateDrafted',
        'metadata' => 'setMetadata',
        'comment' => 'setComment',
        'sold_details' => 'setSoldDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'listing_status' => 'getListingStatus',
        'related_ad_id' => 'getRelatedAdId',
        'provider_details' => 'getProviderDetails',
        'address' => 'getAddress',
        'advertiser_identifiers' => 'getAdvertiserIdentifiers',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'carspaces' => 'getCarspaces',
        'headline' => 'getHeadline',
        'description' => 'getDescription',
        'authority_executed_date' => 'getAuthorityExecutedDate',
        'reserve_price' => 'getReservePrice',
        'estimated_sale_price' => 'getEstimatedSalePrice',
        'property_types' => 'getPropertyTypes',
        'authority_type' => 'getAuthorityType',
        'exclusive_period_days' => 'getExclusivePeriodDays',
        'exclusive_continuing_period_days' => 'getExclusiveContinuingPeriodDays',
        'exclusive_period_start_date' => 'getExclusivePeriodStartDate',
        'geo_location' => 'getGeoLocation',
        'map_certainty' => 'getMapCertainty',
        'media' => 'getMedia',
        'property_id' => 'getPropertyId',
        'statement_of_information' => 'getStatementOfInformation',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'date_pre_market' => 'getDatePreMarket',
        'date_listed' => 'getDateListed',
        'date_sold' => 'getDateSold',
        'date_withdrawn' => 'getDateWithdrawn',
        'date_drafted' => 'getDateDrafted',
        'metadata' => 'getMetadata',
        'comment' => 'getComment',
        'sold_details' => 'getSoldDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['listing_status'] = isset($data['listing_status']) ? $data['listing_status'] : null;
        $this->container['related_ad_id'] = isset($data['related_ad_id']) ? $data['related_ad_id'] : null;
        $this->container['provider_details'] = isset($data['provider_details']) ? $data['provider_details'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['advertiser_identifiers'] = isset($data['advertiser_identifiers']) ? $data['advertiser_identifiers'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['carspaces'] = isset($data['carspaces']) ? $data['carspaces'] : null;
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['authority_executed_date'] = isset($data['authority_executed_date']) ? $data['authority_executed_date'] : null;
        $this->container['reserve_price'] = isset($data['reserve_price']) ? $data['reserve_price'] : null;
        $this->container['estimated_sale_price'] = isset($data['estimated_sale_price']) ? $data['estimated_sale_price'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['authority_type'] = isset($data['authority_type']) ? $data['authority_type'] : null;
        $this->container['exclusive_period_days'] = isset($data['exclusive_period_days']) ? $data['exclusive_period_days'] : null;
        $this->container['exclusive_continuing_period_days'] = isset($data['exclusive_continuing_period_days']) ? $data['exclusive_continuing_period_days'] : null;
        $this->container['exclusive_period_start_date'] = isset($data['exclusive_period_start_date']) ? $data['exclusive_period_start_date'] : null;
        $this->container['geo_location'] = isset($data['geo_location']) ? $data['geo_location'] : null;
        $this->container['map_certainty'] = isset($data['map_certainty']) ? $data['map_certainty'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['statement_of_information'] = isset($data['statement_of_information']) ? $data['statement_of_information'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['date_pre_market'] = isset($data['date_pre_market']) ? $data['date_pre_market'] : null;
        $this->container['date_listed'] = isset($data['date_listed']) ? $data['date_listed'] : null;
        $this->container['date_sold'] = isset($data['date_sold']) ? $data['date_sold'] : null;
        $this->container['date_withdrawn'] = isset($data['date_withdrawn']) ? $data['date_withdrawn'] : null;
        $this->container['date_drafted'] = isset($data['date_drafted']) ? $data['date_drafted'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['sold_details'] = isset($data['sold_details']) ? $data['sold_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['listing_status'] === null) {
            $invalidProperties[] = "'listing_status' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['bedrooms'] === null) {
            $invalidProperties[] = "'bedrooms' can't be null";
        }
        if ($this->container['bathrooms'] === null) {
            $invalidProperties[] = "'bathrooms' can't be null";
        }
        if ($this->container['carspaces'] === null) {
            $invalidProperties[] = "'carspaces' can't be null";
        }
        if ($this->container['estimated_sale_price'] === null) {
            $invalidProperties[] = "'estimated_sale_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Pre-portal listing ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets listing_status
     *
     * @return \Swagger\Client\Model\PreMarketV1PrePortalListingStatus
     */
    public function getListingStatus()
    {
        return $this->container['listing_status'];
    }

    /**
     * Sets listing_status
     *
     * @param \Swagger\Client\Model\PreMarketV1PrePortalListingStatus $listing_status listing_status
     *
     * @return $this
     */
    public function setListingStatus($listing_status)
    {
        $this->container['listing_status'] = $listing_status;

        return $this;
    }

    /**
     * Gets related_ad_id
     *
     * @return int
     */
    public function getRelatedAdId()
    {
        return $this->container['related_ad_id'];
    }

    /**
     * Sets related_ad_id
     *
     * @param int $related_ad_id The Domain Ad Id of the related listing.
     *
     * @return $this
     */
    public function setRelatedAdId($related_ad_id)
    {
        $this->container['related_ad_id'] = $related_ad_id;

        return $this;
    }

    /**
     * Gets provider_details
     *
     * @return \Swagger\Client\Model\PreMarketV1ProviderDetails
     */
    public function getProviderDetails()
    {
        return $this->container['provider_details'];
    }

    /**
     * Sets provider_details
     *
     * @param \Swagger\Client\Model\PreMarketV1ProviderDetails $provider_details provider_details
     *
     * @return $this
     */
    public function setProviderDetails($provider_details)
    {
        $this->container['provider_details'] = $provider_details;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\PreMarketV1AddressResponse
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\PreMarketV1AddressResponse $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets advertiser_identifiers
     *
     * @return \Swagger\Client\Model\PreMarketV1AdvertiserIdentifiers
     */
    public function getAdvertiserIdentifiers()
    {
        return $this->container['advertiser_identifiers'];
    }

    /**
     * Sets advertiser_identifiers
     *
     * @param \Swagger\Client\Model\PreMarketV1AdvertiserIdentifiers $advertiser_identifiers advertiser_identifiers
     *
     * @return $this
     */
    public function setAdvertiserIdentifiers($advertiser_identifiers)
    {
        $this->container['advertiser_identifiers'] = $advertiser_identifiers;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return float
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param float $bedrooms Total number of bedrooms in the property.
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float $bathrooms Total number of bathrooms in the property.
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets carspaces
     *
     * @return float
     */
    public function getCarspaces()
    {
        return $this->container['carspaces'];
    }

    /**
     * Sets carspaces
     *
     * @param float $carspaces Total number of car spaces in the property.
     *
     * @return $this
     */
    public function setCarspaces($carspaces)
    {
        $this->container['carspaces'] = $carspaces;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string $headline The short description of the property provided by the advertiser.
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The long description of the property provided by the advertiser.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets authority_executed_date
     *
     * @return \DateTime
     */
    public function getAuthorityExecutedDate()
    {
        return $this->container['authority_executed_date'];
    }

    /**
     * Sets authority_executed_date
     *
     * @param \DateTime $authority_executed_date The date on which the authority contract was executed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setAuthorityExecutedDate($authority_executed_date)
    {
        $this->container['authority_executed_date'] = $authority_executed_date;

        return $this;
    }

    /**
     * Gets reserve_price
     *
     * @return double
     */
    public function getReservePrice()
    {
        return $this->container['reserve_price'];
    }

    /**
     * Sets reserve_price
     *
     * @param double $reserve_price Vendor reserve price.
     *
     * @return $this
     */
    public function setReservePrice($reserve_price)
    {
        $this->container['reserve_price'] = $reserve_price;

        return $this;
    }

    /**
     * Gets estimated_sale_price
     *
     * @return \Swagger\Client\Model\PreMarketV1Price
     */
    public function getEstimatedSalePrice()
    {
        return $this->container['estimated_sale_price'];
    }

    /**
     * Sets estimated_sale_price
     *
     * @param \Swagger\Client\Model\PreMarketV1Price $estimated_sale_price estimated_sale_price
     *
     * @return $this
     */
    public function setEstimatedSalePrice($estimated_sale_price)
    {
        $this->container['estimated_sale_price'] = $estimated_sale_price;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return \Swagger\Client\Model\PreMarketV1PropertyType[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param \Swagger\Client\Model\PreMarketV1PropertyType[] $property_types The property types (e.g. house, apartment/unit/flat, etc.).
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets authority_type
     *
     * @return \Swagger\Client\Model\PreMarketV1AuthorityType
     */
    public function getAuthorityType()
    {
        return $this->container['authority_type'];
    }

    /**
     * Sets authority_type
     *
     * @param \Swagger\Client\Model\PreMarketV1AuthorityType $authority_type authority_type
     *
     * @return $this
     */
    public function setAuthorityType($authority_type)
    {
        $this->container['authority_type'] = $authority_type;

        return $this;
    }

    /**
     * Gets exclusive_period_days
     *
     * @return int
     */
    public function getExclusivePeriodDays()
    {
        return $this->container['exclusive_period_days'];
    }

    /**
     * Sets exclusive_period_days
     *
     * @param int $exclusive_period_days The time (in days) that the agent has exclusive authority to sell the property.
     *
     * @return $this
     */
    public function setExclusivePeriodDays($exclusive_period_days)
    {
        $this->container['exclusive_period_days'] = $exclusive_period_days;

        return $this;
    }

    /**
     * Gets exclusive_continuing_period_days
     *
     * @return int
     */
    public function getExclusiveContinuingPeriodDays()
    {
        return $this->container['exclusive_continuing_period_days'];
    }

    /**
     * Sets exclusive_continuing_period_days
     *
     * @param int $exclusive_continuing_period_days The time (in days) that exclusive authority has been extended.
     *
     * @return $this
     */
    public function setExclusiveContinuingPeriodDays($exclusive_continuing_period_days)
    {
        $this->container['exclusive_continuing_period_days'] = $exclusive_continuing_period_days;

        return $this;
    }

    /**
     * Gets exclusive_period_start_date
     *
     * @return \DateTime
     */
    public function getExclusivePeriodStartDate()
    {
        return $this->container['exclusive_period_start_date'];
    }

    /**
     * Sets exclusive_period_start_date
     *
     * @param \DateTime $exclusive_period_start_date Start date of the exclusivity period.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setExclusivePeriodStartDate($exclusive_period_start_date)
    {
        $this->container['exclusive_period_start_date'] = $exclusive_period_start_date;

        return $this;
    }

    /**
     * Gets geo_location
     *
     * @return \Swagger\Client\Model\PreMarketV1GeoLocation
     */
    public function getGeoLocation()
    {
        return $this->container['geo_location'];
    }

    /**
     * Sets geo_location
     *
     * @param \Swagger\Client\Model\PreMarketV1GeoLocation $geo_location geo_location
     *
     * @return $this
     */
    public function setGeoLocation($geo_location)
    {
        $this->container['geo_location'] = $geo_location;

        return $this;
    }

    /**
     * Gets map_certainty
     *
     * @return int
     */
    public function getMapCertainty()
    {
        return $this->container['map_certainty'];
    }

    /**
     * Sets map_certainty
     *
     * @param int $map_certainty Map certainty of the property location.
     *
     * @return $this
     */
    public function setMapCertainty($map_certainty)
    {
        $this->container['map_certainty'] = $map_certainty;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\PreMarketV1PropertyMedia[]
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\PreMarketV1PropertyMedia[] $media The media associated with the property provided by the advertiser.
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return string
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param string $property_id The identifier which uniquely identifies the property being advertised.  This may be empty if the Address of property is poorly described.
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets statement_of_information
     *
     * @return \Swagger\Client\Model\PreMarketV1StatementOfInformation
     */
    public function getStatementOfInformation()
    {
        return $this->container['statement_of_information'];
    }

    /**
     * Sets statement_of_information
     *
     * @param \Swagger\Client\Model\PreMarketV1StatementOfInformation $statement_of_information statement_of_information
     *
     * @return $this
     */
    public function setStatementOfInformation($statement_of_information)
    {
        $this->container['statement_of_information'] = $statement_of_information;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created The date/time the listing was created.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated The date/time the listing was last updated.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets date_pre_market
     *
     * @return \DateTime
     */
    public function getDatePreMarket()
    {
        return $this->container['date_pre_market'];
    }

    /**
     * Sets date_pre_market
     *
     * @param \DateTime $date_pre_market The date/time the listing went pre-market.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDatePreMarket($date_pre_market)
    {
        $this->container['date_pre_market'] = $date_pre_market;

        return $this;
    }

    /**
     * Gets date_listed
     *
     * @return \DateTime
     */
    public function getDateListed()
    {
        return $this->container['date_listed'];
    }

    /**
     * Sets date_listed
     *
     * @param \DateTime $date_listed The date/time the listing was listed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateListed($date_listed)
    {
        $this->container['date_listed'] = $date_listed;

        return $this;
    }

    /**
     * Gets date_sold
     *
     * @return \DateTime
     */
    public function getDateSold()
    {
        return $this->container['date_sold'];
    }

    /**
     * Sets date_sold
     *
     * @param \DateTime $date_sold The date/time when the listing status was changed to sold (it is NOT the date/time when the property was sold).  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateSold($date_sold)
    {
        $this->container['date_sold'] = $date_sold;

        return $this;
    }

    /**
     * Gets date_withdrawn
     *
     * @return \DateTime
     */
    public function getDateWithdrawn()
    {
        return $this->container['date_withdrawn'];
    }

    /**
     * Sets date_withdrawn
     *
     * @param \DateTime $date_withdrawn The date/time the listing was withdrawn.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateWithdrawn($date_withdrawn)
    {
        $this->container['date_withdrawn'] = $date_withdrawn;

        return $this;
    }

    /**
     * Gets date_drafted
     *
     * @return \DateTime
     */
    public function getDateDrafted()
    {
        return $this->container['date_drafted'];
    }

    /**
     * Sets date_drafted
     *
     * @param \DateTime $date_drafted The date/time the listing was drafted.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     *
     * @return $this
     */
    public function setDateDrafted($date_drafted)
    {
        $this->container['date_drafted'] = $date_drafted;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata Optional listing metadata.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Optional listing comment.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets sold_details
     *
     * @return \Swagger\Client\Model\PreMarketV1SoldDetails
     */
    public function getSoldDetails()
    {
        return $this->container['sold_details'];
    }

    /**
     * Sets sold_details
     *
     * @param \Swagger\Client\Model\PreMarketV1SoldDetails $sold_details sold_details
     *
     * @return $this
     */
    public function setSoldDetails($sold_details)
    {
        $this->container['sold_details'] = $sold_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
