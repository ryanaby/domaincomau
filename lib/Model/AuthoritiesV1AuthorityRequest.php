<?php
/**
 * AuthoritiesV1AuthorityRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuthoritiesV1AuthorityRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthoritiesV1AuthorityRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Authorities.v1.AuthorityRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'address' => '\Swagger\Client\Model\AuthoritiesV1Address',
        'marketing_campaigns' => '\Swagger\Client\Model\AuthoritiesV1MarketingCampaignRequest[]',
        'vendors' => '\Swagger\Client\Model\AuthoritiesV1VendorRequest[]',
        'agents' => '\Swagger\Client\Model\AuthoritiesV1AgentRequest[]',
        'bathrooms' => 'int',
        'bedrooms' => 'int',
        'parking' => 'int',
        'property_type' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'status' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'administration_fee' => 'string',
        'agent_details_date' => '\DateTime',
        'auction_date' => '\DateTime',
        'auction_type' => 'string',
        'chattels_excluded' => 'string',
        'chattels_included' => 'string[]',
        'continuing_period' => 'float',
        'esp_range_higher' => 'float',
        'esp_range_lower' => 'float',
        'exclusive_period' => 'float',
        'exclusive_period_start_date' => '\DateTime',
        'exclusive_sold_as' => 'string',
        'is_owners_corporation_managed' => 'bool',
        'is_property_tenanted' => 'bool',
        'occupation_state' => 'string',
        'opt_out_information' => 'bool',
        'payable_in' => 'string[]',
        'payment_method' => 'string',
        'payment_sum' => 'float',
        'reserve_price' => 'float',
        'sale_price_gst_type' => 'string',
        'sale_sign_permission' => 'bool',
        'search_criteria_amount' => 'float',
        'search_criteria_price_type' => 'string',
        'transaction_type' => 'string',
        'type' => 'string',
        'vendor_mkt_price_na' => 'bool',
        'waived_cooling_off' => 'bool',
        'lot' => 'string',
        'plan' => 'string',
        'title_reference' => 'string',
        'certificate_of_title_type' => 'string',
        'certificate_of_title_folio' => 'string',
        'certificate_of_title_volume' => 'string',
        'improved_land' => 'bool',
        'crm_details' => '\Swagger\Client\Model\AuthoritiesV1CrmDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'address' => null,
        'marketing_campaigns' => null,
        'vendors' => null,
        'agents' => null,
        'bathrooms' => null,
        'bedrooms' => null,
        'parking' => null,
        'property_type' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'status' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'administration_fee' => null,
        'agent_details_date' => 'date-time',
        'auction_date' => 'date-time',
        'auction_type' => null,
        'chattels_excluded' => null,
        'chattels_included' => null,
        'continuing_period' => null,
        'esp_range_higher' => null,
        'esp_range_lower' => null,
        'exclusive_period' => null,
        'exclusive_period_start_date' => 'date-time',
        'exclusive_sold_as' => null,
        'is_owners_corporation_managed' => null,
        'is_property_tenanted' => null,
        'occupation_state' => null,
        'opt_out_information' => null,
        'payable_in' => 'int',
        'payment_method' => null,
        'payment_sum' => null,
        'reserve_price' => null,
        'sale_price_gst_type' => null,
        'sale_sign_permission' => null,
        'search_criteria_amount' => null,
        'search_criteria_price_type' => null,
        'transaction_type' => null,
        'type' => null,
        'vendor_mkt_price_na' => null,
        'waived_cooling_off' => null,
        'lot' => null,
        'plan' => null,
        'title_reference' => null,
        'certificate_of_title_type' => null,
        'certificate_of_title_folio' => null,
        'certificate_of_title_volume' => null,
        'improved_land' => null,
        'crm_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address' => 'address',
        'marketing_campaigns' => 'marketingCampaigns',
        'vendors' => 'vendors',
        'agents' => 'agents',
        'bathrooms' => 'bathrooms',
        'bedrooms' => 'bedrooms',
        'parking' => 'parking',
        'property_type' => 'propertyType',
        'created' => 'created',
        'modified' => 'modified',
        'status' => 'status',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'administration_fee' => 'administrationFee',
        'agent_details_date' => 'agentDetailsDate',
        'auction_date' => 'auctionDate',
        'auction_type' => 'auctionType',
        'chattels_excluded' => 'chattelsExcluded',
        'chattels_included' => 'chattelsIncluded',
        'continuing_period' => 'continuingPeriod',
        'esp_range_higher' => 'espRangeHigher',
        'esp_range_lower' => 'espRangeLower',
        'exclusive_period' => 'exclusivePeriod',
        'exclusive_period_start_date' => 'exclusivePeriodStartDate',
        'exclusive_sold_as' => 'exclusiveSoldAs',
        'is_owners_corporation_managed' => 'isOwnersCorporationManaged',
        'is_property_tenanted' => 'isPropertyTenanted',
        'occupation_state' => 'occupationState',
        'opt_out_information' => 'optOutInformation',
        'payable_in' => 'payableIn',
        'payment_method' => 'paymentMethod',
        'payment_sum' => 'paymentSum',
        'reserve_price' => 'reservePrice',
        'sale_price_gst_type' => 'salePriceGstType',
        'sale_sign_permission' => 'saleSignPermission',
        'search_criteria_amount' => 'searchCriteriaAmount',
        'search_criteria_price_type' => 'searchCriteriaPriceType',
        'transaction_type' => 'transactionType',
        'type' => 'type',
        'vendor_mkt_price_na' => 'vendorMktPriceNa',
        'waived_cooling_off' => 'waivedCoolingOff',
        'lot' => 'lot',
        'plan' => 'plan',
        'title_reference' => 'titleReference',
        'certificate_of_title_type' => 'certificateOfTitleType',
        'certificate_of_title_folio' => 'certificateOfTitleFolio',
        'certificate_of_title_volume' => 'certificateOfTitleVolume',
        'improved_land' => 'improvedLand',
        'crm_details' => 'crmDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address' => 'setAddress',
        'marketing_campaigns' => 'setMarketingCampaigns',
        'vendors' => 'setVendors',
        'agents' => 'setAgents',
        'bathrooms' => 'setBathrooms',
        'bedrooms' => 'setBedrooms',
        'parking' => 'setParking',
        'property_type' => 'setPropertyType',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'administration_fee' => 'setAdministrationFee',
        'agent_details_date' => 'setAgentDetailsDate',
        'auction_date' => 'setAuctionDate',
        'auction_type' => 'setAuctionType',
        'chattels_excluded' => 'setChattelsExcluded',
        'chattels_included' => 'setChattelsIncluded',
        'continuing_period' => 'setContinuingPeriod',
        'esp_range_higher' => 'setEspRangeHigher',
        'esp_range_lower' => 'setEspRangeLower',
        'exclusive_period' => 'setExclusivePeriod',
        'exclusive_period_start_date' => 'setExclusivePeriodStartDate',
        'exclusive_sold_as' => 'setExclusiveSoldAs',
        'is_owners_corporation_managed' => 'setIsOwnersCorporationManaged',
        'is_property_tenanted' => 'setIsPropertyTenanted',
        'occupation_state' => 'setOccupationState',
        'opt_out_information' => 'setOptOutInformation',
        'payable_in' => 'setPayableIn',
        'payment_method' => 'setPaymentMethod',
        'payment_sum' => 'setPaymentSum',
        'reserve_price' => 'setReservePrice',
        'sale_price_gst_type' => 'setSalePriceGstType',
        'sale_sign_permission' => 'setSaleSignPermission',
        'search_criteria_amount' => 'setSearchCriteriaAmount',
        'search_criteria_price_type' => 'setSearchCriteriaPriceType',
        'transaction_type' => 'setTransactionType',
        'type' => 'setType',
        'vendor_mkt_price_na' => 'setVendorMktPriceNa',
        'waived_cooling_off' => 'setWaivedCoolingOff',
        'lot' => 'setLot',
        'plan' => 'setPlan',
        'title_reference' => 'setTitleReference',
        'certificate_of_title_type' => 'setCertificateOfTitleType',
        'certificate_of_title_folio' => 'setCertificateOfTitleFolio',
        'certificate_of_title_volume' => 'setCertificateOfTitleVolume',
        'improved_land' => 'setImprovedLand',
        'crm_details' => 'setCrmDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address' => 'getAddress',
        'marketing_campaigns' => 'getMarketingCampaigns',
        'vendors' => 'getVendors',
        'agents' => 'getAgents',
        'bathrooms' => 'getBathrooms',
        'bedrooms' => 'getBedrooms',
        'parking' => 'getParking',
        'property_type' => 'getPropertyType',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'administration_fee' => 'getAdministrationFee',
        'agent_details_date' => 'getAgentDetailsDate',
        'auction_date' => 'getAuctionDate',
        'auction_type' => 'getAuctionType',
        'chattels_excluded' => 'getChattelsExcluded',
        'chattels_included' => 'getChattelsIncluded',
        'continuing_period' => 'getContinuingPeriod',
        'esp_range_higher' => 'getEspRangeHigher',
        'esp_range_lower' => 'getEspRangeLower',
        'exclusive_period' => 'getExclusivePeriod',
        'exclusive_period_start_date' => 'getExclusivePeriodStartDate',
        'exclusive_sold_as' => 'getExclusiveSoldAs',
        'is_owners_corporation_managed' => 'getIsOwnersCorporationManaged',
        'is_property_tenanted' => 'getIsPropertyTenanted',
        'occupation_state' => 'getOccupationState',
        'opt_out_information' => 'getOptOutInformation',
        'payable_in' => 'getPayableIn',
        'payment_method' => 'getPaymentMethod',
        'payment_sum' => 'getPaymentSum',
        'reserve_price' => 'getReservePrice',
        'sale_price_gst_type' => 'getSalePriceGstType',
        'sale_sign_permission' => 'getSaleSignPermission',
        'search_criteria_amount' => 'getSearchCriteriaAmount',
        'search_criteria_price_type' => 'getSearchCriteriaPriceType',
        'transaction_type' => 'getTransactionType',
        'type' => 'getType',
        'vendor_mkt_price_na' => 'getVendorMktPriceNa',
        'waived_cooling_off' => 'getWaivedCoolingOff',
        'lot' => 'getLot',
        'plan' => 'getPlan',
        'title_reference' => 'getTitleReference',
        'certificate_of_title_type' => 'getCertificateOfTitleType',
        'certificate_of_title_folio' => 'getCertificateOfTitleFolio',
        'certificate_of_title_volume' => 'getCertificateOfTitleVolume',
        'improved_land' => 'getImprovedLand',
        'crm_details' => 'getCrmDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['marketing_campaigns'] = isset($data['marketing_campaigns']) ? $data['marketing_campaigns'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['administration_fee'] = isset($data['administration_fee']) ? $data['administration_fee'] : null;
        $this->container['agent_details_date'] = isset($data['agent_details_date']) ? $data['agent_details_date'] : null;
        $this->container['auction_date'] = isset($data['auction_date']) ? $data['auction_date'] : null;
        $this->container['auction_type'] = isset($data['auction_type']) ? $data['auction_type'] : null;
        $this->container['chattels_excluded'] = isset($data['chattels_excluded']) ? $data['chattels_excluded'] : null;
        $this->container['chattels_included'] = isset($data['chattels_included']) ? $data['chattels_included'] : null;
        $this->container['continuing_period'] = isset($data['continuing_period']) ? $data['continuing_period'] : null;
        $this->container['esp_range_higher'] = isset($data['esp_range_higher']) ? $data['esp_range_higher'] : null;
        $this->container['esp_range_lower'] = isset($data['esp_range_lower']) ? $data['esp_range_lower'] : null;
        $this->container['exclusive_period'] = isset($data['exclusive_period']) ? $data['exclusive_period'] : null;
        $this->container['exclusive_period_start_date'] = isset($data['exclusive_period_start_date']) ? $data['exclusive_period_start_date'] : null;
        $this->container['exclusive_sold_as'] = isset($data['exclusive_sold_as']) ? $data['exclusive_sold_as'] : null;
        $this->container['is_owners_corporation_managed'] = isset($data['is_owners_corporation_managed']) ? $data['is_owners_corporation_managed'] : null;
        $this->container['is_property_tenanted'] = isset($data['is_property_tenanted']) ? $data['is_property_tenanted'] : null;
        $this->container['occupation_state'] = isset($data['occupation_state']) ? $data['occupation_state'] : null;
        $this->container['opt_out_information'] = isset($data['opt_out_information']) ? $data['opt_out_information'] : null;
        $this->container['payable_in'] = isset($data['payable_in']) ? $data['payable_in'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_sum'] = isset($data['payment_sum']) ? $data['payment_sum'] : null;
        $this->container['reserve_price'] = isset($data['reserve_price']) ? $data['reserve_price'] : null;
        $this->container['sale_price_gst_type'] = isset($data['sale_price_gst_type']) ? $data['sale_price_gst_type'] : null;
        $this->container['sale_sign_permission'] = isset($data['sale_sign_permission']) ? $data['sale_sign_permission'] : null;
        $this->container['search_criteria_amount'] = isset($data['search_criteria_amount']) ? $data['search_criteria_amount'] : null;
        $this->container['search_criteria_price_type'] = isset($data['search_criteria_price_type']) ? $data['search_criteria_price_type'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vendor_mkt_price_na'] = isset($data['vendor_mkt_price_na']) ? $data['vendor_mkt_price_na'] : null;
        $this->container['waived_cooling_off'] = isset($data['waived_cooling_off']) ? $data['waived_cooling_off'] : null;
        $this->container['lot'] = isset($data['lot']) ? $data['lot'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['title_reference'] = isset($data['title_reference']) ? $data['title_reference'] : null;
        $this->container['certificate_of_title_type'] = isset($data['certificate_of_title_type']) ? $data['certificate_of_title_type'] : null;
        $this->container['certificate_of_title_folio'] = isset($data['certificate_of_title_folio']) ? $data['certificate_of_title_folio'] : null;
        $this->container['certificate_of_title_volume'] = isset($data['certificate_of_title_volume']) ? $data['certificate_of_title_volume'] : null;
        $this->container['improved_land'] = isset($data['improved_land']) ? $data['improved_land'] : false;
        $this->container['crm_details'] = isset($data['crm_details']) ? $data['crm_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['bathrooms'] === null) {
            $invalidProperties[] = "'bathrooms' can't be null";
        }
        if ($this->container['bedrooms'] === null) {
            $invalidProperties[] = "'bedrooms' can't be null";
        }
        if ($this->container['parking'] === null) {
            $invalidProperties[] = "'parking' can't be null";
        }
        if ($this->container['property_type'] === null) {
            $invalidProperties[] = "'property_type' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AuthoritiesV1Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AuthoritiesV1Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets marketing_campaigns
     *
     * @return \Swagger\Client\Model\AuthoritiesV1MarketingCampaignRequest[]
     */
    public function getMarketingCampaigns()
    {
        return $this->container['marketing_campaigns'];
    }

    /**
     * Sets marketing_campaigns
     *
     * @param \Swagger\Client\Model\AuthoritiesV1MarketingCampaignRequest[] $marketing_campaigns marketing_campaigns
     *
     * @return $this
     */
    public function setMarketingCampaigns($marketing_campaigns)
    {
        $this->container['marketing_campaigns'] = $marketing_campaigns;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return \Swagger\Client\Model\AuthoritiesV1VendorRequest[]
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param \Swagger\Client\Model\AuthoritiesV1VendorRequest[] $vendors vendors
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return \Swagger\Client\Model\AuthoritiesV1AgentRequest[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \Swagger\Client\Model\AuthoritiesV1AgentRequest[] $agents agents
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int $bathrooms bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return int
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param int $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Available options are: `ApartmentUnitFlat`, `House`, `Townhouse`, `VacantLand`
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Available options are: `draft`, `missing sign`, `executed`
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets administration_fee
     *
     * @return string
     */
    public function getAdministrationFee()
    {
        return $this->container['administration_fee'];
    }

    /**
     * Sets administration_fee
     *
     * @param string $administration_fee administration_fee
     *
     * @return $this
     */
    public function setAdministrationFee($administration_fee)
    {
        $this->container['administration_fee'] = $administration_fee;

        return $this;
    }

    /**
     * Gets agent_details_date
     *
     * @return \DateTime
     */
    public function getAgentDetailsDate()
    {
        return $this->container['agent_details_date'];
    }

    /**
     * Sets agent_details_date
     *
     * @param \DateTime $agent_details_date agent_details_date
     *
     * @return $this
     */
    public function setAgentDetailsDate($agent_details_date)
    {
        $this->container['agent_details_date'] = $agent_details_date;

        return $this;
    }

    /**
     * Gets auction_date
     *
     * @return \DateTime
     */
    public function getAuctionDate()
    {
        return $this->container['auction_date'];
    }

    /**
     * Sets auction_date
     *
     * @param \DateTime $auction_date auction_date
     *
     * @return $this
     */
    public function setAuctionDate($auction_date)
    {
        $this->container['auction_date'] = $auction_date;

        return $this;
    }

    /**
     * Gets auction_type
     *
     * @return string
     */
    public function getAuctionType()
    {
        return $this->container['auction_type'];
    }

    /**
     * Sets auction_type
     *
     * @param string $auction_type auction_type
     *
     * @return $this
     */
    public function setAuctionType($auction_type)
    {
        $this->container['auction_type'] = $auction_type;

        return $this;
    }

    /**
     * Gets chattels_excluded
     *
     * @return string
     */
    public function getChattelsExcluded()
    {
        return $this->container['chattels_excluded'];
    }

    /**
     * Sets chattels_excluded
     *
     * @param string $chattels_excluded chattels_excluded
     *
     * @return $this
     */
    public function setChattelsExcluded($chattels_excluded)
    {
        $this->container['chattels_excluded'] = $chattels_excluded;

        return $this;
    }

    /**
     * Gets chattels_included
     *
     * @return string[]
     */
    public function getChattelsIncluded()
    {
        return $this->container['chattels_included'];
    }

    /**
     * Sets chattels_included
     *
     * @param string[] $chattels_included chattels_included
     *
     * @return $this
     */
    public function setChattelsIncluded($chattels_included)
    {
        $this->container['chattels_included'] = $chattels_included;

        return $this;
    }

    /**
     * Gets continuing_period
     *
     * @return float
     */
    public function getContinuingPeriod()
    {
        return $this->container['continuing_period'];
    }

    /**
     * Sets continuing_period
     *
     * @param float $continuing_period continuing_period
     *
     * @return $this
     */
    public function setContinuingPeriod($continuing_period)
    {
        $this->container['continuing_period'] = $continuing_period;

        return $this;
    }

    /**
     * Gets esp_range_higher
     *
     * @return float
     */
    public function getEspRangeHigher()
    {
        return $this->container['esp_range_higher'];
    }

    /**
     * Sets esp_range_higher
     *
     * @param float $esp_range_higher esp_range_higher
     *
     * @return $this
     */
    public function setEspRangeHigher($esp_range_higher)
    {
        $this->container['esp_range_higher'] = $esp_range_higher;

        return $this;
    }

    /**
     * Gets esp_range_lower
     *
     * @return float
     */
    public function getEspRangeLower()
    {
        return $this->container['esp_range_lower'];
    }

    /**
     * Sets esp_range_lower
     *
     * @param float $esp_range_lower esp_range_lower
     *
     * @return $this
     */
    public function setEspRangeLower($esp_range_lower)
    {
        $this->container['esp_range_lower'] = $esp_range_lower;

        return $this;
    }

    /**
     * Gets exclusive_period
     *
     * @return float
     */
    public function getExclusivePeriod()
    {
        return $this->container['exclusive_period'];
    }

    /**
     * Sets exclusive_period
     *
     * @param float $exclusive_period exclusive_period
     *
     * @return $this
     */
    public function setExclusivePeriod($exclusive_period)
    {
        $this->container['exclusive_period'] = $exclusive_period;

        return $this;
    }

    /**
     * Gets exclusive_period_start_date
     *
     * @return \DateTime
     */
    public function getExclusivePeriodStartDate()
    {
        return $this->container['exclusive_period_start_date'];
    }

    /**
     * Sets exclusive_period_start_date
     *
     * @param \DateTime $exclusive_period_start_date exclusive_period_start_date
     *
     * @return $this
     */
    public function setExclusivePeriodStartDate($exclusive_period_start_date)
    {
        $this->container['exclusive_period_start_date'] = $exclusive_period_start_date;

        return $this;
    }

    /**
     * Gets exclusive_sold_as
     *
     * @return string
     */
    public function getExclusiveSoldAs()
    {
        return $this->container['exclusive_sold_as'];
    }

    /**
     * Sets exclusive_sold_as
     *
     * @param string $exclusive_sold_as Available options are: `Private Sale`, `Expression of Interest with the reserve to be advised prior to closing date`
     *
     * @return $this
     */
    public function setExclusiveSoldAs($exclusive_sold_as)
    {
        $this->container['exclusive_sold_as'] = $exclusive_sold_as;

        return $this;
    }

    /**
     * Gets is_owners_corporation_managed
     *
     * @return bool
     */
    public function getIsOwnersCorporationManaged()
    {
        return $this->container['is_owners_corporation_managed'];
    }

    /**
     * Sets is_owners_corporation_managed
     *
     * @param bool $is_owners_corporation_managed is_owners_corporation_managed
     *
     * @return $this
     */
    public function setIsOwnersCorporationManaged($is_owners_corporation_managed)
    {
        $this->container['is_owners_corporation_managed'] = $is_owners_corporation_managed;

        return $this;
    }

    /**
     * Gets is_property_tenanted
     *
     * @return bool
     */
    public function getIsPropertyTenanted()
    {
        return $this->container['is_property_tenanted'];
    }

    /**
     * Sets is_property_tenanted
     *
     * @param bool $is_property_tenanted is_property_tenanted
     *
     * @return $this
     */
    public function setIsPropertyTenanted($is_property_tenanted)
    {
        $this->container['is_property_tenanted'] = $is_property_tenanted;

        return $this;
    }

    /**
     * Gets occupation_state
     *
     * @return string
     */
    public function getOccupationState()
    {
        return $this->container['occupation_state'];
    }

    /**
     * Sets occupation_state
     *
     * @param string $occupation_state Available options are: `With vacant possession`, `Subject to any tenancy`, `Both`
     *
     * @return $this
     */
    public function setOccupationState($occupation_state)
    {
        $this->container['occupation_state'] = $occupation_state;

        return $this;
    }

    /**
     * Gets opt_out_information
     *
     * @return bool
     */
    public function getOptOutInformation()
    {
        return $this->container['opt_out_information'];
    }

    /**
     * Sets opt_out_information
     *
     * @param bool $opt_out_information opt_out_information
     *
     * @return $this
     */
    public function setOptOutInformation($opt_out_information)
    {
        $this->container['opt_out_information'] = $opt_out_information;

        return $this;
    }

    /**
     * Gets payable_in
     *
     * @return string[]
     */
    public function getPayableIn()
    {
        return $this->container['payable_in'];
    }

    /**
     * Sets payable_in
     *
     * @param string[] $payable_in payable_in
     *
     * @return $this
     */
    public function setPayableIn($payable_in)
    {
        $this->container['payable_in'] = $payable_in;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Available options are: `Full purchase price`, `Payment of full deposit`
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_sum
     *
     * @return float
     */
    public function getPaymentSum()
    {
        return $this->container['payment_sum'];
    }

    /**
     * Sets payment_sum
     *
     * @param float $payment_sum payment_sum
     *
     * @return $this
     */
    public function setPaymentSum($payment_sum)
    {
        $this->container['payment_sum'] = $payment_sum;

        return $this;
    }

    /**
     * Gets reserve_price
     *
     * @return float
     */
    public function getReservePrice()
    {
        return $this->container['reserve_price'];
    }

    /**
     * Sets reserve_price
     *
     * @param float $reserve_price reserve_price
     *
     * @return $this
     */
    public function setReservePrice($reserve_price)
    {
        $this->container['reserve_price'] = $reserve_price;

        return $this;
    }

    /**
     * Gets sale_price_gst_type
     *
     * @return string
     */
    public function getSalePriceGstType()
    {
        return $this->container['sale_price_gst_type'];
    }

    /**
     * Sets sale_price_gst_type
     *
     * @param string $sale_price_gst_type sale_price_gst_type
     *
     * @return $this
     */
    public function setSalePriceGstType($sale_price_gst_type)
    {
        $this->container['sale_price_gst_type'] = $sale_price_gst_type;

        return $this;
    }

    /**
     * Gets sale_sign_permission
     *
     * @return bool
     */
    public function getSaleSignPermission()
    {
        return $this->container['sale_sign_permission'];
    }

    /**
     * Sets sale_sign_permission
     *
     * @param bool $sale_sign_permission sale_sign_permission
     *
     * @return $this
     */
    public function setSaleSignPermission($sale_sign_permission)
    {
        $this->container['sale_sign_permission'] = $sale_sign_permission;

        return $this;
    }

    /**
     * Gets search_criteria_amount
     *
     * @return float
     */
    public function getSearchCriteriaAmount()
    {
        return $this->container['search_criteria_amount'];
    }

    /**
     * Sets search_criteria_amount
     *
     * @param float $search_criteria_amount search_criteria_amount
     *
     * @return $this
     */
    public function setSearchCriteriaAmount($search_criteria_amount)
    {
        $this->container['search_criteria_amount'] = $search_criteria_amount;

        return $this;
    }

    /**
     * Gets search_criteria_price_type
     *
     * @return string
     */
    public function getSearchCriteriaPriceType()
    {
        return $this->container['search_criteria_price_type'];
    }

    /**
     * Sets search_criteria_price_type
     *
     * @param string $search_criteria_price_type Available options are: `amount`, `range`, `other`
     *
     * @return $this
     */
    public function setSearchCriteriaPriceType($search_criteria_price_type)
    {
        $this->container['search_criteria_price_type'] = $search_criteria_price_type;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Available options are: `Exclusive Auction`, `Exclusive Sale`, `General Sale`, `Appraisal`
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vendor_mkt_price_na
     *
     * @return bool
     */
    public function getVendorMktPriceNa()
    {
        return $this->container['vendor_mkt_price_na'];
    }

    /**
     * Sets vendor_mkt_price_na
     *
     * @param bool $vendor_mkt_price_na vendor_mkt_price_na
     *
     * @return $this
     */
    public function setVendorMktPriceNa($vendor_mkt_price_na)
    {
        $this->container['vendor_mkt_price_na'] = $vendor_mkt_price_na;

        return $this;
    }

    /**
     * Gets waived_cooling_off
     *
     * @return bool
     */
    public function getWaivedCoolingOff()
    {
        return $this->container['waived_cooling_off'];
    }

    /**
     * Sets waived_cooling_off
     *
     * @param bool $waived_cooling_off waived_cooling_off
     *
     * @return $this
     */
    public function setWaivedCoolingOff($waived_cooling_off)
    {
        $this->container['waived_cooling_off'] = $waived_cooling_off;

        return $this;
    }

    /**
     * Gets lot
     *
     * @return string
     */
    public function getLot()
    {
        return $this->container['lot'];
    }

    /**
     * Sets lot
     *
     * @param string $lot lot
     *
     * @return $this
     */
    public function setLot($lot)
    {
        $this->container['lot'] = $lot;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets title_reference
     *
     * @return string
     */
    public function getTitleReference()
    {
        return $this->container['title_reference'];
    }

    /**
     * Sets title_reference
     *
     * @param string $title_reference title_reference
     *
     * @return $this
     */
    public function setTitleReference($title_reference)
    {
        $this->container['title_reference'] = $title_reference;

        return $this;
    }

    /**
     * Gets certificate_of_title_type
     *
     * @return string
     */
    public function getCertificateOfTitleType()
    {
        return $this->container['certificate_of_title_type'];
    }

    /**
     * Sets certificate_of_title_type
     *
     * @param string $certificate_of_title_type This field is unique to SA
     *
     * @return $this
     */
    public function setCertificateOfTitleType($certificate_of_title_type)
    {
        $this->container['certificate_of_title_type'] = $certificate_of_title_type;

        return $this;
    }

    /**
     * Gets certificate_of_title_folio
     *
     * @return string
     */
    public function getCertificateOfTitleFolio()
    {
        return $this->container['certificate_of_title_folio'];
    }

    /**
     * Sets certificate_of_title_folio
     *
     * @param string $certificate_of_title_folio This field is unique to SA
     *
     * @return $this
     */
    public function setCertificateOfTitleFolio($certificate_of_title_folio)
    {
        $this->container['certificate_of_title_folio'] = $certificate_of_title_folio;

        return $this;
    }

    /**
     * Gets certificate_of_title_volume
     *
     * @return string
     */
    public function getCertificateOfTitleVolume()
    {
        return $this->container['certificate_of_title_volume'];
    }

    /**
     * Sets certificate_of_title_volume
     *
     * @param string $certificate_of_title_volume This field is unique to SA
     *
     * @return $this
     */
    public function setCertificateOfTitleVolume($certificate_of_title_volume)
    {
        $this->container['certificate_of_title_volume'] = $certificate_of_title_volume;

        return $this;
    }

    /**
     * Gets improved_land
     *
     * @return bool
     */
    public function getImprovedLand()
    {
        return $this->container['improved_land'];
    }

    /**
     * Sets improved_land
     *
     * @param bool $improved_land This field is unique to SA
     *
     * @return $this
     */
    public function setImprovedLand($improved_land)
    {
        $this->container['improved_land'] = $improved_land;

        return $this;
    }

    /**
     * Gets crm_details
     *
     * @return \Swagger\Client\Model\AuthoritiesV1CrmDetails
     */
    public function getCrmDetails()
    {
        return $this->container['crm_details'];
    }

    /**
     * Sets crm_details
     *
     * @param \Swagger\Client\Model\AuthoritiesV1CrmDetails $crm_details crm_details
     *
     * @return $this
     */
    public function setCrmDetails($crm_details)
    {
        $this->container['crm_details'] = $crm_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
