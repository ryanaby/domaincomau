<?php
/**
 * ListingsV2Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingsV2Project Class Doc Comment
 *
 * @category Class
 * @description A structured representation of a Project
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsV2Project implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Listings.V2.Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project_profile_type' => 'string',
        'estimated_completion_tertile' => 'string',
        'category' => 'string',
        'id' => 'int',
        'name' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'address' => '\Swagger\Client\Model\ListingsV2ProjectAddressParts',
        'viewing_address' => '\Swagger\Client\Model\ListingsV2ProjectAddressParts',
        'property_types' => 'string[]',
        'displayable_address' => '\Swagger\Client\Model\ListingsV2ProjectAddressParts',
        'enquiry_email_address' => 'string',
        'advertiser_identifiers' => '\Swagger\Client\Model\ListingsV2AdvertiserIdentifiers',
        'provider_details' => '\Swagger\Client\Model\ListingsV2ProviderDetails',
        'media' => '\Swagger\Client\Model\ListingsV2ProjectMedia[]',
        'project_url' => 'string',
        'headline' => 'string',
        'tagline' => 'string',
        'display_as_last_updated' => '\DateTime',
        'modified_by' => 'string',
        'modified_date' => '\DateTime',
        'created_by' => 'string',
        'created_date' => '\DateTime',
        'background_colour' => 'string',
        'description' => 'string',
        'appointment_required' => 'bool',
        'features' => 'string[]',
        'price_from' => 'double',
        'price_to' => 'double',
        'banner_url' => 'string',
        'big_banner_url' => 'string',
        'small_banner_url' => 'string',
        'logo_url' => 'string',
        'pdfs' => '\Swagger\Client\Model\ListingsV2PdfUpload[]',
        'inspection_details' => '\Swagger\Client\Model\ListingsV2PropertyInspections',
        'number_of_floors' => 'int',
        'min_number_of_floors' => 'int',
        'min_building_height' => 'int',
        'max_building_height' => 'int',
        'number_of_buildings' => 'int',
        'number_of_apartments' => 'int',
        'estimated_completion_date' => '\DateTime',
        'starting_price' => 'double',
        'child_listing_ids' => 'int[]',
        'linked_project_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project_profile_type' => null,
        'estimated_completion_tertile' => null,
        'category' => null,
        'id' => 'int32',
        'name' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'address' => null,
        'viewing_address' => null,
        'property_types' => null,
        'displayable_address' => null,
        'enquiry_email_address' => null,
        'advertiser_identifiers' => null,
        'provider_details' => null,
        'media' => null,
        'project_url' => null,
        'headline' => null,
        'tagline' => null,
        'display_as_last_updated' => 'date-time',
        'modified_by' => null,
        'modified_date' => 'date-time',
        'created_by' => null,
        'created_date' => 'date-time',
        'background_colour' => null,
        'description' => null,
        'appointment_required' => null,
        'features' => null,
        'price_from' => 'double',
        'price_to' => 'double',
        'banner_url' => null,
        'big_banner_url' => null,
        'small_banner_url' => null,
        'logo_url' => null,
        'pdfs' => null,
        'inspection_details' => null,
        'number_of_floors' => 'int32',
        'min_number_of_floors' => 'int32',
        'min_building_height' => 'int32',
        'max_building_height' => 'int32',
        'number_of_buildings' => 'int32',
        'number_of_apartments' => 'int32',
        'estimated_completion_date' => 'date-time',
        'starting_price' => 'double',
        'child_listing_ids' => 'int32',
        'linked_project_ids' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_profile_type' => 'projectProfileType',
        'estimated_completion_tertile' => 'estimatedCompletionTertile',
        'category' => 'category',
        'id' => 'id',
        'name' => 'name',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'address' => 'address',
        'viewing_address' => 'viewingAddress',
        'property_types' => 'propertyTypes',
        'displayable_address' => 'displayableAddress',
        'enquiry_email_address' => 'enquiryEmailAddress',
        'advertiser_identifiers' => 'advertiserIdentifiers',
        'provider_details' => 'providerDetails',
        'media' => 'media',
        'project_url' => 'projectUrl',
        'headline' => 'headline',
        'tagline' => 'tagline',
        'display_as_last_updated' => 'displayAsLastUpdated',
        'modified_by' => 'modifiedBy',
        'modified_date' => 'modifiedDate',
        'created_by' => 'createdBy',
        'created_date' => 'createdDate',
        'background_colour' => 'backgroundColour',
        'description' => 'description',
        'appointment_required' => 'appointmentRequired',
        'features' => 'features',
        'price_from' => 'priceFrom',
        'price_to' => 'priceTo',
        'banner_url' => 'bannerUrl',
        'big_banner_url' => 'bigBannerUrl',
        'small_banner_url' => 'smallBannerUrl',
        'logo_url' => 'logoUrl',
        'pdfs' => 'pdfs',
        'inspection_details' => 'inspectionDetails',
        'number_of_floors' => 'numberOfFloors',
        'min_number_of_floors' => 'minNumberOfFloors',
        'min_building_height' => 'minBuildingHeight',
        'max_building_height' => 'maxBuildingHeight',
        'number_of_buildings' => 'numberOfBuildings',
        'number_of_apartments' => 'numberOfApartments',
        'estimated_completion_date' => 'estimatedCompletionDate',
        'starting_price' => 'startingPrice',
        'child_listing_ids' => 'childListingIds',
        'linked_project_ids' => 'linkedProjectIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_profile_type' => 'setProjectProfileType',
        'estimated_completion_tertile' => 'setEstimatedCompletionTertile',
        'category' => 'setCategory',
        'id' => 'setId',
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'address' => 'setAddress',
        'viewing_address' => 'setViewingAddress',
        'property_types' => 'setPropertyTypes',
        'displayable_address' => 'setDisplayableAddress',
        'enquiry_email_address' => 'setEnquiryEmailAddress',
        'advertiser_identifiers' => 'setAdvertiserIdentifiers',
        'provider_details' => 'setProviderDetails',
        'media' => 'setMedia',
        'project_url' => 'setProjectUrl',
        'headline' => 'setHeadline',
        'tagline' => 'setTagline',
        'display_as_last_updated' => 'setDisplayAsLastUpdated',
        'modified_by' => 'setModifiedBy',
        'modified_date' => 'setModifiedDate',
        'created_by' => 'setCreatedBy',
        'created_date' => 'setCreatedDate',
        'background_colour' => 'setBackgroundColour',
        'description' => 'setDescription',
        'appointment_required' => 'setAppointmentRequired',
        'features' => 'setFeatures',
        'price_from' => 'setPriceFrom',
        'price_to' => 'setPriceTo',
        'banner_url' => 'setBannerUrl',
        'big_banner_url' => 'setBigBannerUrl',
        'small_banner_url' => 'setSmallBannerUrl',
        'logo_url' => 'setLogoUrl',
        'pdfs' => 'setPdfs',
        'inspection_details' => 'setInspectionDetails',
        'number_of_floors' => 'setNumberOfFloors',
        'min_number_of_floors' => 'setMinNumberOfFloors',
        'min_building_height' => 'setMinBuildingHeight',
        'max_building_height' => 'setMaxBuildingHeight',
        'number_of_buildings' => 'setNumberOfBuildings',
        'number_of_apartments' => 'setNumberOfApartments',
        'estimated_completion_date' => 'setEstimatedCompletionDate',
        'starting_price' => 'setStartingPrice',
        'child_listing_ids' => 'setChildListingIds',
        'linked_project_ids' => 'setLinkedProjectIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_profile_type' => 'getProjectProfileType',
        'estimated_completion_tertile' => 'getEstimatedCompletionTertile',
        'category' => 'getCategory',
        'id' => 'getId',
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'address' => 'getAddress',
        'viewing_address' => 'getViewingAddress',
        'property_types' => 'getPropertyTypes',
        'displayable_address' => 'getDisplayableAddress',
        'enquiry_email_address' => 'getEnquiryEmailAddress',
        'advertiser_identifiers' => 'getAdvertiserIdentifiers',
        'provider_details' => 'getProviderDetails',
        'media' => 'getMedia',
        'project_url' => 'getProjectUrl',
        'headline' => 'getHeadline',
        'tagline' => 'getTagline',
        'display_as_last_updated' => 'getDisplayAsLastUpdated',
        'modified_by' => 'getModifiedBy',
        'modified_date' => 'getModifiedDate',
        'created_by' => 'getCreatedBy',
        'created_date' => 'getCreatedDate',
        'background_colour' => 'getBackgroundColour',
        'description' => 'getDescription',
        'appointment_required' => 'getAppointmentRequired',
        'features' => 'getFeatures',
        'price_from' => 'getPriceFrom',
        'price_to' => 'getPriceTo',
        'banner_url' => 'getBannerUrl',
        'big_banner_url' => 'getBigBannerUrl',
        'small_banner_url' => 'getSmallBannerUrl',
        'logo_url' => 'getLogoUrl',
        'pdfs' => 'getPdfs',
        'inspection_details' => 'getInspectionDetails',
        'number_of_floors' => 'getNumberOfFloors',
        'min_number_of_floors' => 'getMinNumberOfFloors',
        'min_building_height' => 'getMinBuildingHeight',
        'max_building_height' => 'getMaxBuildingHeight',
        'number_of_buildings' => 'getNumberOfBuildings',
        'number_of_apartments' => 'getNumberOfApartments',
        'estimated_completion_date' => 'getEstimatedCompletionDate',
        'starting_price' => 'getStartingPrice',
        'child_listing_ids' => 'getChildListingIds',
        'linked_project_ids' => 'getLinkedProjectIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROJECT_PROFILE_TYPE_NO_PROFILE = 'noProfile';
    const PROJECT_PROFILE_TYPE_PROJECT_PROFILE_STANDARD = 'projectProfileStandard';
    const PROJECT_PROFILE_TYPE_PROJECT_PROFILE_PREMIUM = 'projectProfilePremium';
    const ESTIMATED_COMPLETION_TERTILE_EARLY = 'early';
    const ESTIMATED_COMPLETION_TERTILE_MID = 'mid';
    const ESTIMATED_COMPLETION_TERTILE_LATE = 'late';
    const CATEGORY_HOUSE_AND_LAND = 'houseAndLand';
    const CATEGORY_APARTMENT = 'apartment';
    const CATEGORY_RETIREMENT = 'retirement';
    const PROPERTY_TYPES_UNKNOWN = 'unknown';
    const PROPERTY_TYPES_ACREAGE_SEMI_RURAL = 'acreageSemiRural';
    const PROPERTY_TYPES_APARTMENT_UNIT_FLAT = 'apartmentUnitFlat';
    const PROPERTY_TYPES_AQUACULTURE = 'aquaculture';
    const PROPERTY_TYPES_BLOCK_OF_UNITS = 'blockOfUnits';
    const PROPERTY_TYPES_CARSPACE = 'carspace';
    const PROPERTY_TYPES_DAIRY_FARMING = 'dairyFarming';
    const PROPERTY_TYPES_DEVELOPMENT_LAND = 'developmentLand';
    const PROPERTY_TYPES_DEVELOPMENT_SITE = 'developmentSite';
    const PROPERTY_TYPES_DUPLEX = 'duplex';
    const PROPERTY_TYPES_FARM = 'farm';
    const PROPERTY_TYPES_FISHING_FORESTRY = 'fishingForestry';
    const PROPERTY_TYPES_HOME_BASED = 'homeBased';
    const PROPERTY_TYPES_NEW_HOME_DESIGNS = 'newHomeDesigns';
    const PROPERTY_TYPES_HOTEL_LEISURE = 'hotelLeisure';
    const PROPERTY_TYPES_HOUSE = 'house';
    const PROPERTY_TYPES_NEW_HOUSE_LAND = 'newHouseLand';
    const PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE = 'industrialWarehouse';
    const PROPERTY_TYPES_IRRIGATION_SERVICES = 'irrigationServices';
    const PROPERTY_TYPES_NEW_LAND = 'newLand';
    const PROPERTY_TYPES_LIVESTOCK = 'livestock';
    const PROPERTY_TYPES_INTERNATIONAL = 'international';
    const PROPERTY_TYPES_MEDICAL_CONSULTING = 'medicalConsulting';
    const PROPERTY_TYPES_NEW_APARTMENTS = 'newApartments';
    const PROPERTY_TYPES_OFFICES = 'offices';
    const PROPERTY_TYPES_PARKING_CAR_SPACE = 'parkingCarSpace';
    const PROPERTY_TYPES_PENTHOUSE = 'penthouse';
    const PROPERTY_TYPES_RETAIL = 'retail';
    const PROPERTY_TYPES_RETIREMENT = 'retirement';
    const PROPERTY_TYPES_RURAL = 'rural';
    const PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING = 'ruralCommercialFarming';
    const PROPERTY_TYPES_SEMI_DETACHED = 'semiDetached';
    const PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS = 'showroomsBulkyGoods';
    const PROPERTY_TYPES_SPECIALIST_FARM = 'specialistFarm';
    const PROPERTY_TYPES_STUDIO = 'studio';
    const PROPERTY_TYPES_TERRACE = 'terrace';
    const PROPERTY_TYPES_TOWNHOUSE = 'townhouse';
    const PROPERTY_TYPES_VACANT_LAND = 'vacantLand';
    const PROPERTY_TYPES_VILLA = 'villa';
    const PROPERTY_TYPES_SERVICED_OFFICES = 'servicedOffices';
    const PROPERTY_TYPES_OTHER = 'other';
    const PROPERTY_TYPES_CHICKEN_SHOP = 'chickenShop';
    const PROPERTY_TYPES_SEAFOOD_SHOP = 'seafoodShop';
    const PROPERTY_TYPES_DELI_CAFE = 'deliCafe';
    const PROPERTY_TYPES_CROPPING = 'cropping';
    const PROPERTY_TYPES_VITICULTURE = 'viticulture';
    const PROPERTY_TYPES_MIXED_FARMING = 'mixedFarming';
    const PROPERTY_TYPES_GRAZING = 'grazing';
    const PROPERTY_TYPES_HORTICULTURE = 'horticulture';
    const PROPERTY_TYPES_EQUINE = 'equine';
    const PROPERTY_TYPES_FARMLET = 'farmlet';
    const PROPERTY_TYPES_ORCHARD = 'orchard';
    const PROPERTY_TYPES_RURAL_LIFESTYLE = 'ruralLifestyle';
    const PROPERTY_TYPES_ONLINE_BUSINESS = 'onlineBusiness';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectProfileTypeAllowableValues()
    {
        return [
            self::PROJECT_PROFILE_TYPE_NO_PROFILE,
            self::PROJECT_PROFILE_TYPE_PROJECT_PROFILE_STANDARD,
            self::PROJECT_PROFILE_TYPE_PROJECT_PROFILE_PREMIUM,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEstimatedCompletionTertileAllowableValues()
    {
        return [
            self::ESTIMATED_COMPLETION_TERTILE_EARLY,
            self::ESTIMATED_COMPLETION_TERTILE_MID,
            self::ESTIMATED_COMPLETION_TERTILE_LATE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_HOUSE_AND_LAND,
            self::CATEGORY_APARTMENT,
            self::CATEGORY_RETIREMENT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypesAllowableValues()
    {
        return [
            self::PROPERTY_TYPES_UNKNOWN,
            self::PROPERTY_TYPES_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPES_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPES_AQUACULTURE,
            self::PROPERTY_TYPES_BLOCK_OF_UNITS,
            self::PROPERTY_TYPES_CARSPACE,
            self::PROPERTY_TYPES_DAIRY_FARMING,
            self::PROPERTY_TYPES_DEVELOPMENT_LAND,
            self::PROPERTY_TYPES_DEVELOPMENT_SITE,
            self::PROPERTY_TYPES_DUPLEX,
            self::PROPERTY_TYPES_FARM,
            self::PROPERTY_TYPES_FISHING_FORESTRY,
            self::PROPERTY_TYPES_HOME_BASED,
            self::PROPERTY_TYPES_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPES_HOTEL_LEISURE,
            self::PROPERTY_TYPES_HOUSE,
            self::PROPERTY_TYPES_NEW_HOUSE_LAND,
            self::PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE,
            self::PROPERTY_TYPES_IRRIGATION_SERVICES,
            self::PROPERTY_TYPES_NEW_LAND,
            self::PROPERTY_TYPES_LIVESTOCK,
            self::PROPERTY_TYPES_INTERNATIONAL,
            self::PROPERTY_TYPES_MEDICAL_CONSULTING,
            self::PROPERTY_TYPES_NEW_APARTMENTS,
            self::PROPERTY_TYPES_OFFICES,
            self::PROPERTY_TYPES_PARKING_CAR_SPACE,
            self::PROPERTY_TYPES_PENTHOUSE,
            self::PROPERTY_TYPES_RETAIL,
            self::PROPERTY_TYPES_RETIREMENT,
            self::PROPERTY_TYPES_RURAL,
            self::PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING,
            self::PROPERTY_TYPES_SEMI_DETACHED,
            self::PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS,
            self::PROPERTY_TYPES_SPECIALIST_FARM,
            self::PROPERTY_TYPES_STUDIO,
            self::PROPERTY_TYPES_TERRACE,
            self::PROPERTY_TYPES_TOWNHOUSE,
            self::PROPERTY_TYPES_VACANT_LAND,
            self::PROPERTY_TYPES_VILLA,
            self::PROPERTY_TYPES_SERVICED_OFFICES,
            self::PROPERTY_TYPES_OTHER,
            self::PROPERTY_TYPES_CHICKEN_SHOP,
            self::PROPERTY_TYPES_SEAFOOD_SHOP,
            self::PROPERTY_TYPES_DELI_CAFE,
            self::PROPERTY_TYPES_CROPPING,
            self::PROPERTY_TYPES_VITICULTURE,
            self::PROPERTY_TYPES_MIXED_FARMING,
            self::PROPERTY_TYPES_GRAZING,
            self::PROPERTY_TYPES_HORTICULTURE,
            self::PROPERTY_TYPES_EQUINE,
            self::PROPERTY_TYPES_FARMLET,
            self::PROPERTY_TYPES_ORCHARD,
            self::PROPERTY_TYPES_RURAL_LIFESTYLE,
            self::PROPERTY_TYPES_ONLINE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project_profile_type'] = isset($data['project_profile_type']) ? $data['project_profile_type'] : null;
        $this->container['estimated_completion_tertile'] = isset($data['estimated_completion_tertile']) ? $data['estimated_completion_tertile'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['viewing_address'] = isset($data['viewing_address']) ? $data['viewing_address'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['displayable_address'] = isset($data['displayable_address']) ? $data['displayable_address'] : null;
        $this->container['enquiry_email_address'] = isset($data['enquiry_email_address']) ? $data['enquiry_email_address'] : null;
        $this->container['advertiser_identifiers'] = isset($data['advertiser_identifiers']) ? $data['advertiser_identifiers'] : null;
        $this->container['provider_details'] = isset($data['provider_details']) ? $data['provider_details'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['project_url'] = isset($data['project_url']) ? $data['project_url'] : null;
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['tagline'] = isset($data['tagline']) ? $data['tagline'] : null;
        $this->container['display_as_last_updated'] = isset($data['display_as_last_updated']) ? $data['display_as_last_updated'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['background_colour'] = isset($data['background_colour']) ? $data['background_colour'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['appointment_required'] = isset($data['appointment_required']) ? $data['appointment_required'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['price_from'] = isset($data['price_from']) ? $data['price_from'] : null;
        $this->container['price_to'] = isset($data['price_to']) ? $data['price_to'] : null;
        $this->container['banner_url'] = isset($data['banner_url']) ? $data['banner_url'] : null;
        $this->container['big_banner_url'] = isset($data['big_banner_url']) ? $data['big_banner_url'] : null;
        $this->container['small_banner_url'] = isset($data['small_banner_url']) ? $data['small_banner_url'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['pdfs'] = isset($data['pdfs']) ? $data['pdfs'] : null;
        $this->container['inspection_details'] = isset($data['inspection_details']) ? $data['inspection_details'] : null;
        $this->container['number_of_floors'] = isset($data['number_of_floors']) ? $data['number_of_floors'] : null;
        $this->container['min_number_of_floors'] = isset($data['min_number_of_floors']) ? $data['min_number_of_floors'] : null;
        $this->container['min_building_height'] = isset($data['min_building_height']) ? $data['min_building_height'] : null;
        $this->container['max_building_height'] = isset($data['max_building_height']) ? $data['max_building_height'] : null;
        $this->container['number_of_buildings'] = isset($data['number_of_buildings']) ? $data['number_of_buildings'] : null;
        $this->container['number_of_apartments'] = isset($data['number_of_apartments']) ? $data['number_of_apartments'] : null;
        $this->container['estimated_completion_date'] = isset($data['estimated_completion_date']) ? $data['estimated_completion_date'] : null;
        $this->container['starting_price'] = isset($data['starting_price']) ? $data['starting_price'] : null;
        $this->container['child_listing_ids'] = isset($data['child_listing_ids']) ? $data['child_listing_ids'] : null;
        $this->container['linked_project_ids'] = isset($data['linked_project_ids']) ? $data['linked_project_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProjectProfileTypeAllowableValues();
        if (!is_null($this->container['project_profile_type']) && !in_array($this->container['project_profile_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'project_profile_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEstimatedCompletionTertileAllowableValues();
        if (!is_null($this->container['estimated_completion_tertile']) && !in_array($this->container['estimated_completion_tertile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'estimated_completion_tertile', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_profile_type
     *
     * @return string
     */
    public function getProjectProfileType()
    {
        return $this->container['project_profile_type'];
    }

    /**
     * Sets project_profile_type
     *
     * @param string $project_profile_type Gets or Sets ProjectProfileType
     *
     * @return $this
     */
    public function setProjectProfileType($project_profile_type)
    {
        $allowedValues = $this->getProjectProfileTypeAllowableValues();
        if (!is_null($project_profile_type) && !in_array($project_profile_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'project_profile_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['project_profile_type'] = $project_profile_type;

        return $this;
    }

    /**
     * Gets estimated_completion_tertile
     *
     * @return string
     */
    public function getEstimatedCompletionTertile()
    {
        return $this->container['estimated_completion_tertile'];
    }

    /**
     * Sets estimated_completion_tertile
     *
     * @param string $estimated_completion_tertile Gets or Sets EstimatedCompletionTertile
     *
     * @return $this
     */
    public function setEstimatedCompletionTertile($estimated_completion_tertile)
    {
        $allowedValues = $this->getEstimatedCompletionTertileAllowableValues();
        if (!is_null($estimated_completion_tertile) && !in_array($estimated_completion_tertile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'estimated_completion_tertile', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['estimated_completion_tertile'] = $estimated_completion_tertile;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Gets or Sets Category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Project ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Project Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date. DateTime is in a local timezone.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End date.DateTime is in a local timezone.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ListingsV2ProjectAddressParts
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ListingsV2ProjectAddressParts $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets viewing_address
     *
     * @return \Swagger\Client\Model\ListingsV2ProjectAddressParts
     */
    public function getViewingAddress()
    {
        return $this->container['viewing_address'];
    }

    /**
     * Sets viewing_address
     *
     * @param \Swagger\Client\Model\ListingsV2ProjectAddressParts $viewing_address viewing_address
     *
     * @return $this
     */
    public function setViewingAddress($viewing_address)
    {
        $this->container['viewing_address'] = $viewing_address;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return string[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param string[] $property_types Property types available at the project.
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $allowedValues = $this->getPropertyTypesAllowableValues();
        if (!is_null($property_types) && array_diff($property_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets displayable_address
     *
     * @return \Swagger\Client\Model\ListingsV2ProjectAddressParts
     */
    public function getDisplayableAddress()
    {
        return $this->container['displayable_address'];
    }

    /**
     * Sets displayable_address
     *
     * @param \Swagger\Client\Model\ListingsV2ProjectAddressParts $displayable_address displayable_address
     *
     * @return $this
     */
    public function setDisplayableAddress($displayable_address)
    {
        $this->container['displayable_address'] = $displayable_address;

        return $this;
    }

    /**
     * Gets enquiry_email_address
     *
     * @return string
     */
    public function getEnquiryEmailAddress()
    {
        return $this->container['enquiry_email_address'];
    }

    /**
     * Sets enquiry_email_address
     *
     * @param string $enquiry_email_address Enquiry email address
     *
     * @return $this
     */
    public function setEnquiryEmailAddress($enquiry_email_address)
    {
        $this->container['enquiry_email_address'] = $enquiry_email_address;

        return $this;
    }

    /**
     * Gets advertiser_identifiers
     *
     * @return \Swagger\Client\Model\ListingsV2AdvertiserIdentifiers
     */
    public function getAdvertiserIdentifiers()
    {
        return $this->container['advertiser_identifiers'];
    }

    /**
     * Sets advertiser_identifiers
     *
     * @param \Swagger\Client\Model\ListingsV2AdvertiserIdentifiers $advertiser_identifiers advertiser_identifiers
     *
     * @return $this
     */
    public function setAdvertiserIdentifiers($advertiser_identifiers)
    {
        $this->container['advertiser_identifiers'] = $advertiser_identifiers;

        return $this;
    }

    /**
     * Gets provider_details
     *
     * @return \Swagger\Client\Model\ListingsV2ProviderDetails
     */
    public function getProviderDetails()
    {
        return $this->container['provider_details'];
    }

    /**
     * Sets provider_details
     *
     * @param \Swagger\Client\Model\ListingsV2ProviderDetails $provider_details provider_details
     *
     * @return $this
     */
    public function setProviderDetails($provider_details)
    {
        $this->container['provider_details'] = $provider_details;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\ListingsV2ProjectMedia[]
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\ListingsV2ProjectMedia[] $media Images and videos
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets project_url
     *
     * @return string
     */
    public function getProjectUrl()
    {
        return $this->container['project_url'];
    }

    /**
     * Sets project_url
     *
     * @param string $project_url Project URL
     *
     * @return $this
     */
    public function setProjectUrl($project_url)
    {
        $this->container['project_url'] = $project_url;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string $headline Headline
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string $tagline Tag line
     *
     * @return $this
     */
    public function setTagline($tagline)
    {
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets display_as_last_updated
     *
     * @return \DateTime
     */
    public function getDisplayAsLastUpdated()
    {
        return $this->container['display_as_last_updated'];
    }

    /**
     * Sets display_as_last_updated
     *
     * @param \DateTime $display_as_last_updated The 'last updated' date to show to customers. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDisplayAsLastUpdated($display_as_last_updated)
    {
        $this->container['display_as_last_updated'] = $display_as_last_updated;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string $modified_by Last updated by
     *
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Last updated, used for auditing. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by Created by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Created date. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets background_colour
     *
     * @return string
     */
    public function getBackgroundColour()
    {
        return $this->container['background_colour'];
    }

    /**
     * Sets background_colour
     *
     * @param string $background_colour Background colour
     *
     * @return $this
     */
    public function setBackgroundColour($background_colour)
    {
        $this->container['background_colour'] = $background_colour;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets appointment_required
     *
     * @return bool
     */
    public function getAppointmentRequired()
    {
        return $this->container['appointment_required'];
    }

    /**
     * Sets appointment_required
     *
     * @param bool $appointment_required If inspections require an appointment.
     *
     * @return $this
     */
    public function setAppointmentRequired($appointment_required)
    {
        $this->container['appointment_required'] = $appointment_required;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features Features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets price_from
     *
     * @return double
     */
    public function getPriceFrom()
    {
        return $this->container['price_from'];
    }

    /**
     * Sets price_from
     *
     * @param double $price_from Price from
     *
     * @return $this
     */
    public function setPriceFrom($price_from)
    {
        $this->container['price_from'] = $price_from;

        return $this;
    }

    /**
     * Gets price_to
     *
     * @return double
     */
    public function getPriceTo()
    {
        return $this->container['price_to'];
    }

    /**
     * Sets price_to
     *
     * @param double $price_to Price to
     *
     * @return $this
     */
    public function setPriceTo($price_to)
    {
        $this->container['price_to'] = $price_to;

        return $this;
    }

    /**
     * Gets banner_url
     *
     * @return string
     */
    public function getBannerUrl()
    {
        return $this->container['banner_url'];
    }

    /**
     * Sets banner_url
     *
     * @param string $banner_url Banner URL
     *
     * @return $this
     */
    public function setBannerUrl($banner_url)
    {
        $this->container['banner_url'] = $banner_url;

        return $this;
    }

    /**
     * Gets big_banner_url
     *
     * @return string
     */
    public function getBigBannerUrl()
    {
        return $this->container['big_banner_url'];
    }

    /**
     * Sets big_banner_url
     *
     * @param string $big_banner_url Big banner URL
     *
     * @return $this
     */
    public function setBigBannerUrl($big_banner_url)
    {
        $this->container['big_banner_url'] = $big_banner_url;

        return $this;
    }

    /**
     * Gets small_banner_url
     *
     * @return string
     */
    public function getSmallBannerUrl()
    {
        return $this->container['small_banner_url'];
    }

    /**
     * Sets small_banner_url
     *
     * @param string $small_banner_url Small banner URL
     *
     * @return $this
     */
    public function setSmallBannerUrl($small_banner_url)
    {
        $this->container['small_banner_url'] = $small_banner_url;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url Logo URL
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets pdfs
     *
     * @return \Swagger\Client\Model\ListingsV2PdfUpload[]
     */
    public function getPdfs()
    {
        return $this->container['pdfs'];
    }

    /**
     * Sets pdfs
     *
     * @param \Swagger\Client\Model\ListingsV2PdfUpload[] $pdfs PDF files, such as brochures etc.
     *
     * @return $this
     */
    public function setPdfs($pdfs)
    {
        $this->container['pdfs'] = $pdfs;

        return $this;
    }

    /**
     * Gets inspection_details
     *
     * @return \Swagger\Client\Model\ListingsV2PropertyInspections
     */
    public function getInspectionDetails()
    {
        return $this->container['inspection_details'];
    }

    /**
     * Sets inspection_details
     *
     * @param \Swagger\Client\Model\ListingsV2PropertyInspections $inspection_details inspection_details
     *
     * @return $this
     */
    public function setInspectionDetails($inspection_details)
    {
        $this->container['inspection_details'] = $inspection_details;

        return $this;
    }

    /**
     * Gets number_of_floors
     *
     * @return int
     */
    public function getNumberOfFloors()
    {
        return $this->container['number_of_floors'];
    }

    /**
     * Sets number_of_floors
     *
     * @param int $number_of_floors Maximum number of floors
     *
     * @return $this
     */
    public function setNumberOfFloors($number_of_floors)
    {
        $this->container['number_of_floors'] = $number_of_floors;

        return $this;
    }

    /**
     * Gets min_number_of_floors
     *
     * @return int
     */
    public function getMinNumberOfFloors()
    {
        return $this->container['min_number_of_floors'];
    }

    /**
     * Sets min_number_of_floors
     *
     * @param int $min_number_of_floors Minimum number of floors
     *
     * @return $this
     */
    public function setMinNumberOfFloors($min_number_of_floors)
    {
        $this->container['min_number_of_floors'] = $min_number_of_floors;

        return $this;
    }

    /**
     * Gets min_building_height
     *
     * @return int
     */
    public function getMinBuildingHeight()
    {
        return $this->container['min_building_height'];
    }

    /**
     * Sets min_building_height
     *
     * @param int $min_building_height Minimum building height
     *
     * @return $this
     */
    public function setMinBuildingHeight($min_building_height)
    {
        $this->container['min_building_height'] = $min_building_height;

        return $this;
    }

    /**
     * Gets max_building_height
     *
     * @return int
     */
    public function getMaxBuildingHeight()
    {
        return $this->container['max_building_height'];
    }

    /**
     * Sets max_building_height
     *
     * @param int $max_building_height Maximum building height
     *
     * @return $this
     */
    public function setMaxBuildingHeight($max_building_height)
    {
        $this->container['max_building_height'] = $max_building_height;

        return $this;
    }

    /**
     * Gets number_of_buildings
     *
     * @return int
     */
    public function getNumberOfBuildings()
    {
        return $this->container['number_of_buildings'];
    }

    /**
     * Sets number_of_buildings
     *
     * @param int $number_of_buildings Number of buildings
     *
     * @return $this
     */
    public function setNumberOfBuildings($number_of_buildings)
    {
        $this->container['number_of_buildings'] = $number_of_buildings;

        return $this;
    }

    /**
     * Gets number_of_apartments
     *
     * @return int
     */
    public function getNumberOfApartments()
    {
        return $this->container['number_of_apartments'];
    }

    /**
     * Sets number_of_apartments
     *
     * @param int $number_of_apartments Number of apartments
     *
     * @return $this
     */
    public function setNumberOfApartments($number_of_apartments)
    {
        $this->container['number_of_apartments'] = $number_of_apartments;

        return $this;
    }

    /**
     * Gets estimated_completion_date
     *
     * @return \DateTime
     */
    public function getEstimatedCompletionDate()
    {
        return $this->container['estimated_completion_date'];
    }

    /**
     * Sets estimated_completion_date
     *
     * @param \DateTime $estimated_completion_date Estimated completion date. DateTime in a local timezone.
     *
     * @return $this
     */
    public function setEstimatedCompletionDate($estimated_completion_date)
    {
        $this->container['estimated_completion_date'] = $estimated_completion_date;

        return $this;
    }

    /**
     * Gets starting_price
     *
     * @return double
     */
    public function getStartingPrice()
    {
        return $this->container['starting_price'];
    }

    /**
     * Sets starting_price
     *
     * @param double $starting_price Lowest child listing price
     *
     * @return $this
     */
    public function setStartingPrice($starting_price)
    {
        $this->container['starting_price'] = $starting_price;

        return $this;
    }

    /**
     * Gets child_listing_ids
     *
     * @return int[]
     */
    public function getChildListingIds()
    {
        return $this->container['child_listing_ids'];
    }

    /**
     * Sets child_listing_ids
     *
     * @param int[] $child_listing_ids Child listing identifiers.
     *
     * @return $this
     */
    public function setChildListingIds($child_listing_ids)
    {
        $this->container['child_listing_ids'] = $child_listing_ids;

        return $this;
    }

    /**
     * Gets linked_project_ids
     *
     * @return int[]
     */
    public function getLinkedProjectIds()
    {
        return $this->container['linked_project_ids'];
    }

    /**
     * Sets linked_project_ids
     *
     * @param int[] $linked_project_ids Linked project identifiers.
     *
     * @return $this
     */
    public function setLinkedProjectIds($linked_project_ids)
    {
        $this->container['linked_project_ids'] = $linked_project_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
