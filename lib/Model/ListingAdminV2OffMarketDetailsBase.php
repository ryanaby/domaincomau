<?php
/**
 * ListingAdminV2OffMarketDetailsBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingAdminV2OffMarketDetailsBase Class Doc Comment
 *
 * @category Class
 * @description Off market details base
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingAdminV2OffMarketDetailsBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingAdmin.v2.OffMarketDetailsBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'off_market_action' => 'string',
        'action_date' => '\DateTime',
        'sold_details' => '\Swagger\Client\Model\ListingAdminV2SoldDetails',
        'leased_details' => '\Swagger\Client\Model\ListingAdminV2LeasedDetails',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'off_market_action' => null,
        'action_date' => 'date-time',
        'sold_details' => null,
        'leased_details' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'off_market_action' => 'offMarketAction',
        'action_date' => 'actionDate',
        'sold_details' => 'soldDetails',
        'leased_details' => 'leasedDetails',
        'comment' => 'comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'off_market_action' => 'setOffMarketAction',
        'action_date' => 'setActionDate',
        'sold_details' => 'setSoldDetails',
        'leased_details' => 'setLeasedDetails',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'off_market_action' => 'getOffMarketAction',
        'action_date' => 'getActionDate',
        'sold_details' => 'getSoldDetails',
        'leased_details' => 'getLeasedDetails',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OFF_MARKET_ACTION_WITH_DRAWN = 'withDrawn';
    const OFF_MARKET_ACTION_SOLD = 'sold';
    const OFF_MARKET_ACTION_LEASED = 'leased';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOffMarketActionAllowableValues()
    {
        return [
            self::OFF_MARKET_ACTION_WITH_DRAWN,
            self::OFF_MARKET_ACTION_SOLD,
            self::OFF_MARKET_ACTION_LEASED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['off_market_action'] = isset($data['off_market_action']) ? $data['off_market_action'] : null;
        $this->container['action_date'] = isset($data['action_date']) ? $data['action_date'] : null;
        $this->container['sold_details'] = isset($data['sold_details']) ? $data['sold_details'] : null;
        $this->container['leased_details'] = isset($data['leased_details']) ? $data['leased_details'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['off_market_action'] === null) {
            $invalidProperties[] = "'off_market_action' can't be null";
        }
        $allowedValues = $this->getOffMarketActionAllowableValues();
        if (!is_null($this->container['off_market_action']) && !in_array($this->container['off_market_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'off_market_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action_date'] === null) {
            $invalidProperties[] = "'action_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets off_market_action
     *
     * @return string
     */
    public function getOffMarketAction()
    {
        return $this->container['off_market_action'];
    }

    /**
     * Sets off_market_action
     *
     * @param string $off_market_action Off Market Action
     *
     * @return $this
     */
    public function setOffMarketAction($off_market_action)
    {
        $allowedValues = $this->getOffMarketActionAllowableValues();
        if (!in_array($off_market_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'off_market_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['off_market_action'] = $off_market_action;

        return $this;
    }

    /**
     * Gets action_date
     *
     * @return \DateTime
     */
    public function getActionDate()
    {
        return $this->container['action_date'];
    }

    /**
     * Sets action_date
     *
     * @param \DateTime $action_date The date property was sold, leased or withdrawn
     *
     * @return $this
     */
    public function setActionDate($action_date)
    {
        $this->container['action_date'] = $action_date;

        return $this;
    }

    /**
     * Gets sold_details
     *
     * @return \Swagger\Client\Model\ListingAdminV2SoldDetails
     */
    public function getSoldDetails()
    {
        return $this->container['sold_details'];
    }

    /**
     * Sets sold_details
     *
     * @param \Swagger\Client\Model\ListingAdminV2SoldDetails $sold_details sold_details
     *
     * @return $this
     */
    public function setSoldDetails($sold_details)
    {
        $this->container['sold_details'] = $sold_details;

        return $this;
    }

    /**
     * Gets leased_details
     *
     * @return \Swagger\Client\Model\ListingAdminV2LeasedDetails
     */
    public function getLeasedDetails()
    {
        return $this->container['leased_details'];
    }

    /**
     * Sets leased_details
     *
     * @param \Swagger\Client\Model\ListingAdminV2LeasedDetails $leased_details leased_details
     *
     * @return $this
     */
    public function setLeasedDetails($leased_details)
    {
        $this->container['leased_details'] = $leased_details;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Extra details for off market action
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
