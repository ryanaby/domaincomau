<?php
/**
 * DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.LocationProfilesService.v1.Model.LocationDataPropertyCategories';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'luxury_level_price' => 'double',
        'number_sold' => 'int',
        'estimated_repayments' => 'double',
        'for_sale' => 'int',
        'median_sold_price' => 'double',
        'median_rent_price' => 'double',
        'days_on_market' => 'double',
        'bedrooms' => 'int',
        'for_rent' => 'int',
        'entry_level_price' => 'double',
        'sales_growth_list' => '\Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList[]',
        'auction_clearance_rate' => 'double',
        'property_category' => 'string',
        'most_recent_sale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'luxury_level_price' => 'double',
        'number_sold' => 'int32',
        'estimated_repayments' => 'double',
        'for_sale' => 'int32',
        'median_sold_price' => 'double',
        'median_rent_price' => 'double',
        'days_on_market' => 'double',
        'bedrooms' => 'int32',
        'for_rent' => 'int32',
        'entry_level_price' => 'double',
        'sales_growth_list' => null,
        'auction_clearance_rate' => 'double',
        'property_category' => null,
        'most_recent_sale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'luxury_level_price' => 'luxuryLevelPrice',
        'number_sold' => 'numberSold',
        'estimated_repayments' => 'estimatedRepayments',
        'for_sale' => 'forSale',
        'median_sold_price' => 'medianSoldPrice',
        'median_rent_price' => 'medianRentPrice',
        'days_on_market' => 'daysOnMarket',
        'bedrooms' => 'bedrooms',
        'for_rent' => 'forRent',
        'entry_level_price' => 'entryLevelPrice',
        'sales_growth_list' => 'salesGrowthList',
        'auction_clearance_rate' => 'auctionClearanceRate',
        'property_category' => 'propertyCategory',
        'most_recent_sale' => 'mostRecentSale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'luxury_level_price' => 'setLuxuryLevelPrice',
        'number_sold' => 'setNumberSold',
        'estimated_repayments' => 'setEstimatedRepayments',
        'for_sale' => 'setForSale',
        'median_sold_price' => 'setMedianSoldPrice',
        'median_rent_price' => 'setMedianRentPrice',
        'days_on_market' => 'setDaysOnMarket',
        'bedrooms' => 'setBedrooms',
        'for_rent' => 'setForRent',
        'entry_level_price' => 'setEntryLevelPrice',
        'sales_growth_list' => 'setSalesGrowthList',
        'auction_clearance_rate' => 'setAuctionClearanceRate',
        'property_category' => 'setPropertyCategory',
        'most_recent_sale' => 'setMostRecentSale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'luxury_level_price' => 'getLuxuryLevelPrice',
        'number_sold' => 'getNumberSold',
        'estimated_repayments' => 'getEstimatedRepayments',
        'for_sale' => 'getForSale',
        'median_sold_price' => 'getMedianSoldPrice',
        'median_rent_price' => 'getMedianRentPrice',
        'days_on_market' => 'getDaysOnMarket',
        'bedrooms' => 'getBedrooms',
        'for_rent' => 'getForRent',
        'entry_level_price' => 'getEntryLevelPrice',
        'sales_growth_list' => 'getSalesGrowthList',
        'auction_clearance_rate' => 'getAuctionClearanceRate',
        'property_category' => 'getPropertyCategory',
        'most_recent_sale' => 'getMostRecentSale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['luxury_level_price'] = isset($data['luxury_level_price']) ? $data['luxury_level_price'] : null;
        $this->container['number_sold'] = isset($data['number_sold']) ? $data['number_sold'] : null;
        $this->container['estimated_repayments'] = isset($data['estimated_repayments']) ? $data['estimated_repayments'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['median_sold_price'] = isset($data['median_sold_price']) ? $data['median_sold_price'] : null;
        $this->container['median_rent_price'] = isset($data['median_rent_price']) ? $data['median_rent_price'] : null;
        $this->container['days_on_market'] = isset($data['days_on_market']) ? $data['days_on_market'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['entry_level_price'] = isset($data['entry_level_price']) ? $data['entry_level_price'] : null;
        $this->container['sales_growth_list'] = isset($data['sales_growth_list']) ? $data['sales_growth_list'] : null;
        $this->container['auction_clearance_rate'] = isset($data['auction_clearance_rate']) ? $data['auction_clearance_rate'] : null;
        $this->container['property_category'] = isset($data['property_category']) ? $data['property_category'] : null;
        $this->container['most_recent_sale'] = isset($data['most_recent_sale']) ? $data['most_recent_sale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets luxury_level_price
     *
     * @return double
     */
    public function getLuxuryLevelPrice()
    {
        return $this->container['luxury_level_price'];
    }

    /**
     * Sets luxury_level_price
     *
     * @param double $luxury_level_price luxury_level_price
     *
     * @return $this
     */
    public function setLuxuryLevelPrice($luxury_level_price)
    {
        $this->container['luxury_level_price'] = $luxury_level_price;

        return $this;
    }

    /**
     * Gets number_sold
     *
     * @return int
     */
    public function getNumberSold()
    {
        return $this->container['number_sold'];
    }

    /**
     * Sets number_sold
     *
     * @param int $number_sold number_sold
     *
     * @return $this
     */
    public function setNumberSold($number_sold)
    {
        $this->container['number_sold'] = $number_sold;

        return $this;
    }

    /**
     * Gets estimated_repayments
     *
     * @return double
     */
    public function getEstimatedRepayments()
    {
        return $this->container['estimated_repayments'];
    }

    /**
     * Sets estimated_repayments
     *
     * @param double $estimated_repayments estimated_repayments
     *
     * @return $this
     */
    public function setEstimatedRepayments($estimated_repayments)
    {
        $this->container['estimated_repayments'] = $estimated_repayments;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return int
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param int $for_sale for_sale
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets median_sold_price
     *
     * @return double
     */
    public function getMedianSoldPrice()
    {
        return $this->container['median_sold_price'];
    }

    /**
     * Sets median_sold_price
     *
     * @param double $median_sold_price median_sold_price
     *
     * @return $this
     */
    public function setMedianSoldPrice($median_sold_price)
    {
        $this->container['median_sold_price'] = $median_sold_price;

        return $this;
    }

    /**
     * Gets median_rent_price
     *
     * @return double
     */
    public function getMedianRentPrice()
    {
        return $this->container['median_rent_price'];
    }

    /**
     * Sets median_rent_price
     *
     * @param double $median_rent_price median_rent_price
     *
     * @return $this
     */
    public function setMedianRentPrice($median_rent_price)
    {
        $this->container['median_rent_price'] = $median_rent_price;

        return $this;
    }

    /**
     * Gets days_on_market
     *
     * @return double
     */
    public function getDaysOnMarket()
    {
        return $this->container['days_on_market'];
    }

    /**
     * Sets days_on_market
     *
     * @param double $days_on_market days_on_market
     *
     * @return $this
     */
    public function setDaysOnMarket($days_on_market)
    {
        $this->container['days_on_market'] = $days_on_market;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return int
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param int $for_rent for_rent
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets entry_level_price
     *
     * @return double
     */
    public function getEntryLevelPrice()
    {
        return $this->container['entry_level_price'];
    }

    /**
     * Sets entry_level_price
     *
     * @param double $entry_level_price entry_level_price
     *
     * @return $this
     */
    public function setEntryLevelPrice($entry_level_price)
    {
        $this->container['entry_level_price'] = $entry_level_price;

        return $this;
    }

    /**
     * Gets sales_growth_list
     *
     * @return \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList[]
     */
    public function getSalesGrowthList()
    {
        return $this->container['sales_growth_list'];
    }

    /**
     * Sets sales_growth_list
     *
     * @param \Swagger\Client\Model\DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList[] $sales_growth_list sales_growth_list
     *
     * @return $this
     */
    public function setSalesGrowthList($sales_growth_list)
    {
        $this->container['sales_growth_list'] = $sales_growth_list;

        return $this;
    }

    /**
     * Gets auction_clearance_rate
     *
     * @return double
     */
    public function getAuctionClearanceRate()
    {
        return $this->container['auction_clearance_rate'];
    }

    /**
     * Sets auction_clearance_rate
     *
     * @param double $auction_clearance_rate auction_clearance_rate
     *
     * @return $this
     */
    public function setAuctionClearanceRate($auction_clearance_rate)
    {
        $this->container['auction_clearance_rate'] = $auction_clearance_rate;

        return $this;
    }

    /**
     * Gets property_category
     *
     * @return string
     */
    public function getPropertyCategory()
    {
        return $this->container['property_category'];
    }

    /**
     * Sets property_category
     *
     * @param string $property_category property_category
     *
     * @return $this
     */
    public function setPropertyCategory($property_category)
    {
        $this->container['property_category'] = $property_category;

        return $this;
    }

    /**
     * Gets most_recent_sale
     *
     * @return string
     */
    public function getMostRecentSale()
    {
        return $this->container['most_recent_sale'];
    }

    /**
     * Sets most_recent_sale
     *
     * @param string $most_recent_sale most_recent_sale
     *
     * @return $this
     */
    public function setMostRecentSale($most_recent_sale)
    {
        $this->container['most_recent_sale'] = $most_recent_sale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
