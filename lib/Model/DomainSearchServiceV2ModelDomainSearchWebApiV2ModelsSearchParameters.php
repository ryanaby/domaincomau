<?php
/**
 * DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Domain.SearchService.v2.Model.DomainSearchWebApiV2ModelsSearchParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listing_type' => 'string',
        'property_types' => 'string[]',
        'property_features' => 'string[]',
        'listing_attributes' => 'string[]',
        'property_established_type' => 'string',
        'min_bedrooms' => 'float',
        'max_bedrooms' => 'float',
        'min_bathrooms' => 'float',
        'max_bathrooms' => 'float',
        'min_carspaces' => 'int',
        'max_carspaces' => 'int',
        'min_price' => 'int',
        'max_price' => 'int',
        'min_land_area' => 'int',
        'max_land_area' => 'int',
        'advertiser_ids' => 'int[]',
        'ad_ids' => 'int[]',
        'exclude_ad_ids' => 'int[]',
        'locations' => '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[]',
        'school_catchments' => '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[]',
        'location_terms' => 'string',
        'keywords' => 'string[]',
        'new_dev_only' => 'bool',
        'inspection_from' => '\DateTime',
        'inspection_to' => '\DateTime',
        'auction_from' => '\DateTime',
        'auction_to' => '\DateTime',
        'date_available_from' => '\DateTime',
        'date_available_to' => '\DateTime',
        'rural_only' => 'bool',
        'exclude_price_withheld' => 'bool',
        'exclude_deposit_taken' => 'bool',
        'topspot_keywords' => 'string[]',
        'custom_sort' => '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort',
        'sort' => '\Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy',
        'page_size' => 'int',
        'geo_window' => '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow',
        'updated_since' => '\DateTime',
        'listed_since' => '\DateTime',
        'include_inspection_aggregations' => 'bool',
        'tags' => '\Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[]',
        'page_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listing_type' => null,
        'property_types' => null,
        'property_features' => null,
        'listing_attributes' => null,
        'property_established_type' => null,
        'min_bedrooms' => 'float',
        'max_bedrooms' => 'float',
        'min_bathrooms' => 'float',
        'max_bathrooms' => 'float',
        'min_carspaces' => 'int32',
        'max_carspaces' => 'int32',
        'min_price' => 'int32',
        'max_price' => 'int32',
        'min_land_area' => 'int32',
        'max_land_area' => 'int32',
        'advertiser_ids' => 'int32',
        'ad_ids' => 'int32',
        'exclude_ad_ids' => 'int32',
        'locations' => null,
        'school_catchments' => null,
        'location_terms' => null,
        'keywords' => null,
        'new_dev_only' => null,
        'inspection_from' => 'date-time',
        'inspection_to' => 'date-time',
        'auction_from' => 'date-time',
        'auction_to' => 'date-time',
        'date_available_from' => 'date-time',
        'date_available_to' => 'date-time',
        'rural_only' => null,
        'exclude_price_withheld' => null,
        'exclude_deposit_taken' => null,
        'topspot_keywords' => null,
        'custom_sort' => null,
        'sort' => null,
        'page_size' => 'int32',
        'geo_window' => null,
        'updated_since' => 'date-time',
        'listed_since' => 'date-time',
        'include_inspection_aggregations' => null,
        'tags' => null,
        'page_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_type' => 'listingType',
        'property_types' => 'propertyTypes',
        'property_features' => 'propertyFeatures',
        'listing_attributes' => 'listingAttributes',
        'property_established_type' => 'propertyEstablishedType',
        'min_bedrooms' => 'minBedrooms',
        'max_bedrooms' => 'maxBedrooms',
        'min_bathrooms' => 'minBathrooms',
        'max_bathrooms' => 'maxBathrooms',
        'min_carspaces' => 'minCarspaces',
        'max_carspaces' => 'maxCarspaces',
        'min_price' => 'minPrice',
        'max_price' => 'maxPrice',
        'min_land_area' => 'minLandArea',
        'max_land_area' => 'maxLandArea',
        'advertiser_ids' => 'advertiserIds',
        'ad_ids' => 'adIds',
        'exclude_ad_ids' => 'excludeAdIds',
        'locations' => 'locations',
        'school_catchments' => 'schoolCatchments',
        'location_terms' => 'locationTerms',
        'keywords' => 'keywords',
        'new_dev_only' => 'newDevOnly',
        'inspection_from' => 'inspectionFrom',
        'inspection_to' => 'inspectionTo',
        'auction_from' => 'auctionFrom',
        'auction_to' => 'auctionTo',
        'date_available_from' => 'dateAvailableFrom',
        'date_available_to' => 'dateAvailableTo',
        'rural_only' => 'ruralOnly',
        'exclude_price_withheld' => 'excludePriceWithheld',
        'exclude_deposit_taken' => 'excludeDepositTaken',
        'topspot_keywords' => 'topspotKeywords',
        'custom_sort' => 'customSort',
        'sort' => 'sort',
        'page_size' => 'pageSize',
        'geo_window' => 'geoWindow',
        'updated_since' => 'updatedSince',
        'listed_since' => 'listedSince',
        'include_inspection_aggregations' => 'includeInspectionAggregations',
        'tags' => 'tags',
        'page_number' => 'pageNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_type' => 'setListingType',
        'property_types' => 'setPropertyTypes',
        'property_features' => 'setPropertyFeatures',
        'listing_attributes' => 'setListingAttributes',
        'property_established_type' => 'setPropertyEstablishedType',
        'min_bedrooms' => 'setMinBedrooms',
        'max_bedrooms' => 'setMaxBedrooms',
        'min_bathrooms' => 'setMinBathrooms',
        'max_bathrooms' => 'setMaxBathrooms',
        'min_carspaces' => 'setMinCarspaces',
        'max_carspaces' => 'setMaxCarspaces',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'min_land_area' => 'setMinLandArea',
        'max_land_area' => 'setMaxLandArea',
        'advertiser_ids' => 'setAdvertiserIds',
        'ad_ids' => 'setAdIds',
        'exclude_ad_ids' => 'setExcludeAdIds',
        'locations' => 'setLocations',
        'school_catchments' => 'setSchoolCatchments',
        'location_terms' => 'setLocationTerms',
        'keywords' => 'setKeywords',
        'new_dev_only' => 'setNewDevOnly',
        'inspection_from' => 'setInspectionFrom',
        'inspection_to' => 'setInspectionTo',
        'auction_from' => 'setAuctionFrom',
        'auction_to' => 'setAuctionTo',
        'date_available_from' => 'setDateAvailableFrom',
        'date_available_to' => 'setDateAvailableTo',
        'rural_only' => 'setRuralOnly',
        'exclude_price_withheld' => 'setExcludePriceWithheld',
        'exclude_deposit_taken' => 'setExcludeDepositTaken',
        'topspot_keywords' => 'setTopspotKeywords',
        'custom_sort' => 'setCustomSort',
        'sort' => 'setSort',
        'page_size' => 'setPageSize',
        'geo_window' => 'setGeoWindow',
        'updated_since' => 'setUpdatedSince',
        'listed_since' => 'setListedSince',
        'include_inspection_aggregations' => 'setIncludeInspectionAggregations',
        'tags' => 'setTags',
        'page_number' => 'setPageNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_type' => 'getListingType',
        'property_types' => 'getPropertyTypes',
        'property_features' => 'getPropertyFeatures',
        'listing_attributes' => 'getListingAttributes',
        'property_established_type' => 'getPropertyEstablishedType',
        'min_bedrooms' => 'getMinBedrooms',
        'max_bedrooms' => 'getMaxBedrooms',
        'min_bathrooms' => 'getMinBathrooms',
        'max_bathrooms' => 'getMaxBathrooms',
        'min_carspaces' => 'getMinCarspaces',
        'max_carspaces' => 'getMaxCarspaces',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'min_land_area' => 'getMinLandArea',
        'max_land_area' => 'getMaxLandArea',
        'advertiser_ids' => 'getAdvertiserIds',
        'ad_ids' => 'getAdIds',
        'exclude_ad_ids' => 'getExcludeAdIds',
        'locations' => 'getLocations',
        'school_catchments' => 'getSchoolCatchments',
        'location_terms' => 'getLocationTerms',
        'keywords' => 'getKeywords',
        'new_dev_only' => 'getNewDevOnly',
        'inspection_from' => 'getInspectionFrom',
        'inspection_to' => 'getInspectionTo',
        'auction_from' => 'getAuctionFrom',
        'auction_to' => 'getAuctionTo',
        'date_available_from' => 'getDateAvailableFrom',
        'date_available_to' => 'getDateAvailableTo',
        'rural_only' => 'getRuralOnly',
        'exclude_price_withheld' => 'getExcludePriceWithheld',
        'exclude_deposit_taken' => 'getExcludeDepositTaken',
        'topspot_keywords' => 'getTopspotKeywords',
        'custom_sort' => 'getCustomSort',
        'sort' => 'getSort',
        'page_size' => 'getPageSize',
        'geo_window' => 'getGeoWindow',
        'updated_since' => 'getUpdatedSince',
        'listed_since' => 'getListedSince',
        'include_inspection_aggregations' => 'getIncludeInspectionAggregations',
        'tags' => 'getTags',
        'page_number' => 'getPageNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LISTING_TYPE_SALE = 'Sale';
    const LISTING_TYPE_RENT = 'Rent';
    const LISTING_TYPE_SHARE = 'Share';
    const LISTING_TYPE_SOLD = 'Sold';
    const LISTING_TYPE_NEW_HOMES = 'NewHomes';
    const PROPERTY_TYPES_ACREAGE_SEMI_RURAL = 'AcreageSemiRural';
    const PROPERTY_TYPES_APARTMENT_UNIT_FLAT = 'ApartmentUnitFlat';
    const PROPERTY_TYPES_AQUACULTURE = 'Aquaculture';
    const PROPERTY_TYPES_BLOCK_OF_UNITS = 'BlockOfUnits';
    const PROPERTY_TYPES_CAR_SPACE = 'CarSpace';
    const PROPERTY_TYPES_DAIRY_FARMING = 'DairyFarming';
    const PROPERTY_TYPES_DEVELOPMENT_SITE = 'DevelopmentSite';
    const PROPERTY_TYPES_DUPLEX = 'Duplex';
    const PROPERTY_TYPES_FARM = 'Farm';
    const PROPERTY_TYPES_FISHING_FORESTRY = 'FishingForestry';
    const PROPERTY_TYPES_NEW_HOME_DESIGNS = 'NewHomeDesigns';
    const PROPERTY_TYPES_HOUSE = 'House';
    const PROPERTY_TYPES_NEW_HOUSE_LAND = 'NewHouseLand';
    const PROPERTY_TYPES_IRRIGATION_SERVICES = 'IrrigationServices';
    const PROPERTY_TYPES_NEW_LAND = 'NewLand';
    const PROPERTY_TYPES_LIVESTOCK = 'Livestock';
    const PROPERTY_TYPES_NEW_APARTMENTS = 'NewApartments';
    const PROPERTY_TYPES_PENTHOUSE = 'Penthouse';
    const PROPERTY_TYPES_RETIREMENT_VILLAGE = 'RetirementVillage';
    const PROPERTY_TYPES_RURAL = 'Rural';
    const PROPERTY_TYPES_SEMI_DETACHED = 'SemiDetached';
    const PROPERTY_TYPES_SPECIALIST_FARM = 'SpecialistFarm';
    const PROPERTY_TYPES_STUDIO = 'Studio';
    const PROPERTY_TYPES_TERRACE = 'Terrace';
    const PROPERTY_TYPES_TOWNHOUSE = 'Townhouse';
    const PROPERTY_TYPES_VACANT_LAND = 'VacantLand';
    const PROPERTY_TYPES_VILLA = 'Villa';
    const PROPERTY_TYPES_CROPPING = 'Cropping';
    const PROPERTY_TYPES_VITICULTURE = 'Viticulture';
    const PROPERTY_TYPES_MIXED_FARMING = 'MixedFarming';
    const PROPERTY_TYPES_GRAZING = 'Grazing';
    const PROPERTY_TYPES_HORTICULTURE = 'Horticulture';
    const PROPERTY_TYPES_EQUINE = 'Equine';
    const PROPERTY_TYPES_FARMLET = 'Farmlet';
    const PROPERTY_TYPES_ORCHARD = 'Orchard';
    const PROPERTY_TYPES_RURAL_LIFESTYLE = 'RuralLifestyle';
    const PROPERTY_FEATURES_AIR_CONDITIONING = 'AirConditioning';
    const PROPERTY_FEATURES_BUILT_IN_WARDROBES = 'BuiltInWardrobes';
    const PROPERTY_FEATURES_CABLE_OR_SATELLITE = 'CableOrSatellite';
    const PROPERTY_FEATURES_ENSUITE = 'Ensuite';
    const PROPERTY_FEATURES_FLOORBOARDS = 'Floorboards';
    const PROPERTY_FEATURES_GAS = 'Gas';
    const PROPERTY_FEATURES_INTERNAL_LAUNDRY = 'InternalLaundry';
    const PROPERTY_FEATURES_PETS_ALLOWED = 'PetsAllowed';
    const PROPERTY_FEATURES_SECURE_PARKING = 'SecureParking';
    const PROPERTY_FEATURES_SWIMMING_POOL = 'SwimmingPool';
    const PROPERTY_FEATURES_FURNISHED = 'Furnished';
    const PROPERTY_FEATURES_GROUND_FLOOR = 'GroundFloor';
    const PROPERTY_FEATURES_WATER_VIEWS = 'WaterViews';
    const PROPERTY_FEATURES_NORTH_FACING = 'NorthFacing';
    const PROPERTY_FEATURES_CITY_VIEWS = 'CityViews';
    const PROPERTY_FEATURES_INDOOR_SPA = 'IndoorSpa';
    const PROPERTY_FEATURES_GYM = 'Gym';
    const PROPERTY_FEATURES_ALARM_SYSTEM = 'AlarmSystem';
    const PROPERTY_FEATURES_INTERCOM = 'Intercom';
    const PROPERTY_FEATURES_BROADBAND_INTERNET_ACCESS = 'BroadbandInternetAccess';
    const PROPERTY_FEATURES_BATH = 'Bath';
    const PROPERTY_FEATURES_FIREPLACE = 'Fireplace';
    const PROPERTY_FEATURES_SEPARATE_DINING_ROOM = 'SeparateDiningRoom';
    const PROPERTY_FEATURES_HEATING = 'Heating';
    const PROPERTY_FEATURES_DISHWASHER = 'Dishwasher';
    const PROPERTY_FEATURES_STUDY = 'Study';
    const PROPERTY_FEATURES_TENNIS_COURT = 'TennisCourt';
    const PROPERTY_FEATURES_SHED = 'Shed';
    const PROPERTY_FEATURES_FULLY_FENCED = 'FullyFenced';
    const PROPERTY_FEATURES_BALCONY_DECK = 'BalconyDeck';
    const PROPERTY_FEATURES_GARDEN_COURTYARD = 'GardenCourtyard';
    const PROPERTY_FEATURES_OUTDOOR_SPA = 'OutdoorSpa';
    const PROPERTY_FEATURES_DOUBLE_GLAZED_WINDOWS = 'DoubleGlazedWindows';
    const PROPERTY_FEATURES_ENERGY_EFFICIENT_APPLIANCES = 'EnergyEfficientAppliances';
    const PROPERTY_FEATURES_WATER_EFFICIENT_APPLIANCES = 'WaterEfficientAppliances';
    const PROPERTY_FEATURES_WALL_CEILING_INSULATION = 'WallCeilingInsulation';
    const PROPERTY_FEATURES_RAINWATER_STORAGE_TANK = 'RainwaterStorageTank';
    const PROPERTY_FEATURES_GREYWATER_SYSTEM = 'GreywaterSystem';
    const PROPERTY_FEATURES_WATER_EFFICIENT_FIXTURES = 'WaterEfficientFixtures';
    const PROPERTY_FEATURES_SOLAR_HOT_WATER = 'SolarHotWater';
    const PROPERTY_FEATURES_SOLAR_PANELS = 'SolarPanels';
    const LISTING_ATTRIBUTES_HAS_PHOTOS = 'HasPhotos';
    const LISTING_ATTRIBUTES_HAS_PRICE = 'HasPrice';
    const LISTING_ATTRIBUTES_NOT_UP_FOR_AUCTION = 'NotUpForAuction';
    const LISTING_ATTRIBUTES_NOT_UNDER_CONTRACT = 'NotUnderContract';
    const LISTING_ATTRIBUTES_MARKED_AS_NEW = 'MarkedAsNew';
    const PROPERTY_ESTABLISHED_TYPE_ANY = 'Any';
    const PROPERTY_ESTABLISHED_TYPE__NEW = 'New';
    const PROPERTY_ESTABLISHED_TYPE_ESTABLISHED = 'Established';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingTypeAllowableValues()
    {
        return [
            self::LISTING_TYPE_SALE,
            self::LISTING_TYPE_RENT,
            self::LISTING_TYPE_SHARE,
            self::LISTING_TYPE_SOLD,
            self::LISTING_TYPE_NEW_HOMES,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypesAllowableValues()
    {
        return [
            self::PROPERTY_TYPES_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPES_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPES_AQUACULTURE,
            self::PROPERTY_TYPES_BLOCK_OF_UNITS,
            self::PROPERTY_TYPES_CAR_SPACE,
            self::PROPERTY_TYPES_DAIRY_FARMING,
            self::PROPERTY_TYPES_DEVELOPMENT_SITE,
            self::PROPERTY_TYPES_DUPLEX,
            self::PROPERTY_TYPES_FARM,
            self::PROPERTY_TYPES_FISHING_FORESTRY,
            self::PROPERTY_TYPES_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPES_HOUSE,
            self::PROPERTY_TYPES_NEW_HOUSE_LAND,
            self::PROPERTY_TYPES_IRRIGATION_SERVICES,
            self::PROPERTY_TYPES_NEW_LAND,
            self::PROPERTY_TYPES_LIVESTOCK,
            self::PROPERTY_TYPES_NEW_APARTMENTS,
            self::PROPERTY_TYPES_PENTHOUSE,
            self::PROPERTY_TYPES_RETIREMENT_VILLAGE,
            self::PROPERTY_TYPES_RURAL,
            self::PROPERTY_TYPES_SEMI_DETACHED,
            self::PROPERTY_TYPES_SPECIALIST_FARM,
            self::PROPERTY_TYPES_STUDIO,
            self::PROPERTY_TYPES_TERRACE,
            self::PROPERTY_TYPES_TOWNHOUSE,
            self::PROPERTY_TYPES_VACANT_LAND,
            self::PROPERTY_TYPES_VILLA,
            self::PROPERTY_TYPES_CROPPING,
            self::PROPERTY_TYPES_VITICULTURE,
            self::PROPERTY_TYPES_MIXED_FARMING,
            self::PROPERTY_TYPES_GRAZING,
            self::PROPERTY_TYPES_HORTICULTURE,
            self::PROPERTY_TYPES_EQUINE,
            self::PROPERTY_TYPES_FARMLET,
            self::PROPERTY_TYPES_ORCHARD,
            self::PROPERTY_TYPES_RURAL_LIFESTYLE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyFeaturesAllowableValues()
    {
        return [
            self::PROPERTY_FEATURES_AIR_CONDITIONING,
            self::PROPERTY_FEATURES_BUILT_IN_WARDROBES,
            self::PROPERTY_FEATURES_CABLE_OR_SATELLITE,
            self::PROPERTY_FEATURES_ENSUITE,
            self::PROPERTY_FEATURES_FLOORBOARDS,
            self::PROPERTY_FEATURES_GAS,
            self::PROPERTY_FEATURES_INTERNAL_LAUNDRY,
            self::PROPERTY_FEATURES_PETS_ALLOWED,
            self::PROPERTY_FEATURES_SECURE_PARKING,
            self::PROPERTY_FEATURES_SWIMMING_POOL,
            self::PROPERTY_FEATURES_FURNISHED,
            self::PROPERTY_FEATURES_GROUND_FLOOR,
            self::PROPERTY_FEATURES_WATER_VIEWS,
            self::PROPERTY_FEATURES_NORTH_FACING,
            self::PROPERTY_FEATURES_CITY_VIEWS,
            self::PROPERTY_FEATURES_INDOOR_SPA,
            self::PROPERTY_FEATURES_GYM,
            self::PROPERTY_FEATURES_ALARM_SYSTEM,
            self::PROPERTY_FEATURES_INTERCOM,
            self::PROPERTY_FEATURES_BROADBAND_INTERNET_ACCESS,
            self::PROPERTY_FEATURES_BATH,
            self::PROPERTY_FEATURES_FIREPLACE,
            self::PROPERTY_FEATURES_SEPARATE_DINING_ROOM,
            self::PROPERTY_FEATURES_HEATING,
            self::PROPERTY_FEATURES_DISHWASHER,
            self::PROPERTY_FEATURES_STUDY,
            self::PROPERTY_FEATURES_TENNIS_COURT,
            self::PROPERTY_FEATURES_SHED,
            self::PROPERTY_FEATURES_FULLY_FENCED,
            self::PROPERTY_FEATURES_BALCONY_DECK,
            self::PROPERTY_FEATURES_GARDEN_COURTYARD,
            self::PROPERTY_FEATURES_OUTDOOR_SPA,
            self::PROPERTY_FEATURES_DOUBLE_GLAZED_WINDOWS,
            self::PROPERTY_FEATURES_ENERGY_EFFICIENT_APPLIANCES,
            self::PROPERTY_FEATURES_WATER_EFFICIENT_APPLIANCES,
            self::PROPERTY_FEATURES_WALL_CEILING_INSULATION,
            self::PROPERTY_FEATURES_RAINWATER_STORAGE_TANK,
            self::PROPERTY_FEATURES_GREYWATER_SYSTEM,
            self::PROPERTY_FEATURES_WATER_EFFICIENT_FIXTURES,
            self::PROPERTY_FEATURES_SOLAR_HOT_WATER,
            self::PROPERTY_FEATURES_SOLAR_PANELS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingAttributesAllowableValues()
    {
        return [
            self::LISTING_ATTRIBUTES_HAS_PHOTOS,
            self::LISTING_ATTRIBUTES_HAS_PRICE,
            self::LISTING_ATTRIBUTES_NOT_UP_FOR_AUCTION,
            self::LISTING_ATTRIBUTES_NOT_UNDER_CONTRACT,
            self::LISTING_ATTRIBUTES_MARKED_AS_NEW,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyEstablishedTypeAllowableValues()
    {
        return [
            self::PROPERTY_ESTABLISHED_TYPE_ANY,
            self::PROPERTY_ESTABLISHED_TYPE__NEW,
            self::PROPERTY_ESTABLISHED_TYPE_ESTABLISHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_type'] = isset($data['listing_type']) ? $data['listing_type'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['property_features'] = isset($data['property_features']) ? $data['property_features'] : null;
        $this->container['listing_attributes'] = isset($data['listing_attributes']) ? $data['listing_attributes'] : null;
        $this->container['property_established_type'] = isset($data['property_established_type']) ? $data['property_established_type'] : null;
        $this->container['min_bedrooms'] = isset($data['min_bedrooms']) ? $data['min_bedrooms'] : null;
        $this->container['max_bedrooms'] = isset($data['max_bedrooms']) ? $data['max_bedrooms'] : null;
        $this->container['min_bathrooms'] = isset($data['min_bathrooms']) ? $data['min_bathrooms'] : null;
        $this->container['max_bathrooms'] = isset($data['max_bathrooms']) ? $data['max_bathrooms'] : null;
        $this->container['min_carspaces'] = isset($data['min_carspaces']) ? $data['min_carspaces'] : null;
        $this->container['max_carspaces'] = isset($data['max_carspaces']) ? $data['max_carspaces'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['min_land_area'] = isset($data['min_land_area']) ? $data['min_land_area'] : null;
        $this->container['max_land_area'] = isset($data['max_land_area']) ? $data['max_land_area'] : null;
        $this->container['advertiser_ids'] = isset($data['advertiser_ids']) ? $data['advertiser_ids'] : null;
        $this->container['ad_ids'] = isset($data['ad_ids']) ? $data['ad_ids'] : null;
        $this->container['exclude_ad_ids'] = isset($data['exclude_ad_ids']) ? $data['exclude_ad_ids'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['school_catchments'] = isset($data['school_catchments']) ? $data['school_catchments'] : null;
        $this->container['location_terms'] = isset($data['location_terms']) ? $data['location_terms'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['new_dev_only'] = isset($data['new_dev_only']) ? $data['new_dev_only'] : null;
        $this->container['inspection_from'] = isset($data['inspection_from']) ? $data['inspection_from'] : null;
        $this->container['inspection_to'] = isset($data['inspection_to']) ? $data['inspection_to'] : null;
        $this->container['auction_from'] = isset($data['auction_from']) ? $data['auction_from'] : null;
        $this->container['auction_to'] = isset($data['auction_to']) ? $data['auction_to'] : null;
        $this->container['date_available_from'] = isset($data['date_available_from']) ? $data['date_available_from'] : null;
        $this->container['date_available_to'] = isset($data['date_available_to']) ? $data['date_available_to'] : null;
        $this->container['rural_only'] = isset($data['rural_only']) ? $data['rural_only'] : null;
        $this->container['exclude_price_withheld'] = isset($data['exclude_price_withheld']) ? $data['exclude_price_withheld'] : null;
        $this->container['exclude_deposit_taken'] = isset($data['exclude_deposit_taken']) ? $data['exclude_deposit_taken'] : null;
        $this->container['topspot_keywords'] = isset($data['topspot_keywords']) ? $data['topspot_keywords'] : null;
        $this->container['custom_sort'] = isset($data['custom_sort']) ? $data['custom_sort'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['geo_window'] = isset($data['geo_window']) ? $data['geo_window'] : null;
        $this->container['updated_since'] = isset($data['updated_since']) ? $data['updated_since'] : null;
        $this->container['listed_since'] = isset($data['listed_since']) ? $data['listed_since'] : null;
        $this->container['include_inspection_aggregations'] = isset($data['include_inspection_aggregations']) ? $data['include_inspection_aggregations'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getListingTypeAllowableValues();
        if (!is_null($this->container['listing_type']) && !in_array($this->container['listing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'listing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPropertyEstablishedTypeAllowableValues();
        if (!is_null($this->container['property_established_type']) && !in_array($this->container['property_established_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'property_established_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_type
     *
     * @return string
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param string $listing_type listing_type
     *
     * @return $this
     */
    public function setListingType($listing_type)
    {
        $allowedValues = $this->getListingTypeAllowableValues();
        if (!is_null($listing_type) && !in_array($listing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'listing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return string[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param string[] $property_types property_types
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $allowedValues = $this->getPropertyTypesAllowableValues();
        if (!is_null($property_types) && array_diff($property_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets property_features
     *
     * @return string[]
     */
    public function getPropertyFeatures()
    {
        return $this->container['property_features'];
    }

    /**
     * Sets property_features
     *
     * @param string[] $property_features property_features
     *
     * @return $this
     */
    public function setPropertyFeatures($property_features)
    {
        $allowedValues = $this->getPropertyFeaturesAllowableValues();
        if (!is_null($property_features) && array_diff($property_features, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_features', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_features'] = $property_features;

        return $this;
    }

    /**
     * Gets listing_attributes
     *
     * @return string[]
     */
    public function getListingAttributes()
    {
        return $this->container['listing_attributes'];
    }

    /**
     * Sets listing_attributes
     *
     * @param string[] $listing_attributes listing_attributes
     *
     * @return $this
     */
    public function setListingAttributes($listing_attributes)
    {
        $allowedValues = $this->getListingAttributesAllowableValues();
        if (!is_null($listing_attributes) && array_diff($listing_attributes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'listing_attributes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_attributes'] = $listing_attributes;

        return $this;
    }

    /**
     * Gets property_established_type
     *
     * @return string
     */
    public function getPropertyEstablishedType()
    {
        return $this->container['property_established_type'];
    }

    /**
     * Sets property_established_type
     *
     * @param string $property_established_type property_established_type
     *
     * @return $this
     */
    public function setPropertyEstablishedType($property_established_type)
    {
        $allowedValues = $this->getPropertyEstablishedTypeAllowableValues();
        if (!is_null($property_established_type) && !in_array($property_established_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_established_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_established_type'] = $property_established_type;

        return $this;
    }

    /**
     * Gets min_bedrooms
     *
     * @return float
     */
    public function getMinBedrooms()
    {
        return $this->container['min_bedrooms'];
    }

    /**
     * Sets min_bedrooms
     *
     * @param float $min_bedrooms min_bedrooms
     *
     * @return $this
     */
    public function setMinBedrooms($min_bedrooms)
    {
        $this->container['min_bedrooms'] = $min_bedrooms;

        return $this;
    }

    /**
     * Gets max_bedrooms
     *
     * @return float
     */
    public function getMaxBedrooms()
    {
        return $this->container['max_bedrooms'];
    }

    /**
     * Sets max_bedrooms
     *
     * @param float $max_bedrooms max_bedrooms
     *
     * @return $this
     */
    public function setMaxBedrooms($max_bedrooms)
    {
        $this->container['max_bedrooms'] = $max_bedrooms;

        return $this;
    }

    /**
     * Gets min_bathrooms
     *
     * @return float
     */
    public function getMinBathrooms()
    {
        return $this->container['min_bathrooms'];
    }

    /**
     * Sets min_bathrooms
     *
     * @param float $min_bathrooms min_bathrooms
     *
     * @return $this
     */
    public function setMinBathrooms($min_bathrooms)
    {
        $this->container['min_bathrooms'] = $min_bathrooms;

        return $this;
    }

    /**
     * Gets max_bathrooms
     *
     * @return float
     */
    public function getMaxBathrooms()
    {
        return $this->container['max_bathrooms'];
    }

    /**
     * Sets max_bathrooms
     *
     * @param float $max_bathrooms max_bathrooms
     *
     * @return $this
     */
    public function setMaxBathrooms($max_bathrooms)
    {
        $this->container['max_bathrooms'] = $max_bathrooms;

        return $this;
    }

    /**
     * Gets min_carspaces
     *
     * @return int
     */
    public function getMinCarspaces()
    {
        return $this->container['min_carspaces'];
    }

    /**
     * Sets min_carspaces
     *
     * @param int $min_carspaces min_carspaces
     *
     * @return $this
     */
    public function setMinCarspaces($min_carspaces)
    {
        $this->container['min_carspaces'] = $min_carspaces;

        return $this;
    }

    /**
     * Gets max_carspaces
     *
     * @return int
     */
    public function getMaxCarspaces()
    {
        return $this->container['max_carspaces'];
    }

    /**
     * Sets max_carspaces
     *
     * @param int $max_carspaces max_carspaces
     *
     * @return $this
     */
    public function setMaxCarspaces($max_carspaces)
    {
        $this->container['max_carspaces'] = $max_carspaces;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return int
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param int $min_price min_price
     *
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return int
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param int $max_price max_price
     *
     * @return $this
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets min_land_area
     *
     * @return int
     */
    public function getMinLandArea()
    {
        return $this->container['min_land_area'];
    }

    /**
     * Sets min_land_area
     *
     * @param int $min_land_area min_land_area
     *
     * @return $this
     */
    public function setMinLandArea($min_land_area)
    {
        $this->container['min_land_area'] = $min_land_area;

        return $this;
    }

    /**
     * Gets max_land_area
     *
     * @return int
     */
    public function getMaxLandArea()
    {
        return $this->container['max_land_area'];
    }

    /**
     * Sets max_land_area
     *
     * @param int $max_land_area max_land_area
     *
     * @return $this
     */
    public function setMaxLandArea($max_land_area)
    {
        $this->container['max_land_area'] = $max_land_area;

        return $this;
    }

    /**
     * Gets advertiser_ids
     *
     * @return int[]
     */
    public function getAdvertiserIds()
    {
        return $this->container['advertiser_ids'];
    }

    /**
     * Sets advertiser_ids
     *
     * @param int[] $advertiser_ids advertiser_ids
     *
     * @return $this
     */
    public function setAdvertiserIds($advertiser_ids)
    {
        $this->container['advertiser_ids'] = $advertiser_ids;

        return $this;
    }

    /**
     * Gets ad_ids
     *
     * @return int[]
     */
    public function getAdIds()
    {
        return $this->container['ad_ids'];
    }

    /**
     * Sets ad_ids
     *
     * @param int[] $ad_ids ad_ids
     *
     * @return $this
     */
    public function setAdIds($ad_ids)
    {
        $this->container['ad_ids'] = $ad_ids;

        return $this;
    }

    /**
     * Gets exclude_ad_ids
     *
     * @return int[]
     */
    public function getExcludeAdIds()
    {
        return $this->container['exclude_ad_ids'];
    }

    /**
     * Sets exclude_ad_ids
     *
     * @param int[] $exclude_ad_ids exclude_ad_ids
     *
     * @return $this
     */
    public function setExcludeAdIds($exclude_ad_ids)
    {
        $this->container['exclude_ad_ids'] = $exclude_ad_ids;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation[] $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets school_catchments
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[]
     */
    public function getSchoolCatchments()
    {
        return $this->container['school_catchments'];
    }

    /**
     * Sets school_catchments
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment[] $school_catchments school_catchments
     *
     * @return $this
     */
    public function setSchoolCatchments($school_catchments)
    {
        $this->container['school_catchments'] = $school_catchments;

        return $this;
    }

    /**
     * Gets location_terms
     *
     * @return string
     */
    public function getLocationTerms()
    {
        return $this->container['location_terms'];
    }

    /**
     * Sets location_terms
     *
     * @param string $location_terms location_terms
     *
     * @return $this
     */
    public function setLocationTerms($location_terms)
    {
        $this->container['location_terms'] = $location_terms;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[] $keywords keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets new_dev_only
     *
     * @return bool
     */
    public function getNewDevOnly()
    {
        return $this->container['new_dev_only'];
    }

    /**
     * Sets new_dev_only
     *
     * @param bool $new_dev_only new_dev_only
     *
     * @return $this
     */
    public function setNewDevOnly($new_dev_only)
    {
        $this->container['new_dev_only'] = $new_dev_only;

        return $this;
    }

    /**
     * Gets inspection_from
     *
     * @return \DateTime
     */
    public function getInspectionFrom()
    {
        return $this->container['inspection_from'];
    }

    /**
     * Sets inspection_from
     *
     * @param \DateTime $inspection_from inspection_from
     *
     * @return $this
     */
    public function setInspectionFrom($inspection_from)
    {
        $this->container['inspection_from'] = $inspection_from;

        return $this;
    }

    /**
     * Gets inspection_to
     *
     * @return \DateTime
     */
    public function getInspectionTo()
    {
        return $this->container['inspection_to'];
    }

    /**
     * Sets inspection_to
     *
     * @param \DateTime $inspection_to inspection_to
     *
     * @return $this
     */
    public function setInspectionTo($inspection_to)
    {
        $this->container['inspection_to'] = $inspection_to;

        return $this;
    }

    /**
     * Gets auction_from
     *
     * @return \DateTime
     */
    public function getAuctionFrom()
    {
        return $this->container['auction_from'];
    }

    /**
     * Sets auction_from
     *
     * @param \DateTime $auction_from auction_from
     *
     * @return $this
     */
    public function setAuctionFrom($auction_from)
    {
        $this->container['auction_from'] = $auction_from;

        return $this;
    }

    /**
     * Gets auction_to
     *
     * @return \DateTime
     */
    public function getAuctionTo()
    {
        return $this->container['auction_to'];
    }

    /**
     * Sets auction_to
     *
     * @param \DateTime $auction_to auction_to
     *
     * @return $this
     */
    public function setAuctionTo($auction_to)
    {
        $this->container['auction_to'] = $auction_to;

        return $this;
    }

    /**
     * Gets date_available_from
     *
     * @return \DateTime
     */
    public function getDateAvailableFrom()
    {
        return $this->container['date_available_from'];
    }

    /**
     * Sets date_available_from
     *
     * @param \DateTime $date_available_from date_available_from
     *
     * @return $this
     */
    public function setDateAvailableFrom($date_available_from)
    {
        $this->container['date_available_from'] = $date_available_from;

        return $this;
    }

    /**
     * Gets date_available_to
     *
     * @return \DateTime
     */
    public function getDateAvailableTo()
    {
        return $this->container['date_available_to'];
    }

    /**
     * Sets date_available_to
     *
     * @param \DateTime $date_available_to date_available_to
     *
     * @return $this
     */
    public function setDateAvailableTo($date_available_to)
    {
        $this->container['date_available_to'] = $date_available_to;

        return $this;
    }

    /**
     * Gets rural_only
     *
     * @return bool
     */
    public function getRuralOnly()
    {
        return $this->container['rural_only'];
    }

    /**
     * Sets rural_only
     *
     * @param bool $rural_only rural_only
     *
     * @return $this
     */
    public function setRuralOnly($rural_only)
    {
        $this->container['rural_only'] = $rural_only;

        return $this;
    }

    /**
     * Gets exclude_price_withheld
     *
     * @return bool
     */
    public function getExcludePriceWithheld()
    {
        return $this->container['exclude_price_withheld'];
    }

    /**
     * Sets exclude_price_withheld
     *
     * @param bool $exclude_price_withheld exclude_price_withheld
     *
     * @return $this
     */
    public function setExcludePriceWithheld($exclude_price_withheld)
    {
        $this->container['exclude_price_withheld'] = $exclude_price_withheld;

        return $this;
    }

    /**
     * Gets exclude_deposit_taken
     *
     * @return bool
     */
    public function getExcludeDepositTaken()
    {
        return $this->container['exclude_deposit_taken'];
    }

    /**
     * Sets exclude_deposit_taken
     *
     * @param bool $exclude_deposit_taken exclude_deposit_taken
     *
     * @return $this
     */
    public function setExcludeDepositTaken($exclude_deposit_taken)
    {
        $this->container['exclude_deposit_taken'] = $exclude_deposit_taken;

        return $this;
    }

    /**
     * Gets topspot_keywords
     *
     * @return string[]
     */
    public function getTopspotKeywords()
    {
        return $this->container['topspot_keywords'];
    }

    /**
     * Sets topspot_keywords
     *
     * @param string[] $topspot_keywords topspot_keywords
     *
     * @return $this
     */
    public function setTopspotKeywords($topspot_keywords)
    {
        $this->container['topspot_keywords'] = $topspot_keywords;

        return $this;
    }

    /**
     * Gets custom_sort
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
     */
    public function getCustomSort()
    {
        return $this->container['custom_sort'];
    }

    /**
     * Sets custom_sort
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort $custom_sort custom_sort
     *
     * @return $this
     */
    public function setCustomSort($custom_sort)
    {
        $this->container['custom_sort'] = $custom_sort;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets geo_window
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
     */
    public function getGeoWindow()
    {
        return $this->container['geo_window'];
    }

    /**
     * Sets geo_window
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow $geo_window geo_window
     *
     * @return $this
     */
    public function setGeoWindow($geo_window)
    {
        $this->container['geo_window'] = $geo_window;

        return $this;
    }

    /**
     * Gets updated_since
     *
     * @return \DateTime
     */
    public function getUpdatedSince()
    {
        return $this->container['updated_since'];
    }

    /**
     * Sets updated_since
     *
     * @param \DateTime $updated_since updated_since
     *
     * @return $this
     */
    public function setUpdatedSince($updated_since)
    {
        $this->container['updated_since'] = $updated_since;

        return $this;
    }

    /**
     * Gets listed_since
     *
     * @return \DateTime
     */
    public function getListedSince()
    {
        return $this->container['listed_since'];
    }

    /**
     * Sets listed_since
     *
     * @param \DateTime $listed_since listed_since
     *
     * @return $this
     */
    public function setListedSince($listed_since)
    {
        $this->container['listed_since'] = $listed_since;

        return $this;
    }

    /**
     * Gets include_inspection_aggregations
     *
     * @return bool
     */
    public function getIncludeInspectionAggregations()
    {
        return $this->container['include_inspection_aggregations'];
    }

    /**
     * Sets include_inspection_aggregations
     *
     * @param bool $include_inspection_aggregations include_inspection_aggregations
     *
     * @return $this
     */
    public function setIncludeInspectionAggregations($include_inspection_aggregations)
    {
        $this->container['include_inspection_aggregations'] = $include_inspection_aggregations;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
