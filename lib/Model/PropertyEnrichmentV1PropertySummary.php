<?php
/**
 * PropertyEnrichmentV1PropertySummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyEnrichmentV1PropertySummary Class Doc Comment
 *
 * @category Class
 * @description Property summary
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyEnrichmentV1PropertySummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Property.Enrichment.v1.PropertySummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_type' => 'string',
        'bedrooms' => 'float',
        'bathrooms' => 'float',
        'car_spaces' => 'float',
        'land_size' => 'float',
        'building_size' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_type' => null,
        'bedrooms' => null,
        'bathrooms' => null,
        'car_spaces' => null,
        'land_size' => null,
        'building_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_type' => 'propertyType',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'car_spaces' => 'carSpaces',
        'land_size' => 'landSize',
        'building_size' => 'buildingSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_type' => 'setPropertyType',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'car_spaces' => 'setCarSpaces',
        'land_size' => 'setLandSize',
        'building_size' => 'setBuildingSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_type' => 'getPropertyType',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'car_spaces' => 'getCarSpaces',
        'land_size' => 'getLandSize',
        'building_size' => 'getBuildingSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['car_spaces'] = isset($data['car_spaces']) ? $data['car_spaces'] : null;
        $this->container['land_size'] = isset($data['land_size']) ? $data['land_size'] : null;
        $this->container['building_size'] = isset($data['building_size']) ? $data['building_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type property_type
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return float
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param float $bedrooms bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float $bathrooms bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets car_spaces
     *
     * @return float
     */
    public function getCarSpaces()
    {
        return $this->container['car_spaces'];
    }

    /**
     * Sets car_spaces
     *
     * @param float $car_spaces car_spaces
     *
     * @return $this
     */
    public function setCarSpaces($car_spaces)
    {
        $this->container['car_spaces'] = $car_spaces;

        return $this;
    }

    /**
     * Gets land_size
     *
     * @return float
     */
    public function getLandSize()
    {
        return $this->container['land_size'];
    }

    /**
     * Sets land_size
     *
     * @param float $land_size land_size
     *
     * @return $this
     */
    public function setLandSize($land_size)
    {
        $this->container['land_size'] = $land_size;

        return $this;
    }

    /**
     * Gets building_size
     *
     * @return float
     */
    public function getBuildingSize()
    {
        return $this->container['building_size'];
    }

    /**
     * Sets building_size
     *
     * @param float $building_size building_size
     *
     * @return $this
     */
    public function setBuildingSize($building_size)
    {
        $this->container['building_size'] = $building_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
