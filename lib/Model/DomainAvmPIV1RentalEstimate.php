<?php
/**
 * DomainAvmPIV1RentalEstimate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainAvmPIV1RentalEstimate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainAvmPIV1RentalEstimate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainAvm.PI.v1.RentalEstimate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'weekly_rent_estimate' => 'int',
        'percent_yield_rent_estimate' => 'double',
        'rental_fsd' => 'double',
        'estimate_date' => 'string',
        'property_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'weekly_rent_estimate' => 'int32',
        'percent_yield_rent_estimate' => 'double',
        'rental_fsd' => 'double',
        'estimate_date' => null,
        'property_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weekly_rent_estimate' => 'weeklyRentEstimate',
        'percent_yield_rent_estimate' => 'percentYieldRentEstimate',
        'rental_fsd' => 'rentalFsd',
        'estimate_date' => 'estimateDate',
        'property_type' => 'propertyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weekly_rent_estimate' => 'setWeeklyRentEstimate',
        'percent_yield_rent_estimate' => 'setPercentYieldRentEstimate',
        'rental_fsd' => 'setRentalFsd',
        'estimate_date' => 'setEstimateDate',
        'property_type' => 'setPropertyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weekly_rent_estimate' => 'getWeeklyRentEstimate',
        'percent_yield_rent_estimate' => 'getPercentYieldRentEstimate',
        'rental_fsd' => 'getRentalFsd',
        'estimate_date' => 'getEstimateDate',
        'property_type' => 'getPropertyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weekly_rent_estimate'] = isset($data['weekly_rent_estimate']) ? $data['weekly_rent_estimate'] : null;
        $this->container['percent_yield_rent_estimate'] = isset($data['percent_yield_rent_estimate']) ? $data['percent_yield_rent_estimate'] : null;
        $this->container['rental_fsd'] = isset($data['rental_fsd']) ? $data['rental_fsd'] : null;
        $this->container['estimate_date'] = isset($data['estimate_date']) ? $data['estimate_date'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weekly_rent_estimate
     *
     * @return int
     */
    public function getWeeklyRentEstimate()
    {
        return $this->container['weekly_rent_estimate'];
    }

    /**
     * Sets weekly_rent_estimate
     *
     * @param int $weekly_rent_estimate weekly_rent_estimate
     *
     * @return $this
     */
    public function setWeeklyRentEstimate($weekly_rent_estimate)
    {
        $this->container['weekly_rent_estimate'] = $weekly_rent_estimate;

        return $this;
    }

    /**
     * Gets percent_yield_rent_estimate
     *
     * @return double
     */
    public function getPercentYieldRentEstimate()
    {
        return $this->container['percent_yield_rent_estimate'];
    }

    /**
     * Sets percent_yield_rent_estimate
     *
     * @param double $percent_yield_rent_estimate percent_yield_rent_estimate
     *
     * @return $this
     */
    public function setPercentYieldRentEstimate($percent_yield_rent_estimate)
    {
        $this->container['percent_yield_rent_estimate'] = $percent_yield_rent_estimate;

        return $this;
    }

    /**
     * Gets rental_fsd
     *
     * @return double
     */
    public function getRentalFsd()
    {
        return $this->container['rental_fsd'];
    }

    /**
     * Sets rental_fsd
     *
     * @param double $rental_fsd rental_fsd
     *
     * @return $this
     */
    public function setRentalFsd($rental_fsd)
    {
        $this->container['rental_fsd'] = $rental_fsd;

        return $this;
    }

    /**
     * Gets estimate_date
     *
     * @return string
     */
    public function getEstimateDate()
    {
        return $this->container['estimate_date'];
    }

    /**
     * Sets estimate_date
     *
     * @param string $estimate_date estimate_date
     *
     * @return $this
     */
    public function setEstimateDate($estimate_date)
    {
        $this->container['estimate_date'] = $estimate_date;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type property_type
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
