<?php
/**
 * AuthoritiesV1MarketingCampaignRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuthoritiesV1MarketingCampaignRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthoritiesV1MarketingCampaignRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Authorities.v1.MarketingCampaignRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advertising' => 'string',
        'campaign_type' => 'string',
        'marketing_campaign_items' => '\Swagger\Client\Model\AuthoritiesV1MarketingCampaignItemRequest[]',
        'comments' => 'string',
        'comments_fallback' => 'string',
        'discount_amount' => 'string',
        'discount_percent' => 'string',
        'expense' => 'string',
        'other' => 'string',
        'payable_on' => '\DateTime',
        'total' => 'string',
        'realhub_quote_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advertising' => 'decimal',
        'campaign_type' => null,
        'marketing_campaign_items' => null,
        'comments' => 'json',
        'comments_fallback' => null,
        'discount_amount' => 'decimal',
        'discount_percent' => 'decimal',
        'expense' => null,
        'other' => 'decimal',
        'payable_on' => 'date',
        'total' => 'decimal',
        'realhub_quote_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertising' => 'advertising',
        'campaign_type' => 'campaignType',
        'marketing_campaign_items' => 'marketingCampaignItems',
        'comments' => 'comments',
        'comments_fallback' => 'commentsFallback',
        'discount_amount' => 'discountAmount',
        'discount_percent' => 'discountPercent',
        'expense' => 'expense',
        'other' => 'other',
        'payable_on' => 'payableOn',
        'total' => 'total',
        'realhub_quote_id' => 'realhubQuoteId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertising' => 'setAdvertising',
        'campaign_type' => 'setCampaignType',
        'marketing_campaign_items' => 'setMarketingCampaignItems',
        'comments' => 'setComments',
        'comments_fallback' => 'setCommentsFallback',
        'discount_amount' => 'setDiscountAmount',
        'discount_percent' => 'setDiscountPercent',
        'expense' => 'setExpense',
        'other' => 'setOther',
        'payable_on' => 'setPayableOn',
        'total' => 'setTotal',
        'realhub_quote_id' => 'setRealhubQuoteId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertising' => 'getAdvertising',
        'campaign_type' => 'getCampaignType',
        'marketing_campaign_items' => 'getMarketingCampaignItems',
        'comments' => 'getComments',
        'comments_fallback' => 'getCommentsFallback',
        'discount_amount' => 'getDiscountAmount',
        'discount_percent' => 'getDiscountPercent',
        'expense' => 'getExpense',
        'other' => 'getOther',
        'payable_on' => 'getPayableOn',
        'total' => 'getTotal',
        'realhub_quote_id' => 'getRealhubQuoteId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertising'] = isset($data['advertising']) ? $data['advertising'] : null;
        $this->container['campaign_type'] = isset($data['campaign_type']) ? $data['campaign_type'] : null;
        $this->container['marketing_campaign_items'] = isset($data['marketing_campaign_items']) ? $data['marketing_campaign_items'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['comments_fallback'] = isset($data['comments_fallback']) ? $data['comments_fallback'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['expense'] = isset($data['expense']) ? $data['expense'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
        $this->container['payable_on'] = isset($data['payable_on']) ? $data['payable_on'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['realhub_quote_id'] = isset($data['realhub_quote_id']) ? $data['realhub_quote_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['campaign_type'] === null) {
            $invalidProperties[] = "'campaign_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertising
     *
     * @return string
     */
    public function getAdvertising()
    {
        return $this->container['advertising'];
    }

    /**
     * Sets advertising
     *
     * @param string $advertising advertising cost of this marketing campaign
     *
     * @return $this
     */
    public function setAdvertising($advertising)
    {
        $this->container['advertising'] = $advertising;

        return $this;
    }

    /**
     * Gets campaign_type
     *
     * @return string
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param string $campaign_type Available options are: `To Be Advised`, `Paper Based`, `Campaign Track`, `Realhub`
     *
     * @return $this
     */
    public function setCampaignType($campaign_type)
    {
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets marketing_campaign_items
     *
     * @return \Swagger\Client\Model\AuthoritiesV1MarketingCampaignItemRequest[]
     */
    public function getMarketingCampaignItems()
    {
        return $this->container['marketing_campaign_items'];
    }

    /**
     * Sets marketing_campaign_items
     *
     * @param \Swagger\Client\Model\AuthoritiesV1MarketingCampaignItemRequest[] $marketing_campaign_items marketing_campaign_items
     *
     * @return $this
     */
    public function setMarketingCampaignItems($marketing_campaign_items)
    {
        $this->container['marketing_campaign_items'] = $marketing_campaign_items;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets comments_fallback
     *
     * @return string
     */
    public function getCommentsFallback()
    {
        return $this->container['comments_fallback'];
    }

    /**
     * Sets comments_fallback
     *
     * @param string $comments_fallback comments_fallback
     *
     * @return $this
     */
    public function setCommentsFallback($comments_fallback)
    {
        $this->container['comments_fallback'] = $comments_fallback;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return string
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param string $discount_amount discount_amount
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return string
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param string $discount_percent discount_percent
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets expense
     *
     * @return string
     */
    public function getExpense()
    {
        return $this->container['expense'];
    }

    /**
     * Sets expense
     *
     * @param string $expense Available options are: `Signing of this Authority`, `Written request`, `Specific Date`, `Signing of this Form 6`, `Signing of this Agency Agreement`, `Upon Invoice or Account`, `Prior to the commencement of marketing campaign`, `On Settlement or Withdrawal whichever occurs first`, `Vendor to pay through Campaign Agent v2`, `Vendor to pay through Market Now`, `Vendor to pay through Rello`, `Vendor to pay through List Ready`
     *
     * @return $this
     */
    public function setExpense($expense)
    {
        $this->container['expense'] = $expense;

        return $this;
    }

    /**
     * Gets other
     *
     * @return string
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param string $other other
     *
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets payable_on
     *
     * @return \DateTime
     */
    public function getPayableOn()
    {
        return $this->container['payable_on'];
    }

    /**
     * Sets payable_on
     *
     * @param \DateTime $payable_on payable_on
     *
     * @return $this
     */
    public function setPayableOn($payable_on)
    {
        $this->container['payable_on'] = $payable_on;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total cost of this marketing campaign. Total of the items cost if there are items or (advertising + other) cost for other types
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets realhub_quote_id
     *
     * @return string
     */
    public function getRealhubQuoteId()
    {
        return $this->container['realhub_quote_id'];
    }

    /**
     * Sets realhub_quote_id
     *
     * @param string $realhub_quote_id realhub_quote_id
     *
     * @return $this
     */
    public function setRealhubQuoteId($realhub_quote_id)
    {
        $this->container['realhub_quote_id'] = $realhub_quote_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
