<?php
/**
 * AuthoritiesV1VendorRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuthoritiesV1VendorRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthoritiesV1VendorRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Authorities.v1.VendorRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'contact' => '\Swagger\Client\Model\AuthoritiesV1IndividualRequest',
        'contact_represented' => '\Swagger\Client\Model\AuthoritiesV1CompanyRequest',
        'concierge_opted_in' => 'bool',
        'nature' => 'string',
        'trust' => 'string',
        'order' => 'int',
        'authority_attachments' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'contact' => null,
        'contact_represented' => null,
        'concierge_opted_in' => null,
        'nature' => null,
        'trust' => null,
        'order' => null,
        'authority_attachments' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact' => 'contact',
        'contact_represented' => 'contactRepresented',
        'concierge_opted_in' => 'conciergeOptedIn',
        'nature' => 'nature',
        'trust' => 'trust',
        'order' => 'order',
        'authority_attachments' => 'authorityAttachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact' => 'setContact',
        'contact_represented' => 'setContactRepresented',
        'concierge_opted_in' => 'setConciergeOptedIn',
        'nature' => 'setNature',
        'trust' => 'setTrust',
        'order' => 'setOrder',
        'authority_attachments' => 'setAuthorityAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact' => 'getContact',
        'contact_represented' => 'getContactRepresented',
        'concierge_opted_in' => 'getConciergeOptedIn',
        'nature' => 'getNature',
        'trust' => 'getTrust',
        'order' => 'getOrder',
        'authority_attachments' => 'getAuthorityAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['contact_represented'] = isset($data['contact_represented']) ? $data['contact_represented'] : null;
        $this->container['concierge_opted_in'] = isset($data['concierge_opted_in']) ? $data['concierge_opted_in'] : null;
        $this->container['nature'] = isset($data['nature']) ? $data['nature'] : null;
        $this->container['trust'] = isset($data['trust']) ? $data['trust'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['authority_attachments'] = isset($data['authority_attachments']) ? $data['authority_attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if ($this->container['nature'] === null) {
            $invalidProperties[] = "'nature' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\AuthoritiesV1IndividualRequest
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\AuthoritiesV1IndividualRequest $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_represented
     *
     * @return \Swagger\Client\Model\AuthoritiesV1CompanyRequest
     */
    public function getContactRepresented()
    {
        return $this->container['contact_represented'];
    }

    /**
     * Sets contact_represented
     *
     * @param \Swagger\Client\Model\AuthoritiesV1CompanyRequest $contact_represented contact_represented
     *
     * @return $this
     */
    public function setContactRepresented($contact_represented)
    {
        $this->container['contact_represented'] = $contact_represented;

        return $this;
    }

    /**
     * Gets concierge_opted_in
     *
     * @return bool
     */
    public function getConciergeOptedIn()
    {
        return $this->container['concierge_opted_in'];
    }

    /**
     * Sets concierge_opted_in
     *
     * @param bool $concierge_opted_in concierge_opted_in
     *
     * @return $this
     */
    public function setConciergeOptedIn($concierge_opted_in)
    {
        $this->container['concierge_opted_in'] = $concierge_opted_in;

        return $this;
    }

    /**
     * Gets nature
     *
     * @return string
     */
    public function getNature()
    {
        return $this->container['nature'];
    }

    /**
     * Sets nature
     *
     * @param string $nature nature
     *
     * @return $this
     */
    public function setNature($nature)
    {
        $this->container['nature'] = $nature;

        return $this;
    }

    /**
     * Gets trust
     *
     * @return string
     */
    public function getTrust()
    {
        return $this->container['trust'];
    }

    /**
     * Sets trust
     *
     * @param string $trust trust
     *
     * @return $this
     */
    public function setTrust($trust)
    {
        $this->container['trust'] = $trust;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets authority_attachments
     *
     * @return string[]
     */
    public function getAuthorityAttachments()
    {
        return $this->container['authority_attachments'];
    }

    /**
     * Sets authority_attachments
     *
     * @param string[] $authority_attachments An array of attachment IDs.
     *
     * @return $this
     */
    public function setAuthorityAttachments($authority_attachments)
    {
        $this->container['authority_attachments'] = $authority_attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
