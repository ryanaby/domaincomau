<?php
/**
 * PropertiesV1Property
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertiesV1Property Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesV1Property implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Properties.v1.Property';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cadastre_type' => 'string',
        'on_market_types' => 'string[]',
        'status' => 'string',
        'address' => 'string',
        'address_coordinate' => '\Swagger\Client\Model\PropertiesV1GeoCoordinate',
        'address_id' => 'int',
        'adverts' => '\Swagger\Client\Model\PropertiesV1Advert[]',
        'bathrooms' => 'int',
        'bedrooms' => 'int',
        'car_spaces' => 'int',
        'claim' => '\Swagger\Client\Model\PropertiesV1ClaimData',
        'condition' => 'string',
        'created' => '\DateTime',
        'ensuites' => 'int',
        'features' => 'string[]',
        'flat_number' => 'string',
        'history' => '\Swagger\Client\Model\PropertiesV1PropertyHistory',
        'id' => 'string',
        'improvements' => 'string',
        'internal_area' => 'int',
        'is_residential' => 'bool',
        'land_use' => 'string',
        'lot_number' => 'string',
        'photos' => '\Swagger\Client\Model\PropertiesV1Photo[]',
        'plan_number' => 'string',
        'postcode' => 'string',
        'property_category' => 'string',
        'property_category_id' => 'int',
        'property_type' => 'string',
        'property_type_id' => 'int',
        'rooms' => 'int',
        'section_number' => 'string',
        'state' => 'string',
        'storeys' => 'int',
        'street_address' => 'string',
        'street_name' => 'string',
        'street_number' => 'string',
        'street_type' => 'string',
        'street_type_long' => 'string',
        'suburb' => 'string',
        'suburb_id' => 'int',
        'title' => 'string',
        'updated' => '\DateTime',
        'url_slug' => 'string',
        'url_slug_short' => 'string',
        'zone' => 'string',
        'gnaf_ids' => '\Swagger\Client\Model\PropertiesV1GnafId[]',
        'area_size' => 'int',
        'canonical_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cadastre_type' => null,
        'on_market_types' => null,
        'status' => null,
        'address' => null,
        'address_coordinate' => null,
        'address_id' => 'int32',
        'adverts' => null,
        'bathrooms' => 'int32',
        'bedrooms' => 'int32',
        'car_spaces' => 'int32',
        'claim' => null,
        'condition' => null,
        'created' => 'date-time',
        'ensuites' => 'int32',
        'features' => null,
        'flat_number' => null,
        'history' => null,
        'id' => null,
        'improvements' => null,
        'internal_area' => 'int32',
        'is_residential' => null,
        'land_use' => null,
        'lot_number' => null,
        'photos' => null,
        'plan_number' => null,
        'postcode' => null,
        'property_category' => null,
        'property_category_id' => 'int32',
        'property_type' => null,
        'property_type_id' => 'int32',
        'rooms' => 'int32',
        'section_number' => null,
        'state' => null,
        'storeys' => 'int32',
        'street_address' => null,
        'street_name' => null,
        'street_number' => null,
        'street_type' => null,
        'street_type_long' => null,
        'suburb' => null,
        'suburb_id' => 'int32',
        'title' => null,
        'updated' => 'date-time',
        'url_slug' => null,
        'url_slug_short' => null,
        'zone' => null,
        'gnaf_ids' => null,
        'area_size' => 'int32',
        'canonical_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cadastre_type' => 'cadastreType',
        'on_market_types' => 'onMarketTypes',
        'status' => 'status',
        'address' => 'address',
        'address_coordinate' => 'addressCoordinate',
        'address_id' => 'addressId',
        'adverts' => 'adverts',
        'bathrooms' => 'bathrooms',
        'bedrooms' => 'bedrooms',
        'car_spaces' => 'carSpaces',
        'claim' => 'claim',
        'condition' => 'condition',
        'created' => 'created',
        'ensuites' => 'ensuites',
        'features' => 'features',
        'flat_number' => 'flatNumber',
        'history' => 'history',
        'id' => 'id',
        'improvements' => 'improvements',
        'internal_area' => 'internalArea',
        'is_residential' => 'isResidential',
        'land_use' => 'landUse',
        'lot_number' => 'lotNumber',
        'photos' => 'photos',
        'plan_number' => 'planNumber',
        'postcode' => 'postcode',
        'property_category' => 'propertyCategory',
        'property_category_id' => 'propertyCategoryId',
        'property_type' => 'propertyType',
        'property_type_id' => 'propertyTypeId',
        'rooms' => 'rooms',
        'section_number' => 'sectionNumber',
        'state' => 'state',
        'storeys' => 'storeys',
        'street_address' => 'streetAddress',
        'street_name' => 'streetName',
        'street_number' => 'streetNumber',
        'street_type' => 'streetType',
        'street_type_long' => 'streetTypeLong',
        'suburb' => 'suburb',
        'suburb_id' => 'suburbId',
        'title' => 'title',
        'updated' => 'updated',
        'url_slug' => 'urlSlug',
        'url_slug_short' => 'urlSlugShort',
        'zone' => 'zone',
        'gnaf_ids' => 'gnafIds',
        'area_size' => 'areaSize',
        'canonical_url' => 'canonicalUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cadastre_type' => 'setCadastreType',
        'on_market_types' => 'setOnMarketTypes',
        'status' => 'setStatus',
        'address' => 'setAddress',
        'address_coordinate' => 'setAddressCoordinate',
        'address_id' => 'setAddressId',
        'adverts' => 'setAdverts',
        'bathrooms' => 'setBathrooms',
        'bedrooms' => 'setBedrooms',
        'car_spaces' => 'setCarSpaces',
        'claim' => 'setClaim',
        'condition' => 'setCondition',
        'created' => 'setCreated',
        'ensuites' => 'setEnsuites',
        'features' => 'setFeatures',
        'flat_number' => 'setFlatNumber',
        'history' => 'setHistory',
        'id' => 'setId',
        'improvements' => 'setImprovements',
        'internal_area' => 'setInternalArea',
        'is_residential' => 'setIsResidential',
        'land_use' => 'setLandUse',
        'lot_number' => 'setLotNumber',
        'photos' => 'setPhotos',
        'plan_number' => 'setPlanNumber',
        'postcode' => 'setPostcode',
        'property_category' => 'setPropertyCategory',
        'property_category_id' => 'setPropertyCategoryId',
        'property_type' => 'setPropertyType',
        'property_type_id' => 'setPropertyTypeId',
        'rooms' => 'setRooms',
        'section_number' => 'setSectionNumber',
        'state' => 'setState',
        'storeys' => 'setStoreys',
        'street_address' => 'setStreetAddress',
        'street_name' => 'setStreetName',
        'street_number' => 'setStreetNumber',
        'street_type' => 'setStreetType',
        'street_type_long' => 'setStreetTypeLong',
        'suburb' => 'setSuburb',
        'suburb_id' => 'setSuburbId',
        'title' => 'setTitle',
        'updated' => 'setUpdated',
        'url_slug' => 'setUrlSlug',
        'url_slug_short' => 'setUrlSlugShort',
        'zone' => 'setZone',
        'gnaf_ids' => 'setGnafIds',
        'area_size' => 'setAreaSize',
        'canonical_url' => 'setCanonicalUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cadastre_type' => 'getCadastreType',
        'on_market_types' => 'getOnMarketTypes',
        'status' => 'getStatus',
        'address' => 'getAddress',
        'address_coordinate' => 'getAddressCoordinate',
        'address_id' => 'getAddressId',
        'adverts' => 'getAdverts',
        'bathrooms' => 'getBathrooms',
        'bedrooms' => 'getBedrooms',
        'car_spaces' => 'getCarSpaces',
        'claim' => 'getClaim',
        'condition' => 'getCondition',
        'created' => 'getCreated',
        'ensuites' => 'getEnsuites',
        'features' => 'getFeatures',
        'flat_number' => 'getFlatNumber',
        'history' => 'getHistory',
        'id' => 'getId',
        'improvements' => 'getImprovements',
        'internal_area' => 'getInternalArea',
        'is_residential' => 'getIsResidential',
        'land_use' => 'getLandUse',
        'lot_number' => 'getLotNumber',
        'photos' => 'getPhotos',
        'plan_number' => 'getPlanNumber',
        'postcode' => 'getPostcode',
        'property_category' => 'getPropertyCategory',
        'property_category_id' => 'getPropertyCategoryId',
        'property_type' => 'getPropertyType',
        'property_type_id' => 'getPropertyTypeId',
        'rooms' => 'getRooms',
        'section_number' => 'getSectionNumber',
        'state' => 'getState',
        'storeys' => 'getStoreys',
        'street_address' => 'getStreetAddress',
        'street_name' => 'getStreetName',
        'street_number' => 'getStreetNumber',
        'street_type' => 'getStreetType',
        'street_type_long' => 'getStreetTypeLong',
        'suburb' => 'getSuburb',
        'suburb_id' => 'getSuburbId',
        'title' => 'getTitle',
        'updated' => 'getUpdated',
        'url_slug' => 'getUrlSlug',
        'url_slug_short' => 'getUrlSlugShort',
        'zone' => 'getZone',
        'gnaf_ids' => 'getGnafIds',
        'area_size' => 'getAreaSize',
        'canonical_url' => 'getCanonicalUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CADASTRE_TYPE_POINT = 'Point';
    const CADASTRE_TYPE_MULTI_POINT = 'MultiPoint';
    const CADASTRE_TYPE_LINE_STRING = 'LineString';
    const CADASTRE_TYPE_MULTI_LINE_STRING = 'MultiLineString';
    const CADASTRE_TYPE_POLYGON = 'Polygon';
    const CADASTRE_TYPE_MULTI_POLYGON = 'MultiPolygon';
    const CADASTRE_TYPE_GEOMETRY_COLLECTION = 'GeometryCollection';
    const CADASTRE_TYPE_FEATURE = 'Feature';
    const CADASTRE_TYPE_FEATURE_COLLECTION = 'FeatureCollection';
    const ON_MARKET_TYPES_UNKNOWN = 'Unknown';
    const ON_MARKET_TYPES_RENT = 'Rent';
    const ON_MARKET_TYPES_SALE = 'Sale';
    const ON_MARKET_TYPES_SHARE = 'Share';
    const STATUS_OFF_MARKET = 'OffMarket';
    const STATUS_ON_MARKET = 'OnMarket';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCadastreTypeAllowableValues()
    {
        return [
            self::CADASTRE_TYPE_POINT,
            self::CADASTRE_TYPE_MULTI_POINT,
            self::CADASTRE_TYPE_LINE_STRING,
            self::CADASTRE_TYPE_MULTI_LINE_STRING,
            self::CADASTRE_TYPE_POLYGON,
            self::CADASTRE_TYPE_MULTI_POLYGON,
            self::CADASTRE_TYPE_GEOMETRY_COLLECTION,
            self::CADASTRE_TYPE_FEATURE,
            self::CADASTRE_TYPE_FEATURE_COLLECTION,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnMarketTypesAllowableValues()
    {
        return [
            self::ON_MARKET_TYPES_UNKNOWN,
            self::ON_MARKET_TYPES_RENT,
            self::ON_MARKET_TYPES_SALE,
            self::ON_MARKET_TYPES_SHARE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OFF_MARKET,
            self::STATUS_ON_MARKET,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cadastre_type'] = isset($data['cadastre_type']) ? $data['cadastre_type'] : null;
        $this->container['on_market_types'] = isset($data['on_market_types']) ? $data['on_market_types'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_coordinate'] = isset($data['address_coordinate']) ? $data['address_coordinate'] : null;
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['adverts'] = isset($data['adverts']) ? $data['adverts'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['car_spaces'] = isset($data['car_spaces']) ? $data['car_spaces'] : null;
        $this->container['claim'] = isset($data['claim']) ? $data['claim'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['ensuites'] = isset($data['ensuites']) ? $data['ensuites'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['flat_number'] = isset($data['flat_number']) ? $data['flat_number'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['improvements'] = isset($data['improvements']) ? $data['improvements'] : null;
        $this->container['internal_area'] = isset($data['internal_area']) ? $data['internal_area'] : null;
        $this->container['is_residential'] = isset($data['is_residential']) ? $data['is_residential'] : null;
        $this->container['land_use'] = isset($data['land_use']) ? $data['land_use'] : null;
        $this->container['lot_number'] = isset($data['lot_number']) ? $data['lot_number'] : null;
        $this->container['photos'] = isset($data['photos']) ? $data['photos'] : null;
        $this->container['plan_number'] = isset($data['plan_number']) ? $data['plan_number'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['property_category'] = isset($data['property_category']) ? $data['property_category'] : null;
        $this->container['property_category_id'] = isset($data['property_category_id']) ? $data['property_category_id'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['property_type_id'] = isset($data['property_type_id']) ? $data['property_type_id'] : null;
        $this->container['rooms'] = isset($data['rooms']) ? $data['rooms'] : null;
        $this->container['section_number'] = isset($data['section_number']) ? $data['section_number'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['storeys'] = isset($data['storeys']) ? $data['storeys'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['street_type'] = isset($data['street_type']) ? $data['street_type'] : null;
        $this->container['street_type_long'] = isset($data['street_type_long']) ? $data['street_type_long'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['suburb_id'] = isset($data['suburb_id']) ? $data['suburb_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['url_slug'] = isset($data['url_slug']) ? $data['url_slug'] : null;
        $this->container['url_slug_short'] = isset($data['url_slug_short']) ? $data['url_slug_short'] : null;
        $this->container['zone'] = isset($data['zone']) ? $data['zone'] : null;
        $this->container['gnaf_ids'] = isset($data['gnaf_ids']) ? $data['gnaf_ids'] : null;
        $this->container['area_size'] = isset($data['area_size']) ? $data['area_size'] : null;
        $this->container['canonical_url'] = isset($data['canonical_url']) ? $data['canonical_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCadastreTypeAllowableValues();
        if (!is_null($this->container['cadastre_type']) && !in_array($this->container['cadastre_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cadastre_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cadastre_type
     *
     * @return string
     */
    public function getCadastreType()
    {
        return $this->container['cadastre_type'];
    }

    /**
     * Sets cadastre_type
     *
     * @param string $cadastre_type Gets or Sets CadastreType
     *
     * @return $this
     */
    public function setCadastreType($cadastre_type)
    {
        $allowedValues = $this->getCadastreTypeAllowableValues();
        if (!is_null($cadastre_type) && !in_array($cadastre_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cadastre_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cadastre_type'] = $cadastre_type;

        return $this;
    }

    /**
     * Gets on_market_types
     *
     * @return string[]
     */
    public function getOnMarketTypes()
    {
        return $this->container['on_market_types'];
    }

    /**
     * Sets on_market_types
     *
     * @param string[] $on_market_types Gets or Sets OnMarketTypes
     *
     * @return $this
     */
    public function setOnMarketTypes($on_market_types)
    {
        $allowedValues = $this->getOnMarketTypesAllowableValues();
        if (!is_null($on_market_types) && array_diff($on_market_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_market_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_market_types'] = $on_market_types;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Gets or Sets Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Gets or Sets Address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_coordinate
     *
     * @return \Swagger\Client\Model\PropertiesV1GeoCoordinate
     */
    public function getAddressCoordinate()
    {
        return $this->container['address_coordinate'];
    }

    /**
     * Sets address_coordinate
     *
     * @param \Swagger\Client\Model\PropertiesV1GeoCoordinate $address_coordinate address_coordinate
     *
     * @return $this
     */
    public function setAddressCoordinate($address_coordinate)
    {
        $this->container['address_coordinate'] = $address_coordinate;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param int $address_id Gets or Sets AddressId
     *
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets adverts
     *
     * @return \Swagger\Client\Model\PropertiesV1Advert[]
     */
    public function getAdverts()
    {
        return $this->container['adverts'];
    }

    /**
     * Sets adverts
     *
     * @param \Swagger\Client\Model\PropertiesV1Advert[] $adverts Gets or Sets Adverts
     *
     * @return $this
     */
    public function setAdverts($adverts)
    {
        $this->container['adverts'] = $adverts;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int $bathrooms Gets or Sets Bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms Gets or Sets Bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets car_spaces
     *
     * @return int
     */
    public function getCarSpaces()
    {
        return $this->container['car_spaces'];
    }

    /**
     * Sets car_spaces
     *
     * @param int $car_spaces Gets or Sets CarSpaces
     *
     * @return $this
     */
    public function setCarSpaces($car_spaces)
    {
        $this->container['car_spaces'] = $car_spaces;

        return $this;
    }

    /**
     * Gets claim
     *
     * @return \Swagger\Client\Model\PropertiesV1ClaimData
     */
    public function getClaim()
    {
        return $this->container['claim'];
    }

    /**
     * Sets claim
     *
     * @param \Swagger\Client\Model\PropertiesV1ClaimData $claim claim
     *
     * @return $this
     */
    public function setClaim($claim)
    {
        $this->container['claim'] = $claim;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition Gets or Sets Condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Gets or Sets Created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets ensuites
     *
     * @return int
     */
    public function getEnsuites()
    {
        return $this->container['ensuites'];
    }

    /**
     * Sets ensuites
     *
     * @param int $ensuites Gets or Sets Ensuites
     *
     * @return $this
     */
    public function setEnsuites($ensuites)
    {
        $this->container['ensuites'] = $ensuites;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features Gets or Sets Features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets flat_number
     *
     * @return string
     */
    public function getFlatNumber()
    {
        return $this->container['flat_number'];
    }

    /**
     * Sets flat_number
     *
     * @param string $flat_number Gets or Sets FlatNumber
     *
     * @return $this
     */
    public function setFlatNumber($flat_number)
    {
        $this->container['flat_number'] = $flat_number;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Swagger\Client\Model\PropertiesV1PropertyHistory
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Swagger\Client\Model\PropertiesV1PropertyHistory $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets or Sets Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets improvements
     *
     * @return string
     */
    public function getImprovements()
    {
        return $this->container['improvements'];
    }

    /**
     * Sets improvements
     *
     * @param string $improvements Gets or Sets Improvements
     *
     * @return $this
     */
    public function setImprovements($improvements)
    {
        $this->container['improvements'] = $improvements;

        return $this;
    }

    /**
     * Gets internal_area
     *
     * @return int
     */
    public function getInternalArea()
    {
        return $this->container['internal_area'];
    }

    /**
     * Sets internal_area
     *
     * @param int $internal_area Gets or Sets InternalArea
     *
     * @return $this
     */
    public function setInternalArea($internal_area)
    {
        $this->container['internal_area'] = $internal_area;

        return $this;
    }

    /**
     * Gets is_residential
     *
     * @return bool
     */
    public function getIsResidential()
    {
        return $this->container['is_residential'];
    }

    /**
     * Sets is_residential
     *
     * @param bool $is_residential Gets or Sets IsResidential
     *
     * @return $this
     */
    public function setIsResidential($is_residential)
    {
        $this->container['is_residential'] = $is_residential;

        return $this;
    }

    /**
     * Gets land_use
     *
     * @return string
     */
    public function getLandUse()
    {
        return $this->container['land_use'];
    }

    /**
     * Sets land_use
     *
     * @param string $land_use Gets or Sets LandUse
     *
     * @return $this
     */
    public function setLandUse($land_use)
    {
        $this->container['land_use'] = $land_use;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string $lot_number Gets or Sets LotNumber
     *
     * @return $this
     */
    public function setLotNumber($lot_number)
    {
        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \Swagger\Client\Model\PropertiesV1Photo[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \Swagger\Client\Model\PropertiesV1Photo[] $photos Gets or Sets Photos
     *
     * @return $this
     */
    public function setPhotos($photos)
    {
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets plan_number
     *
     * @return string
     */
    public function getPlanNumber()
    {
        return $this->container['plan_number'];
    }

    /**
     * Sets plan_number
     *
     * @param string $plan_number Gets or Sets PlanNumber
     *
     * @return $this
     */
    public function setPlanNumber($plan_number)
    {
        $this->container['plan_number'] = $plan_number;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Gets or Sets Postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets property_category
     *
     * @return string
     */
    public function getPropertyCategory()
    {
        return $this->container['property_category'];
    }

    /**
     * Sets property_category
     *
     * @param string $property_category Gets or Sets PropertyCategory
     *
     * @return $this
     */
    public function setPropertyCategory($property_category)
    {
        $this->container['property_category'] = $property_category;

        return $this;
    }

    /**
     * Gets property_category_id
     *
     * @return int
     */
    public function getPropertyCategoryId()
    {
        return $this->container['property_category_id'];
    }

    /**
     * Sets property_category_id
     *
     * @param int $property_category_id Gets or Sets PropertyCategoryId
     *
     * @return $this
     */
    public function setPropertyCategoryId($property_category_id)
    {
        $this->container['property_category_id'] = $property_category_id;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Gets or Sets PropertyType
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets property_type_id
     *
     * @return int
     */
    public function getPropertyTypeId()
    {
        return $this->container['property_type_id'];
    }

    /**
     * Sets property_type_id
     *
     * @param int $property_type_id Gets or Sets PropertyTypeId
     *
     * @return $this
     */
    public function setPropertyTypeId($property_type_id)
    {
        $this->container['property_type_id'] = $property_type_id;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return int
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param int $rooms Gets or Sets Rooms
     *
     * @return $this
     */
    public function setRooms($rooms)
    {
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets section_number
     *
     * @return string
     */
    public function getSectionNumber()
    {
        return $this->container['section_number'];
    }

    /**
     * Sets section_number
     *
     * @param string $section_number Gets or Sets SectionNumber
     *
     * @return $this
     */
    public function setSectionNumber($section_number)
    {
        $this->container['section_number'] = $section_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Gets or Sets State
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets storeys
     *
     * @return int
     */
    public function getStoreys()
    {
        return $this->container['storeys'];
    }

    /**
     * Sets storeys
     *
     * @param int $storeys Gets or Sets Storeys
     *
     * @return $this
     */
    public function setStoreys($storeys)
    {
        $this->container['storeys'] = $storeys;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address Gets or Sets StreetAddress
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name Gets or Sets StreetName
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number Gets or Sets StreetNumber
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street_type
     *
     * @return string
     */
    public function getStreetType()
    {
        return $this->container['street_type'];
    }

    /**
     * Sets street_type
     *
     * @param string $street_type Gets or Sets StreetType
     *
     * @return $this
     */
    public function setStreetType($street_type)
    {
        $this->container['street_type'] = $street_type;

        return $this;
    }

    /**
     * Gets street_type_long
     *
     * @return string
     */
    public function getStreetTypeLong()
    {
        return $this->container['street_type_long'];
    }

    /**
     * Sets street_type_long
     *
     * @param string $street_type_long Gets or Sets StreetTypeLong
     *
     * @return $this
     */
    public function setStreetTypeLong($street_type_long)
    {
        $this->container['street_type_long'] = $street_type_long;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Gets or Sets Suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets suburb_id
     *
     * @return int
     */
    public function getSuburbId()
    {
        return $this->container['suburb_id'];
    }

    /**
     * Sets suburb_id
     *
     * @param int $suburb_id Gets or Sets SuburbId
     *
     * @return $this
     */
    public function setSuburbId($suburb_id)
    {
        $this->container['suburb_id'] = $suburb_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Gets or Sets Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Gets or Sets Updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets url_slug
     *
     * @return string
     */
    public function getUrlSlug()
    {
        return $this->container['url_slug'];
    }

    /**
     * Sets url_slug
     *
     * @param string $url_slug Gets or Sets UrlSlug
     *
     * @return $this
     */
    public function setUrlSlug($url_slug)
    {
        $this->container['url_slug'] = $url_slug;

        return $this;
    }

    /**
     * Gets url_slug_short
     *
     * @return string
     */
    public function getUrlSlugShort()
    {
        return $this->container['url_slug_short'];
    }

    /**
     * Sets url_slug_short
     *
     * @param string $url_slug_short Gets or Sets UrlSlugShort
     *
     * @return $this
     */
    public function setUrlSlugShort($url_slug_short)
    {
        $this->container['url_slug_short'] = $url_slug_short;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return string
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param string $zone Gets or Sets Zone
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets gnaf_ids
     *
     * @return \Swagger\Client\Model\PropertiesV1GnafId[]
     */
    public function getGnafIds()
    {
        return $this->container['gnaf_ids'];
    }

    /**
     * Sets gnaf_ids
     *
     * @param \Swagger\Client\Model\PropertiesV1GnafId[] $gnaf_ids Gets or Sets GnafIds
     *
     * @return $this
     */
    public function setGnafIds($gnaf_ids)
    {
        $this->container['gnaf_ids'] = $gnaf_ids;

        return $this;
    }

    /**
     * Gets area_size
     *
     * @return int
     */
    public function getAreaSize()
    {
        return $this->container['area_size'];
    }

    /**
     * Sets area_size
     *
     * @param int $area_size Gets or Sets AreaSize
     *
     * @return $this
     */
    public function setAreaSize($area_size)
    {
        $this->container['area_size'] = $area_size;

        return $this;
    }

    /**
     * Gets canonical_url
     *
     * @return string
     */
    public function getCanonicalUrl()
    {
        return $this->container['canonical_url'];
    }

    /**
     * Sets canonical_url
     *
     * @param string $canonical_url canonical_url
     *
     * @return $this
     */
    public function setCanonicalUrl($canonical_url)
    {
        $this->container['canonical_url'] = $canonical_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
