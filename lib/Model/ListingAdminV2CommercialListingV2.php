<?php
/**
 * ListingAdminV2CommercialListingV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingAdminV2CommercialListingV2 Class Doc Comment
 *
 * @category Class
 * @description Commercial Listing V2
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingAdminV2CommercialListingV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingAdmin.v2.CommercialListingV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sale_price' => '\Swagger\Client\Model\ListingAdminV2CommercialPrice',
        'lease_price' => '\Swagger\Client\Model\ListingAdminV2CommercialPrice',
        'lease' => '\Swagger\Client\Model\ListingAdminV2Lease',
        'eoi' => '\Swagger\Client\Model\ListingAdminV2EOI',
        'tenant' => '\Swagger\Client\Model\ListingAdminV2Tenant',
        'tender' => '\Swagger\Client\Model\ListingAdminV2Tender',
        'occupancy_type' => 'string',
        'annual_return' => 'int',
        'units_offered' => 'int',
        'unit_details' => '\Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[]',
        'nabers' => 'double',
        'sale_terms' => 'string',
        'auction' => '\Swagger\Client\Model\ListingAdminV2CommercialAuction',
        'property_details' => '\Swagger\Client\Model\ListingAdminV2CommercialProperty',
        'conjunction_agents' => '\Swagger\Client\Model\ListingAdminV2AgentContact[]',
        'highlights' => 'string[]',
        'under_offer_or_contract' => 'bool',
        'domain_ad_id' => 'int',
        'listing_provider' => 'string',
        'domain_agency_id' => 'int',
        'provider_ad_id' => 'string',
        'features' => 'string',
        'description' => 'string',
        'summary' => 'string',
        'inspection_details' => '\Swagger\Client\Model\ListingAdminV2InspectionDetails',
        'media' => '\Swagger\Client\Model\ListingAdminV2PropertyMedia[]',
        'listing_action' => 'string',
        'contact_preference' => 'string',
        'contacts' => '\Swagger\Client\Model\ListingAdminV2Contact[]',
        'other_enquiry_email' => 'string',
        'receive_emails_to_default_address' => 'bool',
        'is_rural' => 'bool',
        'supplementary' => '\Swagger\Client\Model\ListingAdminV2ListingSupplementary[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sale_price' => null,
        'lease_price' => null,
        'lease' => null,
        'eoi' => null,
        'tenant' => null,
        'tender' => null,
        'occupancy_type' => null,
        'annual_return' => 'int32',
        'units_offered' => 'int32',
        'unit_details' => null,
        'nabers' => 'double',
        'sale_terms' => null,
        'auction' => null,
        'property_details' => null,
        'conjunction_agents' => null,
        'highlights' => null,
        'under_offer_or_contract' => null,
        'domain_ad_id' => 'int32',
        'listing_provider' => null,
        'domain_agency_id' => 'int32',
        'provider_ad_id' => null,
        'features' => null,
        'description' => null,
        'summary' => null,
        'inspection_details' => null,
        'media' => null,
        'listing_action' => null,
        'contact_preference' => null,
        'contacts' => null,
        'other_enquiry_email' => null,
        'receive_emails_to_default_address' => null,
        'is_rural' => null,
        'supplementary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sale_price' => 'salePrice',
        'lease_price' => 'leasePrice',
        'lease' => 'lease',
        'eoi' => 'eoi',
        'tenant' => 'tenant',
        'tender' => 'tender',
        'occupancy_type' => 'occupancyType',
        'annual_return' => 'annualReturn',
        'units_offered' => 'unitsOffered',
        'unit_details' => 'unitDetails',
        'nabers' => 'nabers',
        'sale_terms' => 'saleTerms',
        'auction' => 'auction',
        'property_details' => 'propertyDetails',
        'conjunction_agents' => 'conjunctionAgents',
        'highlights' => 'highlights',
        'under_offer_or_contract' => 'underOfferOrContract',
        'domain_ad_id' => 'domainAdId',
        'listing_provider' => 'listingProvider',
        'domain_agency_id' => 'domainAgencyID',
        'provider_ad_id' => 'providerAdId',
        'features' => 'features',
        'description' => 'description',
        'summary' => 'summary',
        'inspection_details' => 'inspectionDetails',
        'media' => 'media',
        'listing_action' => 'listingAction',
        'contact_preference' => 'contactPreference',
        'contacts' => 'contacts',
        'other_enquiry_email' => 'otherEnquiryEmail',
        'receive_emails_to_default_address' => 'receiveEmailsToDefaultAddress',
        'is_rural' => 'isRural',
        'supplementary' => 'supplementary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sale_price' => 'setSalePrice',
        'lease_price' => 'setLeasePrice',
        'lease' => 'setLease',
        'eoi' => 'setEoi',
        'tenant' => 'setTenant',
        'tender' => 'setTender',
        'occupancy_type' => 'setOccupancyType',
        'annual_return' => 'setAnnualReturn',
        'units_offered' => 'setUnitsOffered',
        'unit_details' => 'setUnitDetails',
        'nabers' => 'setNabers',
        'sale_terms' => 'setSaleTerms',
        'auction' => 'setAuction',
        'property_details' => 'setPropertyDetails',
        'conjunction_agents' => 'setConjunctionAgents',
        'highlights' => 'setHighlights',
        'under_offer_or_contract' => 'setUnderOfferOrContract',
        'domain_ad_id' => 'setDomainAdId',
        'listing_provider' => 'setListingProvider',
        'domain_agency_id' => 'setDomainAgencyId',
        'provider_ad_id' => 'setProviderAdId',
        'features' => 'setFeatures',
        'description' => 'setDescription',
        'summary' => 'setSummary',
        'inspection_details' => 'setInspectionDetails',
        'media' => 'setMedia',
        'listing_action' => 'setListingAction',
        'contact_preference' => 'setContactPreference',
        'contacts' => 'setContacts',
        'other_enquiry_email' => 'setOtherEnquiryEmail',
        'receive_emails_to_default_address' => 'setReceiveEmailsToDefaultAddress',
        'is_rural' => 'setIsRural',
        'supplementary' => 'setSupplementary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sale_price' => 'getSalePrice',
        'lease_price' => 'getLeasePrice',
        'lease' => 'getLease',
        'eoi' => 'getEoi',
        'tenant' => 'getTenant',
        'tender' => 'getTender',
        'occupancy_type' => 'getOccupancyType',
        'annual_return' => 'getAnnualReturn',
        'units_offered' => 'getUnitsOffered',
        'unit_details' => 'getUnitDetails',
        'nabers' => 'getNabers',
        'sale_terms' => 'getSaleTerms',
        'auction' => 'getAuction',
        'property_details' => 'getPropertyDetails',
        'conjunction_agents' => 'getConjunctionAgents',
        'highlights' => 'getHighlights',
        'under_offer_or_contract' => 'getUnderOfferOrContract',
        'domain_ad_id' => 'getDomainAdId',
        'listing_provider' => 'getListingProvider',
        'domain_agency_id' => 'getDomainAgencyId',
        'provider_ad_id' => 'getProviderAdId',
        'features' => 'getFeatures',
        'description' => 'getDescription',
        'summary' => 'getSummary',
        'inspection_details' => 'getInspectionDetails',
        'media' => 'getMedia',
        'listing_action' => 'getListingAction',
        'contact_preference' => 'getContactPreference',
        'contacts' => 'getContacts',
        'other_enquiry_email' => 'getOtherEnquiryEmail',
        'receive_emails_to_default_address' => 'getReceiveEmailsToDefaultAddress',
        'is_rural' => 'getIsRural',
        'supplementary' => 'getSupplementary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OCCUPANCY_TYPE_TENANTED = 'tenanted';
    const OCCUPANCY_TYPE_VACANT = 'vacant';
    const LISTING_ACTION_SALE = 'sale';
    const LISTING_ACTION_RENT = 'rent';
    const LISTING_ACTION_SALE_AND_LEASE = 'saleAndLease';
    const CONTACT_PREFERENCE_BY_PHONE = 'byPhone';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOccupancyTypeAllowableValues()
    {
        return [
            self::OCCUPANCY_TYPE_TENANTED,
            self::OCCUPANCY_TYPE_VACANT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingActionAllowableValues()
    {
        return [
            self::LISTING_ACTION_SALE,
            self::LISTING_ACTION_RENT,
            self::LISTING_ACTION_SALE_AND_LEASE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactPreferenceAllowableValues()
    {
        return [
            self::CONTACT_PREFERENCE_BY_PHONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['lease_price'] = isset($data['lease_price']) ? $data['lease_price'] : null;
        $this->container['lease'] = isset($data['lease']) ? $data['lease'] : null;
        $this->container['eoi'] = isset($data['eoi']) ? $data['eoi'] : null;
        $this->container['tenant'] = isset($data['tenant']) ? $data['tenant'] : null;
        $this->container['tender'] = isset($data['tender']) ? $data['tender'] : null;
        $this->container['occupancy_type'] = isset($data['occupancy_type']) ? $data['occupancy_type'] : null;
        $this->container['annual_return'] = isset($data['annual_return']) ? $data['annual_return'] : null;
        $this->container['units_offered'] = isset($data['units_offered']) ? $data['units_offered'] : null;
        $this->container['unit_details'] = isset($data['unit_details']) ? $data['unit_details'] : null;
        $this->container['nabers'] = isset($data['nabers']) ? $data['nabers'] : null;
        $this->container['sale_terms'] = isset($data['sale_terms']) ? $data['sale_terms'] : null;
        $this->container['auction'] = isset($data['auction']) ? $data['auction'] : null;
        $this->container['property_details'] = isset($data['property_details']) ? $data['property_details'] : null;
        $this->container['conjunction_agents'] = isset($data['conjunction_agents']) ? $data['conjunction_agents'] : null;
        $this->container['highlights'] = isset($data['highlights']) ? $data['highlights'] : null;
        $this->container['under_offer_or_contract'] = isset($data['under_offer_or_contract']) ? $data['under_offer_or_contract'] : null;
        $this->container['domain_ad_id'] = isset($data['domain_ad_id']) ? $data['domain_ad_id'] : null;
        $this->container['listing_provider'] = isset($data['listing_provider']) ? $data['listing_provider'] : null;
        $this->container['domain_agency_id'] = isset($data['domain_agency_id']) ? $data['domain_agency_id'] : null;
        $this->container['provider_ad_id'] = isset($data['provider_ad_id']) ? $data['provider_ad_id'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['inspection_details'] = isset($data['inspection_details']) ? $data['inspection_details'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['listing_action'] = isset($data['listing_action']) ? $data['listing_action'] : null;
        $this->container['contact_preference'] = isset($data['contact_preference']) ? $data['contact_preference'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['other_enquiry_email'] = isset($data['other_enquiry_email']) ? $data['other_enquiry_email'] : null;
        $this->container['receive_emails_to_default_address'] = isset($data['receive_emails_to_default_address']) ? $data['receive_emails_to_default_address'] : null;
        $this->container['is_rural'] = isset($data['is_rural']) ? $data['is_rural'] : null;
        $this->container['supplementary'] = isset($data['supplementary']) ? $data['supplementary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOccupancyTypeAllowableValues();
        if (!is_null($this->container['occupancy_type']) && !in_array($this->container['occupancy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'occupancy_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['property_details'] === null) {
            $invalidProperties[] = "'property_details' can't be null";
        }
        if ($this->container['domain_agency_id'] === null) {
            $invalidProperties[] = "'domain_agency_id' can't be null";
        }
        if ($this->container['provider_ad_id'] === null) {
            $invalidProperties[] = "'provider_ad_id' can't be null";
        }
        if ($this->container['listing_action'] === null) {
            $invalidProperties[] = "'listing_action' can't be null";
        }
        $allowedValues = $this->getListingActionAllowableValues();
        if (!is_null($this->container['listing_action']) && !in_array($this->container['listing_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'listing_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContactPreferenceAllowableValues();
        if (!is_null($this->container['contact_preference']) && !in_array($this->container['contact_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sale_price
     *
     * @return \Swagger\Client\Model\ListingAdminV2CommercialPrice
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param \Swagger\Client\Model\ListingAdminV2CommercialPrice $sale_price sale_price
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets lease_price
     *
     * @return \Swagger\Client\Model\ListingAdminV2CommercialPrice
     */
    public function getLeasePrice()
    {
        return $this->container['lease_price'];
    }

    /**
     * Sets lease_price
     *
     * @param \Swagger\Client\Model\ListingAdminV2CommercialPrice $lease_price lease_price
     *
     * @return $this
     */
    public function setLeasePrice($lease_price)
    {
        $this->container['lease_price'] = $lease_price;

        return $this;
    }

    /**
     * Gets lease
     *
     * @return \Swagger\Client\Model\ListingAdminV2Lease
     */
    public function getLease()
    {
        return $this->container['lease'];
    }

    /**
     * Sets lease
     *
     * @param \Swagger\Client\Model\ListingAdminV2Lease $lease lease
     *
     * @return $this
     */
    public function setLease($lease)
    {
        $this->container['lease'] = $lease;

        return $this;
    }

    /**
     * Gets eoi
     *
     * @return \Swagger\Client\Model\ListingAdminV2EOI
     */
    public function getEoi()
    {
        return $this->container['eoi'];
    }

    /**
     * Sets eoi
     *
     * @param \Swagger\Client\Model\ListingAdminV2EOI $eoi eoi
     *
     * @return $this
     */
    public function setEoi($eoi)
    {
        $this->container['eoi'] = $eoi;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return \Swagger\Client\Model\ListingAdminV2Tenant
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param \Swagger\Client\Model\ListingAdminV2Tenant $tenant tenant
     *
     * @return $this
     */
    public function setTenant($tenant)
    {
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets tender
     *
     * @return \Swagger\Client\Model\ListingAdminV2Tender
     */
    public function getTender()
    {
        return $this->container['tender'];
    }

    /**
     * Sets tender
     *
     * @param \Swagger\Client\Model\ListingAdminV2Tender $tender tender
     *
     * @return $this
     */
    public function setTender($tender)
    {
        $this->container['tender'] = $tender;

        return $this;
    }

    /**
     * Gets occupancy_type
     *
     * @return string
     */
    public function getOccupancyType()
    {
        return $this->container['occupancy_type'];
    }

    /**
     * Sets occupancy_type
     *
     * @param string $occupancy_type Occupancy. Can be 'Tenanted', 'Vacant'
     *
     * @return $this
     */
    public function setOccupancyType($occupancy_type)
    {
        $allowedValues = $this->getOccupancyTypeAllowableValues();
        if (!is_null($occupancy_type) && !in_array($occupancy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'occupancy_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['occupancy_type'] = $occupancy_type;

        return $this;
    }

    /**
     * Gets annual_return
     *
     * @return int
     */
    public function getAnnualReturn()
    {
        return $this->container['annual_return'];
    }

    /**
     * Sets annual_return
     *
     * @param int $annual_return Integer value of percentage return on this property or business.
     *
     * @return $this
     */
    public function setAnnualReturn($annual_return)
    {
        $this->container['annual_return'] = $annual_return;

        return $this;
    }

    /**
     * Gets units_offered
     *
     * @return int
     */
    public function getUnitsOffered()
    {
        return $this->container['units_offered'];
    }

    /**
     * Sets units_offered
     *
     * @param int $units_offered Integer value of units offered for sale or lease
     *
     * @return $this
     */
    public function setUnitsOffered($units_offered)
    {
        $this->container['units_offered'] = $units_offered;

        return $this;
    }

    /**
     * Gets unit_details
     *
     * @return \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[]
     */
    public function getUnitDetails()
    {
        return $this->container['unit_details'];
    }

    /**
     * Sets unit_details
     *
     * @param \Swagger\Client\Model\ListingAdminV2SpecificUnitDetail[] $unit_details Units details
     *
     * @return $this
     */
    public function setUnitDetails($unit_details)
    {
        $this->container['unit_details'] = $unit_details;

        return $this;
    }

    /**
     * Gets nabers
     *
     * @return double
     */
    public function getNabers()
    {
        return $this->container['nabers'];
    }

    /**
     * Sets nabers
     *
     * @param double $nabers The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
     *
     * @return $this
     */
    public function setNabers($nabers)
    {
        $this->container['nabers'] = $nabers;

        return $this;
    }

    /**
     * Gets sale_terms
     *
     * @return string
     */
    public function getSaleTerms()
    {
        return $this->container['sale_terms'];
    }

    /**
     * Sets sale_terms
     *
     * @param string $sale_terms Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings
     *
     * @return $this
     */
    public function setSaleTerms($sale_terms)
    {
        $this->container['sale_terms'] = $sale_terms;

        return $this;
    }

    /**
     * Gets auction
     *
     * @return \Swagger\Client\Model\ListingAdminV2CommercialAuction
     */
    public function getAuction()
    {
        return $this->container['auction'];
    }

    /**
     * Sets auction
     *
     * @param \Swagger\Client\Model\ListingAdminV2CommercialAuction $auction auction
     *
     * @return $this
     */
    public function setAuction($auction)
    {
        $this->container['auction'] = $auction;

        return $this;
    }

    /**
     * Gets property_details
     *
     * @return \Swagger\Client\Model\ListingAdminV2CommercialProperty
     */
    public function getPropertyDetails()
    {
        return $this->container['property_details'];
    }

    /**
     * Sets property_details
     *
     * @param \Swagger\Client\Model\ListingAdminV2CommercialProperty $property_details property_details
     *
     * @return $this
     */
    public function setPropertyDetails($property_details)
    {
        $this->container['property_details'] = $property_details;

        return $this;
    }

    /**
     * Gets conjunction_agents
     *
     * @return \Swagger\Client\Model\ListingAdminV2AgentContact[]
     */
    public function getConjunctionAgents()
    {
        return $this->container['conjunction_agents'];
    }

    /**
     * Sets conjunction_agents
     *
     * @param \Swagger\Client\Model\ListingAdminV2AgentContact[] $conjunction_agents List of conjunction agents
     *
     * @return $this
     */
    public function setConjunctionAgents($conjunction_agents)
    {
        $this->container['conjunction_agents'] = $conjunction_agents;

        return $this;
    }

    /**
     * Gets highlights
     *
     * @return string[]
     */
    public function getHighlights()
    {
        return $this->container['highlights'];
    }

    /**
     * Sets highlights
     *
     * @param string[] $highlights Highlight Items
     *
     * @return $this
     */
    public function setHighlights($highlights)
    {
        $this->container['highlights'] = $highlights;

        return $this;
    }

    /**
     * Gets under_offer_or_contract
     *
     * @return bool
     */
    public function getUnderOfferOrContract()
    {
        return $this->container['under_offer_or_contract'];
    }

    /**
     * Sets under_offer_or_contract
     *
     * @param bool $under_offer_or_contract Set for Sale listings only
     *
     * @return $this
     */
    public function setUnderOfferOrContract($under_offer_or_contract)
    {
        $this->container['under_offer_or_contract'] = $under_offer_or_contract;

        return $this;
    }

    /**
     * Gets domain_ad_id
     *
     * @return int
     */
    public function getDomainAdId()
    {
        return $this->container['domain_ad_id'];
    }

    /**
     * Sets domain_ad_id
     *
     * @param int $domain_ad_id Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
     *
     * @return $this
     */
    public function setDomainAdId($domain_ad_id)
    {
        $this->container['domain_ad_id'] = $domain_ad_id;

        return $this;
    }

    /**
     * Gets listing_provider
     *
     * @return string
     */
    public function getListingProvider()
    {
        return $this->container['listing_provider'];
    }

    /**
     * Sets listing_provider
     *
     * @param string $listing_provider A string identifying the data provider
     *
     * @return $this
     */
    public function setListingProvider($listing_provider)
    {
        $this->container['listing_provider'] = $listing_provider;

        return $this;
    }

    /**
     * Gets domain_agency_id
     *
     * @return int
     */
    public function getDomainAgencyId()
    {
        return $this->container['domain_agency_id'];
    }

    /**
     * Sets domain_agency_id
     *
     * @param int $domain_agency_id The Domain Agency Id number
     *
     * @return $this
     */
    public function setDomainAgencyId($domain_agency_id)
    {
        $this->container['domain_agency_id'] = $domain_agency_id;

        return $this;
    }

    /**
     * Gets provider_ad_id
     *
     * @return string
     */
    public function getProviderAdId()
    {
        return $this->container['provider_ad_id'];
    }

    /**
     * Sets provider_ad_id
     *
     * @param string $provider_ad_id External Advertisement Id of up to 50 characters will be stored.<br />  This value is used to identify an Advertisement for updates and should be unique for listing provider.<br />  This value is case-insensitive (meaning AAAA will update aaaa).
     *
     * @return $this
     */
    public function setProviderAdId($provider_ad_id)
    {
        $this->container['provider_ad_id'] = $provider_ad_id;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string $features Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the property.  6000 characters in length. The following HTML elements are permitted: &lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary 'Headline' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets inspection_details
     *
     * @return \Swagger\Client\Model\ListingAdminV2InspectionDetails
     */
    public function getInspectionDetails()
    {
        return $this->container['inspection_details'];
    }

    /**
     * Sets inspection_details
     *
     * @param \Swagger\Client\Model\ListingAdminV2InspectionDetails $inspection_details inspection_details
     *
     * @return $this
     */
    public function setInspectionDetails($inspection_details)
    {
        $this->container['inspection_details'] = $inspection_details;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\ListingAdminV2PropertyMedia[]
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\ListingAdminV2PropertyMedia[] $media Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets listing_action
     *
     * @return string
     */
    public function getListingAction()
    {
        return $this->container['listing_action'];
    }

    /**
     * Sets listing_action
     *
     * @param string $listing_action Sale or Rent
     *
     * @return $this
     */
    public function setListingAction($listing_action)
    {
        $allowedValues = $this->getListingActionAllowableValues();
        if (!in_array($listing_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'listing_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_action'] = $listing_action;

        return $this;
    }

    /**
     * Gets contact_preference
     *
     * @return string
     */
    public function getContactPreference()
    {
        return $this->container['contact_preference'];
    }

    /**
     * Sets contact_preference
     *
     * @param string $contact_preference Indicates the listing preferred contact method. Default by both phone and email if not provided.
     *
     * @return $this
     */
    public function setContactPreference($contact_preference)
    {
        $allowedValues = $this->getContactPreferenceAllowableValues();
        if (!is_null($contact_preference) && !in_array($contact_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_preference'] = $contact_preference;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Swagger\Client\Model\ListingAdminV2Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Swagger\Client\Model\ListingAdminV2Contact[] $contacts Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets other_enquiry_email
     *
     * @return string
     */
    public function getOtherEnquiryEmail()
    {
        return $this->container['other_enquiry_email'];
    }

    /**
     * Sets other_enquiry_email
     *
     * @param string $other_enquiry_email Sets an additional Email Address to which enquiries on the Listing will be sent
     *
     * @return $this
     */
    public function setOtherEnquiryEmail($other_enquiry_email)
    {
        $this->container['other_enquiry_email'] = $other_enquiry_email;

        return $this;
    }

    /**
     * Gets receive_emails_to_default_address
     *
     * @return bool
     */
    public function getReceiveEmailsToDefaultAddress()
    {
        return $this->container['receive_emails_to_default_address'];
    }

    /**
     * Sets receive_emails_to_default_address
     *
     * @param bool $receive_emails_to_default_address Send email enquiries to the default address for this listing type
     *
     * @return $this
     */
    public function setReceiveEmailsToDefaultAddress($receive_emails_to_default_address)
    {
        $this->container['receive_emails_to_default_address'] = $receive_emails_to_default_address;

        return $this;
    }

    /**
     * Gets is_rural
     *
     * @return bool
     */
    public function getIsRural()
    {
        return $this->container['is_rural'];
    }

    /**
     * Sets is_rural
     *
     * @param bool $is_rural True if the property is rural
     *
     * @return $this
     */
    public function setIsRural($is_rural)
    {
        $this->container['is_rural'] = $is_rural;

        return $this;
    }

    /**
     * Gets supplementary
     *
     * @return \Swagger\Client\Model\ListingAdminV2ListingSupplementary[]
     */
    public function getSupplementary()
    {
        return $this->container['supplementary'];
    }

    /**
     * Sets supplementary
     *
     * @param \Swagger\Client\Model\ListingAdminV2ListingSupplementary[] $supplementary Rural attributes    *Improvements* (optional)    Available `types` (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    `description` (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available `types` (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    `description` (string, optional): description of the homestead and construction, maximum 250 characters.    `metadata` (optional)  * `area` (decimal, optional): homestead area in square metres.    Available `types` (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    `description` (string, optional): water comments, maximum 250 characters.    Available `types` (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    `description` (string, optional): description of the crops, maximum 250 characters.    `metadata` (optional)  * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.  * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.  * `pastures` (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    `description` (string, optional): additional comments, maximum 250 characters.    `metadata` (optional)  * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available `types` (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.    `metadata` (optional)  * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.  * `crop` (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    `description` (string, optional): irrigation comments, maximum 250 characters    `metadata` (optional)  * `rainfall` (decimal, optional): annual rainfall in millimetres.
     *
     * @return $this
     */
    public function setSupplementary($supplementary)
    {
        $this->container['supplementary'] = $supplementary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
