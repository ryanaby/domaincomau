<?php
/**
 * ListingsV1Listing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingsV1Listing Class Doc Comment
 *
 * @category Class
 * @description Represents a Property Listing
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsV1Listing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Listings.V1.Listing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'objective' => 'string',
        'status' => 'string',
        'sale_mode' => 'string',
        'channel' => 'string',
        'id' => 'int',
        'address_parts' => '\Swagger\Client\Model\ListingsV1AddressParts',
        'advertiser_identifiers' => '\Swagger\Client\Model\ListingsV1AdvertiserIdentifiers',
        'apm_identifiers' => '\Swagger\Client\Model\ListingsV1AustralianPropertyMonitorsIdentifiers',
        'bathrooms' => 'float',
        'bedrooms' => 'float',
        'building_area' => 'string',
        'building_area_sqm' => 'double',
        'carspaces' => 'float',
        'date_available' => '\DateTime',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime',
        'date_minor_updated' => '\DateTime',
        'date_purged' => '\DateTime',
        'date_listed' => '\DateTime',
        'description' => 'string',
        'dev_project_id' => 'int',
        'energy_efficiency_rating' => 'int',
        'features' => 'string[]',
        'geo_location' => '\Swagger\Client\Model\ListingsV1GeoLocation',
        'headline' => 'string',
        'inspection_details' => '\Swagger\Client\Model\ListingsV1PropertyInspections',
        'is_new_development' => 'bool',
        'land_area' => 'string',
        'land_area_sqm' => 'double',
        'media' => '\Swagger\Client\Model\ListingsV1ListingMedia[]',
        'price_details' => '\Swagger\Client\Model\ListingsV1PriceDetails',
        'property_id' => 'string',
        'property_types' => 'string[]',
        'provider_details' => '\Swagger\Client\Model\ListingsV1ProviderDetails',
        'rental_details' => '\Swagger\Client\Model\ListingsV1RentalDetails',
        'sale_details' => '\Swagger\Client\Model\ListingsV1SaleDetails',
        'is_withdrawn' => 'bool',
        'seo_url' => 'string',
        'virtual_tour_url' => 'string',
        'homepass_enabled' => 'bool',
        'statement_of_information' => '\Swagger\Client\Model\ListingsV1StatementOfInformation',
        'number_of_dwellings' => 'int',
        'highlights' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'objective' => null,
        'status' => null,
        'sale_mode' => null,
        'channel' => null,
        'id' => 'int32',
        'address_parts' => null,
        'advertiser_identifiers' => null,
        'apm_identifiers' => null,
        'bathrooms' => 'float',
        'bedrooms' => 'float',
        'building_area' => null,
        'building_area_sqm' => 'double',
        'carspaces' => 'float',
        'date_available' => 'date-time',
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'date_minor_updated' => 'date-time',
        'date_purged' => 'date-time',
        'date_listed' => 'date-time',
        'description' => null,
        'dev_project_id' => 'int32',
        'energy_efficiency_rating' => 'int32',
        'features' => null,
        'geo_location' => null,
        'headline' => null,
        'inspection_details' => null,
        'is_new_development' => null,
        'land_area' => null,
        'land_area_sqm' => 'double',
        'media' => null,
        'price_details' => null,
        'property_id' => null,
        'property_types' => null,
        'provider_details' => null,
        'rental_details' => null,
        'sale_details' => null,
        'is_withdrawn' => null,
        'seo_url' => null,
        'virtual_tour_url' => null,
        'homepass_enabled' => null,
        'statement_of_information' => null,
        'number_of_dwellings' => 'int32',
        'highlights' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'objective' => 'objective',
        'status' => 'status',
        'sale_mode' => 'saleMode',
        'channel' => 'channel',
        'id' => 'id',
        'address_parts' => 'addressParts',
        'advertiser_identifiers' => 'advertiserIdentifiers',
        'apm_identifiers' => 'apmIdentifiers',
        'bathrooms' => 'bathrooms',
        'bedrooms' => 'bedrooms',
        'building_area' => 'buildingArea',
        'building_area_sqm' => 'buildingAreaSqm',
        'carspaces' => 'carspaces',
        'date_available' => 'dateAvailable',
        'date_created' => 'dateCreated',
        'date_updated' => 'dateUpdated',
        'date_minor_updated' => 'dateMinorUpdated',
        'date_purged' => 'datePurged',
        'date_listed' => 'dateListed',
        'description' => 'description',
        'dev_project_id' => 'devProjectId',
        'energy_efficiency_rating' => 'energyEfficiencyRating',
        'features' => 'features',
        'geo_location' => 'geoLocation',
        'headline' => 'headline',
        'inspection_details' => 'inspectionDetails',
        'is_new_development' => 'isNewDevelopment',
        'land_area' => 'landArea',
        'land_area_sqm' => 'landAreaSqm',
        'media' => 'media',
        'price_details' => 'priceDetails',
        'property_id' => 'propertyId',
        'property_types' => 'propertyTypes',
        'provider_details' => 'providerDetails',
        'rental_details' => 'rentalDetails',
        'sale_details' => 'saleDetails',
        'is_withdrawn' => 'isWithdrawn',
        'seo_url' => 'seoUrl',
        'virtual_tour_url' => 'virtualTourUrl',
        'homepass_enabled' => 'homepassEnabled',
        'statement_of_information' => 'statementOfInformation',
        'number_of_dwellings' => 'numberOfDwellings',
        'highlights' => 'highlights'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'objective' => 'setObjective',
        'status' => 'setStatus',
        'sale_mode' => 'setSaleMode',
        'channel' => 'setChannel',
        'id' => 'setId',
        'address_parts' => 'setAddressParts',
        'advertiser_identifiers' => 'setAdvertiserIdentifiers',
        'apm_identifiers' => 'setApmIdentifiers',
        'bathrooms' => 'setBathrooms',
        'bedrooms' => 'setBedrooms',
        'building_area' => 'setBuildingArea',
        'building_area_sqm' => 'setBuildingAreaSqm',
        'carspaces' => 'setCarspaces',
        'date_available' => 'setDateAvailable',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'date_minor_updated' => 'setDateMinorUpdated',
        'date_purged' => 'setDatePurged',
        'date_listed' => 'setDateListed',
        'description' => 'setDescription',
        'dev_project_id' => 'setDevProjectId',
        'energy_efficiency_rating' => 'setEnergyEfficiencyRating',
        'features' => 'setFeatures',
        'geo_location' => 'setGeoLocation',
        'headline' => 'setHeadline',
        'inspection_details' => 'setInspectionDetails',
        'is_new_development' => 'setIsNewDevelopment',
        'land_area' => 'setLandArea',
        'land_area_sqm' => 'setLandAreaSqm',
        'media' => 'setMedia',
        'price_details' => 'setPriceDetails',
        'property_id' => 'setPropertyId',
        'property_types' => 'setPropertyTypes',
        'provider_details' => 'setProviderDetails',
        'rental_details' => 'setRentalDetails',
        'sale_details' => 'setSaleDetails',
        'is_withdrawn' => 'setIsWithdrawn',
        'seo_url' => 'setSeoUrl',
        'virtual_tour_url' => 'setVirtualTourUrl',
        'homepass_enabled' => 'setHomepassEnabled',
        'statement_of_information' => 'setStatementOfInformation',
        'number_of_dwellings' => 'setNumberOfDwellings',
        'highlights' => 'setHighlights'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'objective' => 'getObjective',
        'status' => 'getStatus',
        'sale_mode' => 'getSaleMode',
        'channel' => 'getChannel',
        'id' => 'getId',
        'address_parts' => 'getAddressParts',
        'advertiser_identifiers' => 'getAdvertiserIdentifiers',
        'apm_identifiers' => 'getApmIdentifiers',
        'bathrooms' => 'getBathrooms',
        'bedrooms' => 'getBedrooms',
        'building_area' => 'getBuildingArea',
        'building_area_sqm' => 'getBuildingAreaSqm',
        'carspaces' => 'getCarspaces',
        'date_available' => 'getDateAvailable',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'date_minor_updated' => 'getDateMinorUpdated',
        'date_purged' => 'getDatePurged',
        'date_listed' => 'getDateListed',
        'description' => 'getDescription',
        'dev_project_id' => 'getDevProjectId',
        'energy_efficiency_rating' => 'getEnergyEfficiencyRating',
        'features' => 'getFeatures',
        'geo_location' => 'getGeoLocation',
        'headline' => 'getHeadline',
        'inspection_details' => 'getInspectionDetails',
        'is_new_development' => 'getIsNewDevelopment',
        'land_area' => 'getLandArea',
        'land_area_sqm' => 'getLandAreaSqm',
        'media' => 'getMedia',
        'price_details' => 'getPriceDetails',
        'property_id' => 'getPropertyId',
        'property_types' => 'getPropertyTypes',
        'provider_details' => 'getProviderDetails',
        'rental_details' => 'getRentalDetails',
        'sale_details' => 'getSaleDetails',
        'is_withdrawn' => 'getIsWithdrawn',
        'seo_url' => 'getSeoUrl',
        'virtual_tour_url' => 'getVirtualTourUrl',
        'homepass_enabled' => 'getHomepassEnabled',
        'statement_of_information' => 'getStatementOfInformation',
        'number_of_dwellings' => 'getNumberOfDwellings',
        'highlights' => 'getHighlights'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OBJECTIVE_SALE = 'sale';
    const OBJECTIVE_RENT = 'rent';
    const STATUS_UNKNOWN = 'unknown';
    const STATUS_ARCHIVED = 'archived';
    const STATUS_UNDER_OFFER = 'underOffer';
    const STATUS_SOLD = 'sold';
    const STATUS_LEASED = 'leased';
    const STATUS_NEW_DEVELOPMENT = 'newDevelopment';
    const STATUS_RECENTLY_UPDATED = 'recentlyUpdated';
    const STATUS__NEW = 'new';
    const STATUS_LIVE = 'live';
    const STATUS_PENDING = 'pending';
    const STATUS_DEPOSIT_TAKEN = 'depositTaken';
    const SALE_MODE_BUY = 'buy';
    const SALE_MODE_RENT = 'rent';
    const SALE_MODE_SHARE = 'share';
    const SALE_MODE_SOLD = 'sold';
    const SALE_MODE_LEASED = 'leased';
    const SALE_MODE_ARCHIVED = 'archived';
    const CHANNEL_RESIDENTIAL = 'residential';
    const CHANNEL_COMMERCIAL = 'commercial';
    const CHANNEL_BUSINESS = 'business';
    const PROPERTY_TYPES_UNKNOWN = 'unknown';
    const PROPERTY_TYPES_ACREAGE_SEMI_RURAL = 'acreageSemiRural';
    const PROPERTY_TYPES_APARTMENT_UNIT_FLAT = 'apartmentUnitFlat';
    const PROPERTY_TYPES_AQUACULTURE = 'aquaculture';
    const PROPERTY_TYPES_BLOCK_OF_UNITS = 'blockOfUnits';
    const PROPERTY_TYPES_CARSPACE = 'carspace';
    const PROPERTY_TYPES_DAIRY_FARMING = 'dairyFarming';
    const PROPERTY_TYPES_DEVELOPMENT_LAND = 'developmentLand';
    const PROPERTY_TYPES_DEVELOPMENT_SITE = 'developmentSite';
    const PROPERTY_TYPES_DUPLEX = 'duplex';
    const PROPERTY_TYPES_FARM = 'farm';
    const PROPERTY_TYPES_FISHING_FORESTRY = 'fishingForestry';
    const PROPERTY_TYPES_HOME_BASED = 'homeBased';
    const PROPERTY_TYPES_NEW_HOME_DESIGNS = 'newHomeDesigns';
    const PROPERTY_TYPES_HOTEL_LEISURE = 'hotelLeisure';
    const PROPERTY_TYPES_HOUSE = 'house';
    const PROPERTY_TYPES_NEW_HOUSE_LAND = 'newHouseLand';
    const PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE = 'industrialWarehouse';
    const PROPERTY_TYPES_IRRIGATION_SERVICES = 'irrigationServices';
    const PROPERTY_TYPES_NEW_LAND = 'newLand';
    const PROPERTY_TYPES_LIVESTOCK = 'livestock';
    const PROPERTY_TYPES_INTERNATIONAL = 'international';
    const PROPERTY_TYPES_MEDICAL_CONSULTING = 'medicalConsulting';
    const PROPERTY_TYPES_NEW_APARTMENTS = 'newApartments';
    const PROPERTY_TYPES_OFFICES = 'offices';
    const PROPERTY_TYPES_PARKING_CAR_SPACE = 'parkingCarSpace';
    const PROPERTY_TYPES_PENTHOUSE = 'penthouse';
    const PROPERTY_TYPES_RETAIL = 'retail';
    const PROPERTY_TYPES_RETIREMENT = 'retirement';
    const PROPERTY_TYPES_RURAL = 'rural';
    const PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING = 'ruralCommercialFarming';
    const PROPERTY_TYPES_SEMI_DETACHED = 'semiDetached';
    const PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS = 'showroomsBulkyGoods';
    const PROPERTY_TYPES_SPECIALIST_FARM = 'specialistFarm';
    const PROPERTY_TYPES_STUDIO = 'studio';
    const PROPERTY_TYPES_TERRACE = 'terrace';
    const PROPERTY_TYPES_TOWNHOUSE = 'townhouse';
    const PROPERTY_TYPES_VACANT_LAND = 'vacantLand';
    const PROPERTY_TYPES_VILLA = 'villa';
    const PROPERTY_TYPES_SERVICED_OFFICES = 'servicedOffices';
    const PROPERTY_TYPES_OTHER = 'other';
    const PROPERTY_TYPES_CHICKEN_SHOP = 'chickenShop';
    const PROPERTY_TYPES_SEAFOOD_SHOP = 'seafoodShop';
    const PROPERTY_TYPES_DELI_CAFE = 'deliCafe';
    const PROPERTY_TYPES_CROPPING = 'cropping';
    const PROPERTY_TYPES_VITICULTURE = 'viticulture';
    const PROPERTY_TYPES_MIXED_FARMING = 'mixedFarming';
    const PROPERTY_TYPES_GRAZING = 'grazing';
    const PROPERTY_TYPES_HORTICULTURE = 'horticulture';
    const PROPERTY_TYPES_EQUINE = 'equine';
    const PROPERTY_TYPES_FARMLET = 'farmlet';
    const PROPERTY_TYPES_ORCHARD = 'orchard';
    const PROPERTY_TYPES_RURAL_LIFESTYLE = 'ruralLifestyle';
    const PROPERTY_TYPES_ONLINE_BUSINESS = 'onlineBusiness';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectiveAllowableValues()
    {
        return [
            self::OBJECTIVE_SALE,
            self::OBJECTIVE_RENT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_ARCHIVED,
            self::STATUS_UNDER_OFFER,
            self::STATUS_SOLD,
            self::STATUS_LEASED,
            self::STATUS_NEW_DEVELOPMENT,
            self::STATUS_RECENTLY_UPDATED,
            self::STATUS__NEW,
            self::STATUS_LIVE,
            self::STATUS_PENDING,
            self::STATUS_DEPOSIT_TAKEN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaleModeAllowableValues()
    {
        return [
            self::SALE_MODE_BUY,
            self::SALE_MODE_RENT,
            self::SALE_MODE_SHARE,
            self::SALE_MODE_SOLD,
            self::SALE_MODE_LEASED,
            self::SALE_MODE_ARCHIVED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_RESIDENTIAL,
            self::CHANNEL_COMMERCIAL,
            self::CHANNEL_BUSINESS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypesAllowableValues()
    {
        return [
            self::PROPERTY_TYPES_UNKNOWN,
            self::PROPERTY_TYPES_ACREAGE_SEMI_RURAL,
            self::PROPERTY_TYPES_APARTMENT_UNIT_FLAT,
            self::PROPERTY_TYPES_AQUACULTURE,
            self::PROPERTY_TYPES_BLOCK_OF_UNITS,
            self::PROPERTY_TYPES_CARSPACE,
            self::PROPERTY_TYPES_DAIRY_FARMING,
            self::PROPERTY_TYPES_DEVELOPMENT_LAND,
            self::PROPERTY_TYPES_DEVELOPMENT_SITE,
            self::PROPERTY_TYPES_DUPLEX,
            self::PROPERTY_TYPES_FARM,
            self::PROPERTY_TYPES_FISHING_FORESTRY,
            self::PROPERTY_TYPES_HOME_BASED,
            self::PROPERTY_TYPES_NEW_HOME_DESIGNS,
            self::PROPERTY_TYPES_HOTEL_LEISURE,
            self::PROPERTY_TYPES_HOUSE,
            self::PROPERTY_TYPES_NEW_HOUSE_LAND,
            self::PROPERTY_TYPES_INDUSTRIAL_WAREHOUSE,
            self::PROPERTY_TYPES_IRRIGATION_SERVICES,
            self::PROPERTY_TYPES_NEW_LAND,
            self::PROPERTY_TYPES_LIVESTOCK,
            self::PROPERTY_TYPES_INTERNATIONAL,
            self::PROPERTY_TYPES_MEDICAL_CONSULTING,
            self::PROPERTY_TYPES_NEW_APARTMENTS,
            self::PROPERTY_TYPES_OFFICES,
            self::PROPERTY_TYPES_PARKING_CAR_SPACE,
            self::PROPERTY_TYPES_PENTHOUSE,
            self::PROPERTY_TYPES_RETAIL,
            self::PROPERTY_TYPES_RETIREMENT,
            self::PROPERTY_TYPES_RURAL,
            self::PROPERTY_TYPES_RURAL_COMMERCIAL_FARMING,
            self::PROPERTY_TYPES_SEMI_DETACHED,
            self::PROPERTY_TYPES_SHOWROOMS_BULKY_GOODS,
            self::PROPERTY_TYPES_SPECIALIST_FARM,
            self::PROPERTY_TYPES_STUDIO,
            self::PROPERTY_TYPES_TERRACE,
            self::PROPERTY_TYPES_TOWNHOUSE,
            self::PROPERTY_TYPES_VACANT_LAND,
            self::PROPERTY_TYPES_VILLA,
            self::PROPERTY_TYPES_SERVICED_OFFICES,
            self::PROPERTY_TYPES_OTHER,
            self::PROPERTY_TYPES_CHICKEN_SHOP,
            self::PROPERTY_TYPES_SEAFOOD_SHOP,
            self::PROPERTY_TYPES_DELI_CAFE,
            self::PROPERTY_TYPES_CROPPING,
            self::PROPERTY_TYPES_VITICULTURE,
            self::PROPERTY_TYPES_MIXED_FARMING,
            self::PROPERTY_TYPES_GRAZING,
            self::PROPERTY_TYPES_HORTICULTURE,
            self::PROPERTY_TYPES_EQUINE,
            self::PROPERTY_TYPES_FARMLET,
            self::PROPERTY_TYPES_ORCHARD,
            self::PROPERTY_TYPES_RURAL_LIFESTYLE,
            self::PROPERTY_TYPES_ONLINE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['objective'] = isset($data['objective']) ? $data['objective'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sale_mode'] = isset($data['sale_mode']) ? $data['sale_mode'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['address_parts'] = isset($data['address_parts']) ? $data['address_parts'] : null;
        $this->container['advertiser_identifiers'] = isset($data['advertiser_identifiers']) ? $data['advertiser_identifiers'] : null;
        $this->container['apm_identifiers'] = isset($data['apm_identifiers']) ? $data['apm_identifiers'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['building_area'] = isset($data['building_area']) ? $data['building_area'] : null;
        $this->container['building_area_sqm'] = isset($data['building_area_sqm']) ? $data['building_area_sqm'] : null;
        $this->container['carspaces'] = isset($data['carspaces']) ? $data['carspaces'] : null;
        $this->container['date_available'] = isset($data['date_available']) ? $data['date_available'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['date_minor_updated'] = isset($data['date_minor_updated']) ? $data['date_minor_updated'] : null;
        $this->container['date_purged'] = isset($data['date_purged']) ? $data['date_purged'] : null;
        $this->container['date_listed'] = isset($data['date_listed']) ? $data['date_listed'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dev_project_id'] = isset($data['dev_project_id']) ? $data['dev_project_id'] : null;
        $this->container['energy_efficiency_rating'] = isset($data['energy_efficiency_rating']) ? $data['energy_efficiency_rating'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['geo_location'] = isset($data['geo_location']) ? $data['geo_location'] : null;
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['inspection_details'] = isset($data['inspection_details']) ? $data['inspection_details'] : null;
        $this->container['is_new_development'] = isset($data['is_new_development']) ? $data['is_new_development'] : null;
        $this->container['land_area'] = isset($data['land_area']) ? $data['land_area'] : null;
        $this->container['land_area_sqm'] = isset($data['land_area_sqm']) ? $data['land_area_sqm'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['price_details'] = isset($data['price_details']) ? $data['price_details'] : null;
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['property_types'] = isset($data['property_types']) ? $data['property_types'] : null;
        $this->container['provider_details'] = isset($data['provider_details']) ? $data['provider_details'] : null;
        $this->container['rental_details'] = isset($data['rental_details']) ? $data['rental_details'] : null;
        $this->container['sale_details'] = isset($data['sale_details']) ? $data['sale_details'] : null;
        $this->container['is_withdrawn'] = isset($data['is_withdrawn']) ? $data['is_withdrawn'] : null;
        $this->container['seo_url'] = isset($data['seo_url']) ? $data['seo_url'] : null;
        $this->container['virtual_tour_url'] = isset($data['virtual_tour_url']) ? $data['virtual_tour_url'] : null;
        $this->container['homepass_enabled'] = isset($data['homepass_enabled']) ? $data['homepass_enabled'] : null;
        $this->container['statement_of_information'] = isset($data['statement_of_information']) ? $data['statement_of_information'] : null;
        $this->container['number_of_dwellings'] = isset($data['number_of_dwellings']) ? $data['number_of_dwellings'] : null;
        $this->container['highlights'] = isset($data['highlights']) ? $data['highlights'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectiveAllowableValues();
        if (!is_null($this->container['objective']) && !in_array($this->container['objective'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'objective', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSaleModeAllowableValues();
        if (!is_null($this->container['sale_mode']) && !in_array($this->container['sale_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sale_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['advertiser_identifiers'] === null) {
            $invalidProperties[] = "'advertiser_identifiers' can't be null";
        }
        if ($this->container['property_types'] === null) {
            $invalidProperties[] = "'property_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets objective
     *
     * @return string
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     *
     * @param string $objective Gets or Sets Objective
     *
     * @return $this
     */
    public function setObjective($objective)
    {
        $allowedValues = $this->getObjectiveAllowableValues();
        if (!is_null($objective) && !in_array($objective, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'objective', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['objective'] = $objective;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Gets or Sets Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sale_mode
     *
     * @return string
     */
    public function getSaleMode()
    {
        return $this->container['sale_mode'];
    }

    /**
     * Sets sale_mode
     *
     * @param string $sale_mode Gets or Sets SaleMode
     *
     * @return $this
     */
    public function setSaleMode($sale_mode)
    {
        $allowedValues = $this->getSaleModeAllowableValues();
        if (!is_null($sale_mode) && !in_array($sale_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sale_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sale_mode'] = $sale_mode;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Gets or Sets Channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($channel) && !in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The identifier which uniquely identifies the listing.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address_parts
     *
     * @return \Swagger\Client\Model\ListingsV1AddressParts
     */
    public function getAddressParts()
    {
        return $this->container['address_parts'];
    }

    /**
     * Sets address_parts
     *
     * @param \Swagger\Client\Model\ListingsV1AddressParts $address_parts address_parts
     *
     * @return $this
     */
    public function setAddressParts($address_parts)
    {
        $this->container['address_parts'] = $address_parts;

        return $this;
    }

    /**
     * Gets advertiser_identifiers
     *
     * @return \Swagger\Client\Model\ListingsV1AdvertiserIdentifiers
     */
    public function getAdvertiserIdentifiers()
    {
        return $this->container['advertiser_identifiers'];
    }

    /**
     * Sets advertiser_identifiers
     *
     * @param \Swagger\Client\Model\ListingsV1AdvertiserIdentifiers $advertiser_identifiers advertiser_identifiers
     *
     * @return $this
     */
    public function setAdvertiserIdentifiers($advertiser_identifiers)
    {
        $this->container['advertiser_identifiers'] = $advertiser_identifiers;

        return $this;
    }

    /**
     * Gets apm_identifiers
     *
     * @return \Swagger\Client\Model\ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    public function getApmIdentifiers()
    {
        return $this->container['apm_identifiers'];
    }

    /**
     * Sets apm_identifiers
     *
     * @param \Swagger\Client\Model\ListingsV1AustralianPropertyMonitorsIdentifiers $apm_identifiers apm_identifiers
     *
     * @return $this
     */
    public function setApmIdentifiers($apm_identifiers)
    {
        $this->container['apm_identifiers'] = $apm_identifiers;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float $bathrooms Total number of bathrooms in the property
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return float
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param float $bedrooms Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets building_area
     *
     * @return string
     */
    public function getBuildingArea()
    {
        return $this->container['building_area'];
    }

    /**
     * Sets building_area
     *
     * @param string $building_area The building area display value of the property e.g. 160 ha
     *
     * @return $this
     */
    public function setBuildingArea($building_area)
    {
        $this->container['building_area'] = $building_area;

        return $this;
    }

    /**
     * Gets building_area_sqm
     *
     * @return double
     */
    public function getBuildingAreaSqm()
    {
        return $this->container['building_area_sqm'];
    }

    /**
     * Sets building_area_sqm
     *
     * @param double $building_area_sqm The properties building area in square meters
     *
     * @return $this
     */
    public function setBuildingAreaSqm($building_area_sqm)
    {
        $this->container['building_area_sqm'] = $building_area_sqm;

        return $this;
    }

    /**
     * Gets carspaces
     *
     * @return float
     */
    public function getCarspaces()
    {
        return $this->container['carspaces'];
    }

    /**
     * Sets carspaces
     *
     * @param float $carspaces Total number of car spaces in the property.
     *
     * @return $this
     */
    public function setCarspaces($carspaces)
    {
        $this->container['carspaces'] = $carspaces;

        return $this;
    }

    /**
     * Gets date_available
     *
     * @return \DateTime
     */
    public function getDateAvailable()
    {
        return $this->container['date_available'];
    }

    /**
     * Sets date_available
     *
     * @param \DateTime $date_available The date the property is available. DateTime is in a local timezone.
     *
     * @return $this
     */
    public function setDateAvailable($date_available)
    {
        $this->container['date_available'] = $date_available;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets date_minor_updated
     *
     * @return \DateTime
     */
    public function getDateMinorUpdated()
    {
        return $this->container['date_minor_updated'];
    }

    /**
     * Sets date_minor_updated
     *
     * @param \DateTime $date_minor_updated When minor update applied to the listing. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDateMinorUpdated($date_minor_updated)
    {
        $this->container['date_minor_updated'] = $date_minor_updated;

        return $this;
    }

    /**
     * Gets date_purged
     *
     * @return \DateTime
     */
    public function getDatePurged()
    {
        return $this->container['date_purged'];
    }

    /**
     * Sets date_purged
     *
     * @param \DateTime $date_purged The date/time the listing was purged. It's only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDatePurged($date_purged)
    {
        $this->container['date_purged'] = $date_purged;

        return $this;
    }

    /**
     * Gets date_listed
     *
     * @return \DateTime
     */
    public function getDateListed()
    {
        return $this->container['date_listed'];
    }

    /**
     * Sets date_listed
     *
     * @param \DateTime $date_listed The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     *
     * @return $this
     */
    public function setDateListed($date_listed)
    {
        $this->container['date_listed'] = $date_listed;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The long description of the property provided by the advertiser.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dev_project_id
     *
     * @return int
     */
    public function getDevProjectId()
    {
        return $this->container['dev_project_id'];
    }

    /**
     * Sets dev_project_id
     *
     * @param int $dev_project_id The ID of the development project - null if no associated project
     *
     * @return $this
     */
    public function setDevProjectId($dev_project_id)
    {
        $this->container['dev_project_id'] = $dev_project_id;

        return $this;
    }

    /**
     * Gets energy_efficiency_rating
     *
     * @return int
     */
    public function getEnergyEfficiencyRating()
    {
        return $this->container['energy_efficiency_rating'];
    }

    /**
     * Sets energy_efficiency_rating
     *
     * @param int $energy_efficiency_rating Energy Efficiency Rating value for ACT properties
     *
     * @return $this
     */
    public function setEnergyEfficiencyRating($energy_efficiency_rating)
    {
        $this->container['energy_efficiency_rating'] = $energy_efficiency_rating;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features The property features specified by the advertiser
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets geo_location
     *
     * @return \Swagger\Client\Model\ListingsV1GeoLocation
     */
    public function getGeoLocation()
    {
        return $this->container['geo_location'];
    }

    /**
     * Sets geo_location
     *
     * @param \Swagger\Client\Model\ListingsV1GeoLocation $geo_location geo_location
     *
     * @return $this
     */
    public function setGeoLocation($geo_location)
    {
        $this->container['geo_location'] = $geo_location;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string $headline The short description of the property provided by the advertiser.
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets inspection_details
     *
     * @return \Swagger\Client\Model\ListingsV1PropertyInspections
     */
    public function getInspectionDetails()
    {
        return $this->container['inspection_details'];
    }

    /**
     * Sets inspection_details
     *
     * @param \Swagger\Client\Model\ListingsV1PropertyInspections $inspection_details inspection_details
     *
     * @return $this
     */
    public function setInspectionDetails($inspection_details)
    {
        $this->container['inspection_details'] = $inspection_details;

        return $this;
    }

    /**
     * Gets is_new_development
     *
     * @return bool
     */
    public function getIsNewDevelopment()
    {
        return $this->container['is_new_development'];
    }

    /**
     * Sets is_new_development
     *
     * @param bool $is_new_development Indicates whether the property is a new development
     *
     * @return $this
     */
    public function setIsNewDevelopment($is_new_development)
    {
        $this->container['is_new_development'] = $is_new_development;

        return $this;
    }

    /**
     * Gets land_area
     *
     * @return string
     */
    public function getLandArea()
    {
        return $this->container['land_area'];
    }

    /**
     * Sets land_area
     *
     * @param string $land_area The land area display string for the property e.g. 160 sqm
     *
     * @return $this
     */
    public function setLandArea($land_area)
    {
        $this->container['land_area'] = $land_area;

        return $this;
    }

    /**
     * Gets land_area_sqm
     *
     * @return double
     */
    public function getLandAreaSqm()
    {
        return $this->container['land_area_sqm'];
    }

    /**
     * Sets land_area_sqm
     *
     * @param double $land_area_sqm The properties land area in square meters
     *
     * @return $this
     */
    public function setLandAreaSqm($land_area_sqm)
    {
        $this->container['land_area_sqm'] = $land_area_sqm;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\ListingsV1ListingMedia[]
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\ListingsV1ListingMedia[] $media The media associated with the property provided by the advertiser
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets price_details
     *
     * @return \Swagger\Client\Model\ListingsV1PriceDetails
     */
    public function getPriceDetails()
    {
        return $this->container['price_details'];
    }

    /**
     * Sets price_details
     *
     * @param \Swagger\Client\Model\ListingsV1PriceDetails $price_details price_details
     *
     * @return $this
     */
    public function setPriceDetails($price_details)
    {
        $this->container['price_details'] = $price_details;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return string
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param string $property_id The identifier which uniquely identifies the property being advertised.  This may be empty if the Address of property is poorly described
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property_types
     *
     * @return string[]
     */
    public function getPropertyTypes()
    {
        return $this->container['property_types'];
    }

    /**
     * Sets property_types
     *
     * @param string[] $property_types Types of the property
     *
     * @return $this
     */
    public function setPropertyTypes($property_types)
    {
        $allowedValues = $this->getPropertyTypesAllowableValues();
        if (array_diff($property_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_types'] = $property_types;

        return $this;
    }

    /**
     * Gets provider_details
     *
     * @return \Swagger\Client\Model\ListingsV1ProviderDetails
     */
    public function getProviderDetails()
    {
        return $this->container['provider_details'];
    }

    /**
     * Sets provider_details
     *
     * @param \Swagger\Client\Model\ListingsV1ProviderDetails $provider_details provider_details
     *
     * @return $this
     */
    public function setProviderDetails($provider_details)
    {
        $this->container['provider_details'] = $provider_details;

        return $this;
    }

    /**
     * Gets rental_details
     *
     * @return \Swagger\Client\Model\ListingsV1RentalDetails
     */
    public function getRentalDetails()
    {
        return $this->container['rental_details'];
    }

    /**
     * Sets rental_details
     *
     * @param \Swagger\Client\Model\ListingsV1RentalDetails $rental_details rental_details
     *
     * @return $this
     */
    public function setRentalDetails($rental_details)
    {
        $this->container['rental_details'] = $rental_details;

        return $this;
    }

    /**
     * Gets sale_details
     *
     * @return \Swagger\Client\Model\ListingsV1SaleDetails
     */
    public function getSaleDetails()
    {
        return $this->container['sale_details'];
    }

    /**
     * Sets sale_details
     *
     * @param \Swagger\Client\Model\ListingsV1SaleDetails $sale_details sale_details
     *
     * @return $this
     */
    public function setSaleDetails($sale_details)
    {
        $this->container['sale_details'] = $sale_details;

        return $this;
    }

    /**
     * Gets is_withdrawn
     *
     * @return bool
     */
    public function getIsWithdrawn()
    {
        return $this->container['is_withdrawn'];
    }

    /**
     * Sets is_withdrawn
     *
     * @param bool $is_withdrawn Indicates if the property has been withdrawn from the market  The value will be 'true' When a listing is taken off market without being sold or leased.
     *
     * @return $this
     */
    public function setIsWithdrawn($is_withdrawn)
    {
        $this->container['is_withdrawn'] = $is_withdrawn;

        return $this;
    }

    /**
     * Gets seo_url
     *
     * @return string
     */
    public function getSeoUrl()
    {
        return $this->container['seo_url'];
    }

    /**
     * Sets seo_url
     *
     * @param string $seo_url Listing SEO URL
     *
     * @return $this
     */
    public function setSeoUrl($seo_url)
    {
        $this->container['seo_url'] = $seo_url;

        return $this;
    }

    /**
     * Gets virtual_tour_url
     *
     * @return string
     */
    public function getVirtualTourUrl()
    {
        return $this->container['virtual_tour_url'];
    }

    /**
     * Sets virtual_tour_url
     *
     * @param string $virtual_tour_url The Listing's Virtual Tour URL.
     *
     * @return $this
     */
    public function setVirtualTourUrl($virtual_tour_url)
    {
        $this->container['virtual_tour_url'] = $virtual_tour_url;

        return $this;
    }

    /**
     * Gets homepass_enabled
     *
     * @return bool
     */
    public function getHomepassEnabled()
    {
        return $this->container['homepass_enabled'];
    }

    /**
     * Sets homepass_enabled
     *
     * @param bool $homepass_enabled If Homepass is enabled for the listing (agency)
     *
     * @return $this
     */
    public function setHomepassEnabled($homepass_enabled)
    {
        $this->container['homepass_enabled'] = $homepass_enabled;

        return $this;
    }

    /**
     * Gets statement_of_information
     *
     * @return \Swagger\Client\Model\ListingsV1StatementOfInformation
     */
    public function getStatementOfInformation()
    {
        return $this->container['statement_of_information'];
    }

    /**
     * Sets statement_of_information
     *
     * @param \Swagger\Client\Model\ListingsV1StatementOfInformation $statement_of_information statement_of_information
     *
     * @return $this
     */
    public function setStatementOfInformation($statement_of_information)
    {
        $this->container['statement_of_information'] = $statement_of_information;

        return $this;
    }

    /**
     * Gets number_of_dwellings
     *
     * @return int
     */
    public function getNumberOfDwellings()
    {
        return $this->container['number_of_dwellings'];
    }

    /**
     * Sets number_of_dwellings
     *
     * @param int $number_of_dwellings Number of dwellings for current listing
     *
     * @return $this
     */
    public function setNumberOfDwellings($number_of_dwellings)
    {
        $this->container['number_of_dwellings'] = $number_of_dwellings;

        return $this;
    }

    /**
     * Gets highlights
     *
     * @return string[]
     */
    public function getHighlights()
    {
        return $this->container['highlights'];
    }

    /**
     * Sets highlights
     *
     * @param string[] $highlights Highlight items for the listing
     *
     * @return $this
     */
    public function setHighlights($highlights)
    {
        $this->container['highlights'] = $highlights;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
