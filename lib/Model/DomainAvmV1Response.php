<?php
/**
 * DomainAvmV1Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainAvmV1Response Class Doc Comment
 *
 * @category Class
 * @description The response model used to provide the bank grade valuation.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainAvmV1Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainAvm.v1.Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'val_ex_job_number' => 'string',
        'estimate' => 'int',
        'estimate_low' => 'int',
        'estimate_high' => 'int',
        'confidence' => 'string',
        'percent_fsd' => 'double',
        'estimate_date' => 'string',
        'property_type' => 'string',
        'year_built' => 'string',
        'bedrooms' => 'int',
        'bathrooms' => 'int',
        'carparks' => 'int',
        'building_area' => 'double',
        'land_area' => 'double',
        'address' => '\Swagger\Client\Model\DomainAvmV1Address',
        'report' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'val_ex_job_number' => null,
        'estimate' => 'int32',
        'estimate_low' => 'int32',
        'estimate_high' => 'int32',
        'confidence' => null,
        'percent_fsd' => 'double',
        'estimate_date' => null,
        'property_type' => null,
        'year_built' => null,
        'bedrooms' => 'int32',
        'bathrooms' => 'int32',
        'carparks' => 'int32',
        'building_area' => 'double',
        'land_area' => 'double',
        'address' => null,
        'report' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'val_ex_job_number' => 'valExJobNumber',
        'estimate' => 'estimate',
        'estimate_low' => 'estimateLow',
        'estimate_high' => 'estimateHigh',
        'confidence' => 'confidence',
        'percent_fsd' => 'percentFsd',
        'estimate_date' => 'estimateDate',
        'property_type' => 'propertyType',
        'year_built' => 'yearBuilt',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'carparks' => 'carparks',
        'building_area' => 'buildingArea',
        'land_area' => 'landArea',
        'address' => 'address',
        'report' => 'report'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'val_ex_job_number' => 'setValExJobNumber',
        'estimate' => 'setEstimate',
        'estimate_low' => 'setEstimateLow',
        'estimate_high' => 'setEstimateHigh',
        'confidence' => 'setConfidence',
        'percent_fsd' => 'setPercentFsd',
        'estimate_date' => 'setEstimateDate',
        'property_type' => 'setPropertyType',
        'year_built' => 'setYearBuilt',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'carparks' => 'setCarparks',
        'building_area' => 'setBuildingArea',
        'land_area' => 'setLandArea',
        'address' => 'setAddress',
        'report' => 'setReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'val_ex_job_number' => 'getValExJobNumber',
        'estimate' => 'getEstimate',
        'estimate_low' => 'getEstimateLow',
        'estimate_high' => 'getEstimateHigh',
        'confidence' => 'getConfidence',
        'percent_fsd' => 'getPercentFsd',
        'estimate_date' => 'getEstimateDate',
        'property_type' => 'getPropertyType',
        'year_built' => 'getYearBuilt',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'carparks' => 'getCarparks',
        'building_area' => 'getBuildingArea',
        'land_area' => 'getLandArea',
        'address' => 'getAddress',
        'report' => 'getReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['val_ex_job_number'] = isset($data['val_ex_job_number']) ? $data['val_ex_job_number'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['estimate_low'] = isset($data['estimate_low']) ? $data['estimate_low'] : null;
        $this->container['estimate_high'] = isset($data['estimate_high']) ? $data['estimate_high'] : null;
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
        $this->container['percent_fsd'] = isset($data['percent_fsd']) ? $data['percent_fsd'] : null;
        $this->container['estimate_date'] = isset($data['estimate_date']) ? $data['estimate_date'] : null;
        $this->container['property_type'] = isset($data['property_type']) ? $data['property_type'] : null;
        $this->container['year_built'] = isset($data['year_built']) ? $data['year_built'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['carparks'] = isset($data['carparks']) ? $data['carparks'] : null;
        $this->container['building_area'] = isset($data['building_area']) ? $data['building_area'] : null;
        $this->container['land_area'] = isset($data['land_area']) ? $data['land_area'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['report'] = isset($data['report']) ? $data['report'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets val_ex_job_number
     *
     * @return string
     */
    public function getValExJobNumber()
    {
        return $this->container['val_ex_job_number'];
    }

    /**
     * Sets val_ex_job_number
     *
     * @param string $val_ex_job_number The client identification for the valuation transaction from request.
     *
     * @return $this
     */
    public function setValExJobNumber($val_ex_job_number)
    {
        $this->container['val_ex_job_number'] = $val_ex_job_number;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The estimate.
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets estimate_low
     *
     * @return int
     */
    public function getEstimateLow()
    {
        return $this->container['estimate_low'];
    }

    /**
     * Sets estimate_low
     *
     * @param int $estimate_low The estimate low range.
     *
     * @return $this
     */
    public function setEstimateLow($estimate_low)
    {
        $this->container['estimate_low'] = $estimate_low;

        return $this;
    }

    /**
     * Gets estimate_high
     *
     * @return int
     */
    public function getEstimateHigh()
    {
        return $this->container['estimate_high'];
    }

    /**
     * Sets estimate_high
     *
     * @param int $estimate_high The estimate high range.
     *
     * @return $this
     */
    public function setEstimateHigh($estimate_high)
    {
        $this->container['estimate_high'] = $estimate_high;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return string
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param string $confidence The confidence level of the estimates.
     *
     * @return $this
     */
    public function setConfidence($confidence)
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets percent_fsd
     *
     * @return double
     */
    public function getPercentFsd()
    {
        return $this->container['percent_fsd'];
    }

    /**
     * Sets percent_fsd
     *
     * @param double $percent_fsd The forecast standard deviation of the property.
     *
     * @return $this
     */
    public function setPercentFsd($percent_fsd)
    {
        $this->container['percent_fsd'] = $percent_fsd;

        return $this;
    }

    /**
     * Gets estimate_date
     *
     * @return string
     */
    public function getEstimateDate()
    {
        return $this->container['estimate_date'];
    }

    /**
     * Sets estimate_date
     *
     * @param string $estimate_date The date the estimates were generated.
     *
     * @return $this
     */
    public function setEstimateDate($estimate_date)
    {
        $this->container['estimate_date'] = $estimate_date;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string $property_type Property type used when estimating the value of property. Valid values: [House, Unit].
     *
     * @return $this
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return string
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param string $year_built The year of construction.
     *
     * @return $this
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms The amount of bedrooms.
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int $bathrooms The amount of bathrooms.
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets carparks
     *
     * @return int
     */
    public function getCarparks()
    {
        return $this->container['carparks'];
    }

    /**
     * Sets carparks
     *
     * @param int $carparks The amount of carparks.
     *
     * @return $this
     */
    public function setCarparks($carparks)
    {
        $this->container['carparks'] = $carparks;

        return $this;
    }

    /**
     * Gets building_area
     *
     * @return double
     */
    public function getBuildingArea()
    {
        return $this->container['building_area'];
    }

    /**
     * Sets building_area
     *
     * @param double $building_area Building area in square meters to be used when estimating value of property, for houses only not units.
     *
     * @return $this
     */
    public function setBuildingArea($building_area)
    {
        $this->container['building_area'] = $building_area;

        return $this;
    }

    /**
     * Gets land_area
     *
     * @return double
     */
    public function getLandArea()
    {
        return $this->container['land_area'];
    }

    /**
     * Sets land_area
     *
     * @param double $land_area Land area in square meters to be used when estimating value of property, for houses only not units.
     *
     * @return $this
     */
    public function setLandArea($land_area)
    {
        $this->container['land_area'] = $land_area;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\DomainAvmV1Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\DomainAvmV1Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets report
     *
     * @return string
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param string $report The B64 encoded pdf of the valuation report.
     *
     * @return $this
     */
    public function setReport($report)
    {
        $this->container['report'] = $report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
