<?php
/**
 * ListingAdminV2Tenant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: latest
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingAdminV2Tenant Class Doc Comment
 *
 * @category Class
 * @description Tenant Information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingAdminV2Tenant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingAdmin.v2.Tenant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lease_start' => '\DateTime',
        'lease_end' => '\DateTime',
        'name' => 'string',
        'rental_details' => 'string',
        'lease_options' => 'string',
        'tenant_info_term_of_lease_from' => 'int',
        'tenant_info_term_of_lease_to' => 'int',
        'lease_date_variable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lease_start' => 'date-time',
        'lease_end' => 'date-time',
        'name' => null,
        'rental_details' => null,
        'lease_options' => null,
        'tenant_info_term_of_lease_from' => 'int32',
        'tenant_info_term_of_lease_to' => 'int32',
        'lease_date_variable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lease_start' => 'leaseStart',
        'lease_end' => 'leaseEnd',
        'name' => 'name',
        'rental_details' => 'rentalDetails',
        'lease_options' => 'leaseOptions',
        'tenant_info_term_of_lease_from' => 'tenantInfoTermOfLeaseFrom',
        'tenant_info_term_of_lease_to' => 'tenantInfoTermOfLeaseTo',
        'lease_date_variable' => 'leaseDateVariable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lease_start' => 'setLeaseStart',
        'lease_end' => 'setLeaseEnd',
        'name' => 'setName',
        'rental_details' => 'setRentalDetails',
        'lease_options' => 'setLeaseOptions',
        'tenant_info_term_of_lease_from' => 'setTenantInfoTermOfLeaseFrom',
        'tenant_info_term_of_lease_to' => 'setTenantInfoTermOfLeaseTo',
        'lease_date_variable' => 'setLeaseDateVariable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lease_start' => 'getLeaseStart',
        'lease_end' => 'getLeaseEnd',
        'name' => 'getName',
        'rental_details' => 'getRentalDetails',
        'lease_options' => 'getLeaseOptions',
        'tenant_info_term_of_lease_from' => 'getTenantInfoTermOfLeaseFrom',
        'tenant_info_term_of_lease_to' => 'getTenantInfoTermOfLeaseTo',
        'lease_date_variable' => 'getLeaseDateVariable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lease_start'] = isset($data['lease_start']) ? $data['lease_start'] : null;
        $this->container['lease_end'] = isset($data['lease_end']) ? $data['lease_end'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rental_details'] = isset($data['rental_details']) ? $data['rental_details'] : null;
        $this->container['lease_options'] = isset($data['lease_options']) ? $data['lease_options'] : null;
        $this->container['tenant_info_term_of_lease_from'] = isset($data['tenant_info_term_of_lease_from']) ? $data['tenant_info_term_of_lease_from'] : null;
        $this->container['tenant_info_term_of_lease_to'] = isset($data['tenant_info_term_of_lease_to']) ? $data['tenant_info_term_of_lease_to'] : null;
        $this->container['lease_date_variable'] = isset($data['lease_date_variable']) ? $data['lease_date_variable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lease_start
     *
     * @return \DateTime
     */
    public function getLeaseStart()
    {
        return $this->container['lease_start'];
    }

    /**
     * Sets lease_start
     *
     * @param \DateTime $lease_start The date on which the tenants lease began, or is due to begin.
     *
     * @return $this
     */
    public function setLeaseStart($lease_start)
    {
        $this->container['lease_start'] = $lease_start;

        return $this;
    }

    /**
     * Gets lease_end
     *
     * @return \DateTime
     */
    public function getLeaseEnd()
    {
        return $this->container['lease_end'];
    }

    /**
     * Sets lease_end
     *
     * @param \DateTime $lease_end The date on which the tenants lease is due to end
     *
     * @return $this
     */
    public function setLeaseEnd($lease_end)
    {
        $this->container['lease_end'] = $lease_end;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the current tenant of the property, up to 100 characters
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rental_details
     *
     * @return string
     */
    public function getRentalDetails()
    {
        return $this->container['rental_details'];
    }

    /**
     * Sets rental_details
     *
     * @param string $rental_details Information regarding current rental, up to 100 characters
     *
     * @return $this
     */
    public function setRentalDetails($rental_details)
    {
        $this->container['rental_details'] = $rental_details;

        return $this;
    }

    /**
     * Gets lease_options
     *
     * @return string
     */
    public function getLeaseOptions()
    {
        return $this->container['lease_options'];
    }

    /**
     * Sets lease_options
     *
     * @param string $lease_options Leasing options available to a prospective tenant, up to 100 characters
     *
     * @return $this
     */
    public function setLeaseOptions($lease_options)
    {
        $this->container['lease_options'] = $lease_options;

        return $this;
    }

    /**
     * Gets tenant_info_term_of_lease_from
     *
     * @return int
     */
    public function getTenantInfoTermOfLeaseFrom()
    {
        return $this->container['tenant_info_term_of_lease_from'];
    }

    /**
     * Sets tenant_info_term_of_lease_from
     *
     * @param int $tenant_info_term_of_lease_from The from range of the tenant's current lease
     *
     * @return $this
     */
    public function setTenantInfoTermOfLeaseFrom($tenant_info_term_of_lease_from)
    {
        $this->container['tenant_info_term_of_lease_from'] = $tenant_info_term_of_lease_from;

        return $this;
    }

    /**
     * Gets tenant_info_term_of_lease_to
     *
     * @return int
     */
    public function getTenantInfoTermOfLeaseTo()
    {
        return $this->container['tenant_info_term_of_lease_to'];
    }

    /**
     * Sets tenant_info_term_of_lease_to
     *
     * @param int $tenant_info_term_of_lease_to The to range of the tenant's current lease
     *
     * @return $this
     */
    public function setTenantInfoTermOfLeaseTo($tenant_info_term_of_lease_to)
    {
        $this->container['tenant_info_term_of_lease_to'] = $tenant_info_term_of_lease_to;

        return $this;
    }

    /**
     * Gets lease_date_variable
     *
     * @return bool
     */
    public function getLeaseDateVariable()
    {
        return $this->container['lease_date_variable'];
    }

    /**
     * Sets lease_date_variable
     *
     * @param bool $lease_date_variable Is tenant lease date variable
     *
     * @return $this
     */
    public function setLeaseDateVariable($lease_date_variable)
    {
        $this->container['lease_date_variable'] = $lease_date_variable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
